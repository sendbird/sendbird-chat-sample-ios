#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef SENDBIRDCHAT_SWIFT_H
#define SENDBIRDCHAT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendbirdChat",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
enum SBDMessageSendingStatus : NSInteger;
@class SBDSender;
enum SBDChannelType : NSInteger;
@class SBDUser;
enum SBDMentionType : NSInteger;
@class SBDThreadInfo;
@class SBDMessageMetaArray;
@class SBDReaction;
@class SBDOGMetaData;
@class SBDPlugin;
@class SBDBaseMessageCreateParams;

/// The <code>BaseMessage</code> class represents the base message which is generated by a user or an admin.
/// The <code>UserMessage</code>, the <code>FileMessage</code> and the <code>AdminMessage</code> are derived from this class.
SWIFT_CLASS_NAMED("BaseMessage")
@interface SBDBaseMessage : NSObject <NSCopying>
@property (nonatomic, readonly, copy) NSObject * _Nullable uniqueKey;
/// Request ID for checking ACK.
@property (nonatomic, copy) NSString * _Nullable reqId;
@property (nonatomic, copy) NSString * _Nullable requestId;
@property (nonatomic, readonly) BOOL fromCurrentDevice;
/// Unique message ID.
@property (nonatomic, readonly) int64_t messageId;
/// Message text.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Represents the dispatch state of the message.
/// If message is not dispatched completely to the Sendbird server, the value is <code>.pending</code>.
/// If failed to send the message, the value is <code>.failed</code>.
/// And if success to send the message, the value is <code>.succeeded</code>.
/// since:
/// 3.0.173
@property (nonatomic) enum SBDMessageSendingStatus sendingStatus;
/// Sender of the <em>message</em>. This is represented by <code>Sender</code> class.
@property (nonatomic, strong) SBDSender * _Nullable sender;
/// Channel URL which has this message.
@property (nonatomic, readonly, copy) NSString * _Nonnull channelURL;
/// Channel type of this message.
@property (nonatomic) enum SBDChannelType channelType;
/// The list of users who was mentioned together with the message.
/// since:
/// 3.0.90
@property (nonatomic, copy) NSArray<SBDUser *> * _Nonnull mentionedUsers;
/// since:
/// 3.0.103
@property (nonatomic) enum SBDMentionType mentionType;
/// Represents target user ids to mention when success to send the message.
/// This value is valid only when the message is a pending message or failed message.
/// If the message is a succeeded message, see <code>mentionedUserIds</code>
/// since:
/// 3.0.147
/// note:
/// see <code>mentionedUserIds</code> when the message is a succeeded message.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable requestedMentionUserIds;
/// Message created time in millisecond(UTC).
@property (nonatomic) int64_t createdAt;
/// Message updated time in millisecond(UTC).
@property (nonatomic, readonly) int64_t updatedAt;
/// The unique ID of the parent message. If the message object is a parent message or a single message
/// without any reply, the value of this property is 0. If the object is a reply, the value is the unique ID of its parent message.
/// note:
/// The default value is <code>0</code>.
/// since:
/// 3.0.181
@property (nonatomic, readonly) int64_t parentMessageId;
/// The thread info that belongs to this message object.
/// since:
/// 3.0.181
@property (nonatomic, strong) SBDThreadInfo * _Nonnull threadInfo;
/// Gets an array of meta arrays sorted by chronological order.
/// since:
/// 3.0.148
@property (nonatomic, copy) NSArray<SBDMessageMetaArray *> * _Nullable metaArrays;
/// The custom data for message.
@property (nonatomic, copy) NSString * _Nonnull data;
/// Custom message type.
@property (nonatomic, readonly, copy) NSString * _Nullable customType;
@property (nonatomic, copy) NSDictionary<NSString *, SBDReaction *> * _Nonnull reactionMap;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull reactionKeys;
/// Reaction list on this message
@property (nonatomic, readonly, copy) NSArray<SBDReaction *> * _Nonnull reactions;
/// Message survival seconds, default is -1
@property (nonatomic) NSInteger messageSurvivalSeconds;
/// Whether the message is silent or not
/// If the message is silent,  last message won’t be changed and <code>channelWasChanged(_:)</code> will not get called on receiver’s sidel
/// since:
/// 3.0.184
@property (nonatomic) BOOL silent;
/// Whether the message is silent or not
/// If the message is silent,  last message won’t be changed and <code>channelWasChanged(_:)</code> will not get called on receiver’s sidel
/// since:
/// 3.0.184
@property (nonatomic, readonly) BOOL isSilent;
/// The error code of file.
/// This value generated only when message send fails.
/// since:
/// 3.0.161
@property (nonatomic) NSUInteger errorCode;
/// Optional open graph information if the message contains links.
/// We only support first open graph tag appearance on the first link
/// since:
/// 3.0.193
@property (nonatomic, readonly, strong) SBDOGMetaData * _Nullable ogMetaData;
/// List of plugin that are corresponding to this message
/// since:
/// 3.0.207
@property (nonatomic, readonly, copy) NSArray<SBDPlugin *> * _Nullable plugins;
/// Current message’s parent message object.
/// When <code>parentMessage</code> is <code>UserMessage</code> it only has 3 properties: <code>message</code>, <code>sender</code> and <code>createdAt</code>
/// When <code>parentMessage</code> is <code>AdminMessage</code> it only has 3 properties: <code>message</code>, <code>sender</code> and <code>createdAt</code>
/// When <code>parentMessage</code> is <code>FileMessage</code> it only has 6 properties: <code>message</code>, <code>sender</code>, <code>createdAt</code>, <code>name</code>, <code>url</code>, <code>type</code>
/// <ul>
///   <li>
///     Since 3.0.236
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) SBDBaseMessage * _Nullable parentMessage;
/// Determines whether current message is also shown on channel.
/// since:
/// 3.0.236
@property (nonatomic, readonly) BOOL isReplyToChannel;
/// Represents whether this message was created by an operator.
/// since:
/// 3.0.198
@property (nonatomic) BOOL isOperatorMessage;
@property (nonatomic, readonly) BOOL forceUpdateLastMessage;
/// An object that was used to resend this message. This property is valid when the sendingStatus is <code>MessageSendingStatus.pending</code> or <code>MessageSendingStatus.failed</code>. When this message is trying to be resent, this property will be used as well. If the message object is <code>UserMessage</code> class, then the <code>messageParams</code> has to be casted to <code>UserMessageCreateParams</code> class. If the message object is <code>FileMessage</code> class, then the <code>messageParams</code> has to be casted to <code>FileMessageCreateParams</code> class.
/// <ul>
///   <li>
///     Since 3.1.0
///   </li>
/// </ul>
@property (nonatomic, strong) SBDBaseMessageCreateParams * _Nullable messageParams;
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>AdminMessage</code> class represents a <span>message</span> which is sent by an admin
/// via <a href="https://docs.sendbird.com/platform">Platform API</a>. The admin <span>message</span>
/// doesn’t have a sender. This <span>message</span> is sutable for a notice to inform the members
/// in a group channel or the participants in an open channel. If you would like to know about the Platform API
/// for the <span>message</span>, see <a href="https://docs.sendbird.com/platform#messages_3_send">Send a message</a>.
SWIFT_CLASS_NAMED("AdminMessage")
@interface SBDAdminMessage : SBDBaseMessage
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ApiRequestType, closed) {
  ApiRequestTypePassive = 0,
  ApiRequestTypeActive = 1,
};


/// An object contains application information
SWIFT_CLASS_NAMED("AppInfo")
@interface SBDAppInfo : NSObject
/// This is the latest hash value for Emoji.
/// Default value is empty string.
/// since:
/// 3.0.180
@property (nonatomic, copy) NSString * _Nonnull emojiHash;
/// This is the uploadable file size limit. (The unit is bytes.)
/// since:
/// 3.0.180
@property (nonatomic) int64_t uploadSizeLimit;
/// This is the premium feature list using on your Application ID.
/// since:
/// 3.0.180
@property (nonatomic, copy) NSArray<NSString *> * _Nullable premiumFeatureList;
/// This is the state of using the reaction feature.
/// since:
/// 3.0.180
@property (nonatomic) BOOL useReaction;
/// This is the application attributes list using on your Application ID.
/// since:
/// 3.0.198
@property (nonatomic, copy) NSArray<NSString *> * _Nullable applicationAttributes;
/// This is the application attribute to tell SDK use native websocket
/// since:
/// 3.0.222
@property (nonatomic) BOOL useNativeWS;
/// <ul>
///   <li>
///     Since 3.0.231
///   </li>
/// </ul>
@property (nonatomic) NSInteger concurrentCallLimit;
/// since:
/// 3.0.231
@property (nonatomic) NSTimeInterval backOffDelay;
/// A getter for the <code>disableSupergroupMACK</code> property.
/// since:
/// 3.0.230
@property (nonatomic) BOOL disableSuperGroupMACK;
- (nonnull instancetype)initWithEmojiHash:(NSString * _Nonnull)emojiHash uploadSizeLimit:(int64_t)uploadSizeLimit premiumFeatureList:(NSArray<NSString *> * _Nullable)premiumFeatureList useReaction:(BOOL)useReaction applicationAttributes:(NSArray<NSString *> * _Nullable)applicationAttributes concurrentCallLimit:(NSInteger)concurrentCallLimit backOffDelay:(NSTimeInterval)backOffDelay useNativeWS:(BOOL)useNativeWS disableSuperGroupMACK:(BOOL)disableSuperGroupMACK OBJC_DESIGNATED_INITIALIZER;
/// This function can check if Emoji information needs to be updated to date.
/// <ul>
///   <li>
///     Since 3.0.180
///   </li>
/// </ul>
/// \param prevEmojiHash Emoji hash value in use
///
- (BOOL)isEmojiUpdateNeededWithPrevEmojiHash:(NSString * _Nonnull)prevEmojiHash SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the options for the Apple Critical Alert.
/// The <code>BaseMessageCreateParams</code> object may have the <code>AppleCriticalAlertOptions</code> object as an <code>appleCriticalAlertOptions</code> property.
/// When the message that has this options is received by the iOS device, the message is displayed as a critical alert.
/// See the <a href="https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification"><code>Generating a Remote Notification</code></a> for the details.
/// since:
/// 3.0.221
SWIFT_CLASS_NAMED("AppleCriticalAlertOptions")
@interface SBDAppleCriticalAlertOptions : NSObject
/// The name of a sound file in the iOS app. The default value is <code>default</code>.
/// since:
/// 3.0.221
@property (nonatomic, copy) NSString * _Nonnull name;
/// The volume for the critical alert’s sound.
/// Set this to a value between 0.0 (silent) and 1.0 (full volume).
/// The default value is <code>1.0</code>.
/// since:
/// 3.0.221
@property (nonatomic) float volume;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name volume:(float)volume OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBError;

/// The <code>ApplicationUserListQuery</code> class is a query class for getting the list of all
/// users of the current application.
/// This instance is created by <code>createApplicationUserListQuery()</code> of <code>SendbirdChat</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("ApplicationUserListQuery")
@interface SBDApplicationUserListQuery : NSObject
/// Sets the user IDs filter.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIdsFilter;
/// The meta data key filter. This query will return users that has the meta data key and values.
/// This has to be set by <code>setMetaDataFilterWithKey:values:</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable metaDataKeyFilter;
/// The meta data values filter. This query will return users that has the meta data key and values.
/// This has to be set by <code>setMetaDataFilterWithKey:values:</code>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable metaDataValuesFilter;
/// Filters user’s nickname that starts with
/// since:
/// 3.0.223
@property (nonatomic, copy) NSString * _Nullable nicknameStartsWithFilter;
/// Sets meta data filter.
/// \param key The key of the meta data to use for filter.
///
/// \param values The values of the meta data to use for filter.
///
- (void)setMetaDataFilterWithKey:(NSString * _Nullable)key values:(NSArray<NSString *> * _Nullable)values;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use SendbirdChat's `createApplicationUserListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>ApplicationUserListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDApplicationUserListQuery * _Nonnull)setupFor:(SBDApplicationUserListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>BannedUserListQuery</code> class is a query class for getting the list of banned users in
/// a specific channel.
/// This instance is created by <code>createBannedUserListQuery</code> of <code>BaseChannel</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("BannedUserListQuery")
@interface SBDBannedUserListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) enum SBDChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createBannedUserListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BannedUserListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDBannedUserListQuery * _Nonnull)setupFor:(SBDBannedUserListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class NSOperationQueue;

/// An object represents base class for channel
SWIFT_CLASS_NAMED("BaseChannel")
@interface SBDBaseChannel : NSObject
/// The channel URL.
@property (nonatomic, copy) NSString * _Nonnull channelURL;
/// The name of channel.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The channel cover image URL.
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// User who creates the channel
/// since:
/// 3.0.199
@property (nonatomic, strong) SBDUser * _Nullable creator;
/// The timestamp when the channel is created.
@property (nonatomic) int64_t createdAt;
/// The custom data of the channel.
@property (nonatomic, copy) NSString * _Nullable data;
/// The custom type of the channel.
@property (nonatomic, copy) NSString * _Nullable customType;
/// The flag for a frozen channel.
/// since:
/// 3.0.89
@property (nonatomic) BOOL isFrozen;
/// Represents the channel is ephemeral or not.
/// since:
/// 3.0.90
@property (nonatomic) BOOL isEphemeral;
/// Gets the current user’s muted information in this channel.
/// since:
/// 3.0.118
/// \param completionHandler The handler block to be executed.
///
- (void)getMyMutedInfoWithCompletionHandler:(void (^ _Nullable)(BOOL, NSString * _Nonnull, int64_t, int64_t, int64_t, SBError * _Nullable))completionHandler;
/// Channel type
@property (nonatomic, readonly) enum SBDChannelType channelType;
/// Indicates possibility of outdated information
@property (nonatomic) BOOL isDirty;
@property (nonatomic) int64_t lastSyncedChangeLogsTimestamp;
/// Checks the channel type is open channel or not.
///
/// returns:
/// Returns true when this is open channel.
- (BOOL)isOpenChannel SWIFT_WARN_UNUSED_RESULT;
/// Checks the channel type is group channel or not.
///
/// returns:
/// <code>true</code> if when this is a group channel.
- (BOOL)isGroupChannel SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) NSOperationQueue * _Nonnull operationQueue;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL name:(NSString * _Nonnull)name coverURL:(NSString * _Nullable)coverURL createdAt:(int64_t)createdAt creator:(SBDUser * _Nullable)creator isCreated:(BOOL)isCreated data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType isEphemeral:(BOOL)isEphemeral isFrozen:(BOOL)isFrozen lastSyncedTs:(int64_t)lastSyncedTs OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)updateWith:(SBDBaseChannel * _Nullable)newValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDReactionEvent;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Adds a reaction to a message.
/// Messages with <code>sendingStatus</code> is not <code>.success</code> will handler to return error.
/// note:
/// This is idempotent.
/// note:
/// This feature is only available in group channels.
/// since:
/// 3.0.169
/// \param message The message object that the reaction will be added.
///
/// \param key The reaction key to be added.
///
/// \param completionHandler The handler block to be executed. If succeeded, the <code>reactionEvent</code>
/// will have the information of the reaction.
///
- (void)addReactionWithMessage:(SBDBaseMessage * _Nonnull)message key:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBDReactionEvent * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes a reaction from a message.
/// note:
/// This is idempotent.
/// note:
/// This feature is only available in group channels.
/// since:
/// 3.0.169
/// \param message The message object that has the reaction key.
///
/// \param key The reaction key to be deleted.
///
/// \param completionHandler The handler block to be executed. If succeeded, the <code>reactionEvent</code> will have the information of the reaction.
///
- (void)deleteReactionWithMessage:(SBDBaseMessage * _Nonnull)message key:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBDReactionEvent * _Nullable, SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Deletes a message. The message’s sender has to be the current user.
/// \param message The message to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMessage:(SBDBaseMessage * _Nonnull)message completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes a message. The message’s sender has to be the current user.
/// since:
/// 3.0.179
/// \param messageId The message ID to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMessageWithMessageId:(int64_t)messageId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end

@class SBDMessageListParams;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Retrieves previous or next messages based on a specified timestamp in the channel.
/// since:
/// 3.0.181
/// \param timestamp Specifies the timestamp to be the reference point for messages to retrieve, in Unix
/// milliseconds format. Messages sent before or after the timestamp can be retrieved.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to be executed. The <code>messages</code> is the messages
/// of the channel. The <code>error</code> indicates whether there is an error. If there is no error, the value is null.
///
- (void)getMessagesByTimestamp:(int64_t)timestamp params:(SBDMessageListParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Retrieves previous or next messages based on their message ID in a specific channel.
/// since:
/// 3.0.181
/// \param messageId Specifies the message ID to be the reference point for messages to retrieve.
/// Messages sent before or after the message with the matching message ID can be retrieved.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to be executed. The <code>messages</code> is the messages
/// of the channel. The <code>error</code> indicates whether there is an error. If there is no error, the value is null.
///
- (void)getMessagesByMessageId:(int64_t)messageId params:(SBDMessageListParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
@end


/// Mappable protocol to initialize sendbird object from a given dictionary.
/// note:
/// This is legacy method for objective c and recommend to use Codable protocol for swift
SWIFT_PROTOCOL("_TtP12SendbirdChat8Mappable_")
@protocol Mappable
/// Initialize an object with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@optional
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;

/// Protocol to provide serialization
SWIFT_PROTOCOL("_TtP12SendbirdChat12Serializable_")
@protocol Serializable
/// Serializes sendbird object to data
///
/// returns:
/// Data
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Builds a sendbird object from serialized data
/// \param data Data object
///
///
/// returns:
/// Sendbird object type
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>BaseChannel</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly) BOOL isCurrentUserOperator;
@end

@class SBDMessageChangeLogsParams;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Retrieves the changelogs since a specified token regarding the updated messages or the unique IDs
/// of deleted messages in the channel.
/// since:
/// 3.0.181
/// \param token Specifies the token to be the reference point for the changelogs to retrieve.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to execute. The <code>updatedMessages</code> retrieves the
/// updated messages. The <code>deletedMessageIds</code> retrieves the unique ID of deleted messages.
/// The <code>hasMore</code> indicates whether there are more changelogs to be retrieved. The <code>token</code>
/// retrieves the token of the last changelog in the results. The <code>error</code> indicates whether there is
/// an error. If there is no error, the value is <code>nil</code>.
///
- (void)getMessageChangeLogsSinceToken:(NSString * _Nullable)token params:(SBDMessageChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, NSArray<NSNumber *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Retrieves the changelogs since a specified timestamp, in Unix milliseconds format, regarding the updated
/// messages or the unique IDs of deleted messages in the channel.
/// since:
/// 3.0.181
/// \param timestamp Specifies the timestamp to be the reference point for changelogs to retrieve, in Unix milliseconds format.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to execute. The <code>updatedMessages</code> retrieves the
/// updated messages. The <code>deletedMessageIds</code> retrieves the unique ID of deleted messages. The
/// <code>hasMore</code> indicates whether there are more changelogs to be retrieved. The <code>token</code> retrieves the
/// token of the last changelog in the results. The <code>error</code> indicates whether there is an error. If there is
/// no error, the value is <code>nil</code>.
///
- (void)getMessageChangeLogsSinceTimestamp:(int64_t)timestamp params:(SBDMessageChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, NSArray<NSNumber *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
- (void)getMessageChangeLogsWithToken:(NSString * _Nullable)token timestamp:(int64_t)timestamp params:(SBDMessageChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, NSArray<NSNumber *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
@end

enum SBDReportCategory : NSInteger;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Reports a user in a channel of inappropriate activities.
/// since:
/// 3.0.154
/// \param offendingUser The user who is being reported.
///
/// \param reportCategory The category in which the report is being submitted. Valid choices are
/// <code>suspicious</code>, <code>harassing</code>, <code>spam</code>, and <code>inappropriate</code>.
///
/// \param reportDescription An open ended description for why the report is being submitted.
///
/// \param completionHandler The handler block to execute.
///
- (void)reportUser:(SBDUser * _Nonnull)offendingUser reportCategory:(enum SBDReportCategory)reportCategory reportDescription:(NSString * _Nullable)reportDescription completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Reports current channel instance of inappropriate activities.
/// since:
/// 3.0.154
/// \param category The category in which the report is being submitted. Valid choices are
/// <code>suspicious</code>, <code>harassing</code>, <code>spam</code> and <code>inappropriate</code>.
///
/// \param reportDescription An open ended description for why the report is being submitted.
///
/// \param completionHandler The handler block to execute.
///
- (void)reportChannelWithCategory:(enum SBDReportCategory)category reportDescription:(NSString * _Nullable)reportDescription completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Reports a malicious message in the channel
/// since:
/// 3.0.154
/// \param message The message object which is being reported.
///
/// \param reportCategory The category in which the report is being submitted. Valid choices are
/// <code>suspicious</code>, <code>harassing</code>, <code>spam</code> and <code>inappropriate</code>.
///
/// \param reportDescription An open ended description for why the report is being submitted.
///
/// \param completionHandler The handler block to execute.
///
- (void)reportMessage:(SBDBaseMessage * _Nonnull)message reportCategory:(enum SBDReportCategory)reportCategory reportDescription:(NSString * _Nullable)reportDescription completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Adds operators to the channel.
/// since:
/// 3.0.189
/// \param userIds The user IDs to be operators.
///
/// \param completionHandler The handler block to be executed.
///
- (void)addOperatorsWithUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Removes operators from the channel.
/// since:
/// 3.0.189
/// \param userIds The user IDs to be removed from the operators.
///
/// \param completionHandler The handler block to be executed.
///
- (void)removeOperatorsWithUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Removes all operators from the channel.
/// since:
/// 3.0.189
/// \param completionHandler The handler block to be executed.
///
- (void)removeAllOperatorsWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates keys of meta array for the message.
/// since:
/// 3.0.116
/// \param message The message object. This method creates <code>keys</code> in it.
///
/// \param keys Keys of meta array.
///
/// \param completionHandler The handler block to execute. The <code>message</code> is a base message object that has the keys for its meta array.
///
- (void)createMessageMetaArrayKeysWithMessage:(SBDBaseMessage * _Nonnull)message keys:(NSArray<NSString *> * _Nonnull)keys completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes keys from meta array of the message.
/// since:
/// 3.0.116
/// \param message The message object. This method deletes keys of meta array of it.
///
/// \param keys Keys to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMessageMetaArrayKeysWithMessage:(SBDBaseMessage * _Nonnull)message keys:(NSArray<NSString *> * _Nonnull)keys completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Adds meta array to the message.
/// since:
/// 3.0.116
/// note:
/// use <code>addMessageMetaArrayValues(message:metaArrays:completionHandler:)</code> as possible.
/// \param message The message object. This method adds pairs of key and value to this message.
///
/// \param keyValues Pairs of key-value to be added.
///
/// \param completionHandler The handler block to execute.
///
- (void)addMessageMetaArrayValuesWithMessage:(SBDBaseMessage * _Nonnull)message keyValues:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)keyValues completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Adds the array of meta array into the message.
/// note:
/// The <code>metaArrays</code> are upserted into the message. If a key in the metaArrays is new, the key will
/// be inserted with the value. If a key in the metaArrays is already created, the value of the messageMetaArray
/// will be inserted so strings in the value MUST be new one.
/// since:
/// 3.0.148
/// \param message The message instance. The metaArrays will added into the message.
///
/// \param metaArrays An array of message meta array will be added into the message. the string of the value
/// in the metaArray MUST NOT exist with same key.
///
/// \param completionHandler The handler block to execute after adding message meta arrays. The
/// <code>message</code> of the handler is updated message. If failed to add message meta arrays, the <code>error</code>
/// of the handler is not nil(null).
///
- (void)addMessageMetaArrayValuesWithMessage:(SBDBaseMessage * _Nonnull)message metaArrays:(NSArray<SBDMessageMetaArray *> * _Nonnull)metaArrays completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Removes meta array from the message.
/// since:
/// 3.0.116
/// note:
/// use <code>removeMessageMetaArrayValues(message:metaArrays:completionHandler:)</code> as possible.
/// \param message The message object. This method removes pairs of key and value from this message. 
///
/// \param keyValues Pairs of key-value to be removed. 
///
/// \param completionHandler The handler block to execute. 
///
- (void)removeMessageMetaArrayValuesWithMessage:(SBDBaseMessage * _Nonnull)message keyValues:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)keyValues completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Removes the array of meta array from the message.
/// note:
/// The <code>metaArrays</code> are removed from the message. If a key in the metaArrays has an emtpy
/// array of the value, the key will be removed. If not, the value of the messageMetaArray will be removed from the message.
/// note:
/// The order of the meta array is guaranteed.
/// since:
/// 3.0.148
/// \param message The message instance. The metaArrays will removed from the message.
///
/// \param metaArrays An array of message meta array will be removed from the message. the string of
/// the value in the metaArray MUST exist with same key.
///
/// \param completionHandler The handler block to execute after removing message meta arrays.
/// The <code>message</code> of the handler is removed message. If failed to remove message meta arrays,
/// the <code>error</code> of the handler is not nil(null).
///
- (void)removeMessageMetaArrayValuesWithMessage:(SBDBaseMessage * _Nonnull)message metaArrays:(NSArray<SBDMessageMetaArray *> * _Nonnull)metaArrays completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
@end

@class SBDUserMessage;
@class SBDUserMessageCreateParams;
@class SBDUserMessageUpdateParams;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Sends a user message.
/// \param message The message text.
///
/// \param completionHandler The handler block to execute. <code>userMessage</code> is a user
/// message which is returned from the Sendbird server. The message has a message ID.
///
///
/// returns:
/// Returns a temporary user message being sent to the Sendbird server. The message
/// has a request ID instead of a message ID. The request status of the message is pending. If you try
/// to send a message with an invalid parameter, the returned message is a user message with no properties.
/// You can perform a validation of pending message by checking for the existence of the request ID.
- (SBDUserMessage * _Nonnull)sendUserMessage:(NSString * _Nonnull)message completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Sends a string message of params.
/// \param params The instance of <code>UserMessageCreateParams</code> that can has parameters
/// related with string message.
///
/// \param completionHandler The handler block to be executed after the message was sent.
/// This block has no return value and takes two argument, one is a file message was sent and other is an
/// error made when there is something wrong to message.
///
///
/// returns:
/// Returns a temporary user message being sent to the Sendbird server. The message has
/// a request ID instead of a message ID. The request status of the message is pending. If you try to send a
/// message with an invalid parameter, the returned message is a user message with no properties. You can
/// perform a validation of pending message by checking for the existence of the request ID..
- (SBDUserMessage * _Nonnull)sendUserMessageWithParams:(SBDUserMessageCreateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
- (SBDUserMessage * _Nonnull)sendUserMessageWithParams:(SBDUserMessageCreateParams * _Nonnull)params requestId:(NSString * _Nonnull)requestId completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Attempts to resend a failed user message received by the failure callback.
/// Only failed message MUST be passed, not a succeeded message or a pending message.
/// since:
/// 3.0.141
/// \param message A message to send. A failed message is passed to the callback when fails to send a message
///
/// \param completionHandler The handler block to be executed after the message is sent.
/// This block has no return value and takes two arguments. One is a user message. If the message is
/// successfully sent, the complete message instance is delivered. If the message fails to be sent, a failed
/// message based on the pending message is delivered. Another factor is errors. If the message fails
/// to be sent, a message error is dispatched.
///
///
/// returns:
/// Returns a temporary user message being sent to the Sendbird server.
- (SBDUserMessage * _Nonnull)resendUserMessageWithMessage:(SBDUserMessage * _Nonnull)message completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Copies a user message to the target channel.
/// \param message User message object.
///
/// \param targetChannel Target channel object.
///
/// \param completionHandler The handler block to execute. The <code>userMessage</code> is a user message
/// which is returned from the Sendbird server. The message has a message ID.
///
///
/// returns:
/// Returns the temporary user message with a request ID. It doesn’t have a message ID.
- (SBDUserMessage * _Nonnull)copyUserMessage:(SBDUserMessage * _Nonnull)message toTargetChannel:(SBDBaseChannel * _Nonnull)targetChannel completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Updates a user message. The text message, data, custom type from user message params can be updated.
/// since:
/// 3.0.110
/// \param messageId The message ID of the message to be updated.
///
/// \param params <code>UserMessageUpdateParams</code> with updating fields.
///
/// \param completionHandler The handler block to be executed after update. This block has no
/// return value and takes two argument. the one is updated message type of UserMessage. the other
/// is an error made when there is something wrong to process.
///
- (void)updateUserMessageWithMessageId:(int64_t)messageId params:(SBDUserMessageUpdateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Requests to translate the text message into the target languages.
/// You can get a user message with the <code>translations</code> property after the request, but the request does
/// not trigger an update event on the message and does not get the message by
/// <code>getMessageChangeLogs(token:params:completionHandler:)</code>.
/// A translation request can affect not only your message, but also other people’s messages.
/// since:
/// 3.0.148
/// \param message The string type of the message of the user message instance will be translated.
///
/// \param targetLanguages The target languages that the message will be translated into. e.g. “en”, “es”, “ch”
///
/// \param completionHandler The handler block to be executed after translation. This block has no
/// return value and takes two arguments. One is a user message. If succeeded to translate text of
/// the message, the message instance with translations is delivered. If failed to translate, nil is delivered.
/// Another factor is an error. If failed to request, an error is dispatched.
///
- (void)translateUserMessage:(SBDUserMessage * _Nonnull)message targetLanguages:(NSArray<NSString *> * _Nonnull)targetLanguages completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates the meta counters for the channel.
/// \param metaCounters The meta counters to be set
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the meta counters
/// which are set on Sendbird server.
///
- (void)createMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nonnull)metaCounters completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the meta counters with keys for the channel.
/// \param keys The keys to get meta counters.
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the
/// meta counters which are set on Sendbird server.
///
- (void)getMetaCountersWithKeys:(NSArray<NSString *> * _Nullable)keys completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Gets all meta counters for the channel.
/// \param completionHandler handler block to execute. <code>metaCounters</code> is the meta
/// counters which are returned from Sendbird server.
///
- (void)getAllMetaCountersWithCompletionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Updates the meta counters for the channel.
/// \param metaCounters The meta counters to be updated.
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the meta
/// counters which are updated on Sendbird server.
///
- (void)updateMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nonnull)metaCounters completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Increases the meta counters for the channel.
/// \param metaCounters The meta counters to be increased.
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the meta
/// counters which are increased on Sendbird server.
///
- (void)increaseMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nonnull)metaCounters completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Decreases the meta counters for the channel.
/// \param metaCounters The meta counters to be decreased.
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the meta
/// counters which are decreased on Sendbird server.
///
- (void)decreaseMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nonnull)metaCounters completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes the meta counters with key for the channel.
/// \param key The key to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMetaCountersWithKey:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes all meta counters for the channel.
/// \param completionHandler The handler block to execute.
///
- (void)deleteAllMetaCountersWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Bans a user for seconds. Let a user out and prevent to join again.
/// If the user is already banned, duration will be updated from the time that was initialized.
/// since:
/// 3.0.89
/// \param user The user to be banned.
///
/// \param seconds Seconds of ducation to be banned. Seconds should be larger than -1. If it is -1,
/// user is banned forever. If it is 0, duration is set 10 years by default.
///
/// \param description The reason why the user was banned.
///
/// \param completionHandler The handler block to be executed after the user is banned.
/// This block has no return value and takes an argument that is an error madewhen there is something wrong to ban.
///
- (void)banUser:(SBDUser * _Nonnull)user seconds:(NSInteger)seconds description:(NSString * _Nullable)description completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Bans a user for seconds. Let a user out and prevent to join again. If the user is already banned, duration
/// will be updated from the time that was initialized.
/// since:
/// 3.0.89
/// \param userId The user ID to be banned.
///
/// \param seconds Seconds of ducation to be banned. Seconds should be larger than -1. If it is -1,
/// user is banned forever. If it is 0, duration is set 10 years by default.
///
/// \param description The reason why the user was banned.
///
/// \param completionHandler The handler block to be executed after the user is banned. This
/// block has no return value and takes an argument that is an error made when there is something wrong to ban.
///
- (void)banUserWithUserId:(NSString * _Nonnull)userId seconds:(NSInteger)seconds description:(NSString * _Nullable)description completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Removes ban for a user.
/// since:
/// 3.0.89
/// \param user The user to be removed ban.
///
/// \param completionHandler The handler block to be executed after remove ban. This block has
/// no return value and takes an argument that is an error made when there is something wrong to remove ban.
///
- (void)unbanUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Removes ban for a user.
/// since:
/// 3.0.89
/// \param userId The user ID to be removed ban.
///
/// \param completionHandler The handler block to be executed after remove ban. This block has
/// no return value and takes an argument that is an error made when there is something wrong to remove ban.
///
- (void)unbanUserWithUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Mutes a user with additional options. Muted user cannot send any messages to the group channel.
/// since:
/// 3.0.118
/// \param user The user to be muted.
///
/// \param seconds The user cannot send any messages for this time.
///
/// \param description The description that explains the reason why the user is muted.
///
/// \param completionHandler The handler block to be executed after mute. This block has no return
/// value and takes an argument that is an error made when there is something wrong to mute the user.
///
- (void)muteUser:(SBDUser * _Nonnull)user seconds:(NSInteger)seconds description:(NSString * _Nullable)description completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Mutes a user with additional options. Muted user cannot send any messages to the group channel.
/// since:
/// 3.0.118
/// \param userId The user ID to be muted.
///
/// \param seconds The user cannot send any messages for this time.
///
/// \param description The description that explains the reason why the user is muted.
///
/// \param completionHandler The handler block to be executed after mute. This block has no return
/// value and takes an argument that is an error made when there is something wrong to mute the user.
///
- (void)muteUserWithUserId:(NSString * _Nonnull)userId seconds:(NSInteger)seconds description:(NSString * _Nullable)description completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Unmutes a user.
/// since:
/// 3.0.89
/// \param userId The user ID to be turned off mute.
///
/// \param completionHandler The handler block to be executed after turn off mute. This block has no
/// return value and takes an argument that is an error made when there is something wrong to turn off mute.
///
- (void)unmuteUserWithUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Unmutes a user.
/// since:
/// 3.0.89
/// \param user The user to be turned off mute.
///
/// \param completionHandler The handler block to be executed after turn off mute. This block has no
/// return value and takes an argument that is an error made when there is something wrong to turn off mute.
///
- (void)unmuteUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates the meta <em>data</em> for the channel.
/// \param metaData The meta <em>data</em> to be set.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the meta
/// <em>data</em> which are set on Sendbird server.
///
- (void)createMetaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the meta <em>data</em> for the channel.
/// \param keys The keys to get meta <em>data</em>.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the meta
/// <em>data</em> which are set on Sendbird server.
///
- (void)getMetaDataWithKeys:(NSArray<NSString *> * _Nonnull)keys completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Gets all meta <em>data</em> for the channel.
/// \param completionHandler The handler block to execute. <code>metaData</code> is the meta
/// <em>data</em> which are set on Sendbird server.
///
- (void)getAllMetaDataWithCompletionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Updates the meta <em>data</em> for the channel.
/// \param metaData The meta <em>data</em> to be updated.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the meta counters
/// which are updated on Sendbird server.
///
- (void)updateMetaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes meta <em>data</em> with key for the channel.
/// \param key The key to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMetaDataWithKey:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes all meta <em>data</em> for the channel.
/// \param completionHandler The handler block to execute.
///
- (void)deleteAllMetaDataWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Return cached channel meta data.
/// since:
/// 3.0.216
///
/// returns:
/// Dictionary meta data.
- (NSDictionary<NSString *, NSString *> * _Nonnull)getCachedMetaData SWIFT_WARN_UNUSED_RESULT;
- (void)removeAllCachedMetaData;
@end

@class SBDFileMessageCreateParams;
@class SBDFileMessage;
@class SBDFileMessageUpdateParams;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Sends a file message with file or file URL of params without progress.
/// If the params has a binary file, it will upload data to Sendbird storage. If not, the params has a file url, it will send a message with file url.
/// \param params Instance of <code>FileMessageCreateParams</code> that can has parameters related with file.
///
/// \param completionHandler handler block to be executed after the message was sent. This block has no return value
/// and takes two argument, one is a file message was sent and other is an error made when there is something wrong to message.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server. The message has a request ID instead of a message ID.
/// The request status of the message is pending. If you try to send a message with an invalid parameter, the returned message is a user
/// message with no properties. You can perform a validation of pending message by checking for the existence of the request ID.
- (SBDFileMessage * _Nullable)sendFileMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Sends a file message with file or file URL of params without progress.
/// If the params has a binary file, it will upload data to Sendbird storage. If not, the params has a file url, it will send a message with file url.
/// \param params Instance of <code>FileMessageCreateParams</code> that can has parameters related with file.
///
/// \param progressHandler progress handler
///
/// \param completionHandler handler block to be executed after the message was sent. This block has no return value and
/// takes two argument, one is a file message was sent and other is an error made when there is something wrong to message.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server. The message has a request ID instead of a message ID. The request status of the message is pending. If you try to send a message with an invalid parameter, the returned message is a user message with no properties. You can perform a validation of pending message by checking for the existence of the request ID.
- (SBDFileMessage * _Nullable)sendFileMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
- (SBDFileMessage * _Nullable)sendFileMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params requestId:(NSString * _Nullable)requestId progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (SBDFileMessage * _Nullable)sendFileMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params requestId:(NSString * _Nullable)requestId originalMessage:(SBDFileMessage * _Nullable)originalMessage progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Sends a file message with file or file URL of params with progress.
/// If the params has a binary file, it will upload data to Sendbird storage. If not, the params has a file url, it will send a message with file url.
/// since:
/// 3.0.116
/// \param params The instance of <code>FileMessageCreateParams</code> that can has parameters related with file.
///
/// \param progressHandler The handler block to be used to monitor progression. <code>requestId</code> is a unique identifier
/// for the message send request.  <code>bytesSent</code> is the number of bytes sent since this method was called. <code>totalBytesSent</code>
/// is the total number of bytes sent so far. <code>totalBytesExpectedToSend</code> is the expected length of the body data.
/// These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param sentMessageHandler The handler block to be executed after each message was sent. This block has no return value
/// and takes two argument, one is a file message was sent and other is an error made when there is something wrong to message.
///
/// \param completionHandler The handler block to be executed after every message was sent. This block has no return value and
/// takes an error. If the sending message can’t start at all because of the connection issue, the error isn’t nil.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server. The message has a request ID instead of a
/// message ID. The request status of the message is pending. If you try to send a message with an invalid parameter, the returned
/// message is a user message with no properties. You can perform a validation of pending message by checking for the existence
/// of the request ID.
- (NSArray<SBDFileMessage *> * _Nonnull)sendFileMessagesWithParams:(NSArray<SBDFileMessageCreateParams *> * _Nonnull)params progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler sentMessageHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))sentMessageHandler completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Updates a file message. The data, custom type from file message params can be updated.
/// since:
/// 3.0.110
/// \param messageId The message ID of the message to be updated.
///
/// \param FileMessageCreateParams The file message params that has updating fields.
///
/// \param completionHandler The handler block to be executed after update.
///
- (void)updateFileMessageWithMessageId:(int64_t)messageId params:(SBDFileMessageUpdateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Attempts to resend a failed file message received by the failure callback.
/// Only failed message MUST be passed, not a succeeded message or a pending message. If the failed
/// message has a file URL, it means the failed message was created after failure of sending a file message
/// command. So the method retries to send a file message command. If the failed message does not have
/// a file URL, it means the failed message was created from failure of uploading a binary data. So the method
/// retries to upload a binary data frist.
/// since:
/// 3.0.147
/// \param message A message to send. A failed message is passed to the callback when fails to send a message
///
/// \param binaryData Data to resend. If the failed message has a file URL, the method will not send binary data.
/// If the failed message does not have a file URL, the method will send binary data first and send a file message
/// command with file url.
///
/// \param completionHandler Handler block to be executed after the message is sent. This block has no
/// return value and takes two arguments. One is a file message. If the message is successfully sent, the complete
/// message instance is delivered. If the message fails to be sent, a failed message based on the pending message
/// is delivered except invalid parameter error. If failed because of invalid parameter, message is nil. Another factor
/// is errors. If the message fails to be sent, a message error is dispatched.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server.
- (SBDFileMessage * _Nullable)resendFileMessageWithMessage:(SBDFileMessage * _Nonnull)message binaryData:(NSData * _Nullable)binaryData completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Attempts to resend a failed file message received by the failure callback.
/// Only failed message MUST be passed, not a succeeded message or a pending message. If the failed
/// message has a file URL, it means the failed message was created after failure of sending a file message
/// command. So the method retries to send a file message command. If the failed message does not have
/// a file URL, it means the failed message was created from failure of uploading a binary data. So the method
/// retries to upload a binary data frist.
/// since:
/// 3.0.147
/// \param message A message to send. A failed message is passed to the callback when fails to send a message
///
/// \param binaryData Data to resend. If the failed message has a file URL, the method will not send binary data.
/// If the failed message does not have a file URL, the method will send binary data first and send a file message
/// command with file url.
///
/// \param progressHandler The handler block to be used to monitor progression. <code>requestId</code> is a unique identifier
/// for the message send request. <code>bytesSent</code> is the number of bytes sent since this method was called.
/// <code>totalBytesSent</code> is the total number of bytes sent so far. <code>totalBytesExpectedToSend</code> is the expected
/// length of the body data. These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to be executed after the message is sent. This block has no return
/// value and takes two arguments. One is a file message. If the message is successfully sent, the complete message
/// instance is delivered. If the message fails to be sent, a failed message based on the pending message is delivered
/// except invalid parameter error. If failed because of invalid parameter, message is nil. Another factor is errors. If the
/// message fails to be sent, a message error is dispatched.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server.
- (SBDFileMessage * _Nullable)resendFileMessageWithMessage:(SBDFileMessage * _Nonnull)message binaryData:(NSData * _Nullable)binaryData progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Copies a file message to the target channel.
/// \param message File message object.
///
/// \param targetChannel Target channel object.
///
/// \param completionHandler The handler block to execute. The <code>fileMessage</code> is a user message
/// which is returned from the Sendbird server. The message has a message ID.
///
///
/// returns:
/// Returns the temporary file message with a request ID. It doesn’t have a message ID.
- (SBDFileMessage * _Nullable)copyFileMessage:(SBDFileMessage * _Nonnull)message toTargetChannel:(SBDBaseChannel * _Nonnull)targetChannel completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Cancels the file message uploading.
/// \param requestId The request ID of the file message that is been uploading.
///
/// \param completionHandler The handler block to execute. If the <code>result</code> is <code>true</code>, then the uploading
/// task of the <code>requestId</code> has been cancelled.
///
+ (void)cancelUploadingFileMessageWithRequestId:(NSString * _Nonnull)requestId completionHandler:(void (^ _Nullable)(BOOL, SBError * _Nullable))completionHandler;
@end

@class SBDMutedUserListQuery;
@class SBDPreviousMessageListQuery;
@class SBDOperatorListQuery;
@class SBDPollListQuery;
@class SBDPollVoterListQuery;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates a query instance for banned user list of the channel.
/// since:
/// 3.0.89
///
/// returns:
/// The instance for the banned user list. Query only banned user list.
- (SBDBannedUserListQuery * _Nullable)createBannedUserListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query instance for banned user list of the channel.
/// since:
/// 4.0.0
///
/// returns:
/// The instance for the banned user list. Query only banned user list.
+ (SBDBannedUserListQuery * _Nonnull)createBannedUserListQueryWithChannelType:(enum SBDChannelType)channelType channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates a query instance for getting muted user list of the channel instance.
///
/// returns:
/// UserListQuery instance for the muted user list.
- (SBDMutedUserListQuery * _Nullable)createMutedUserListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query instance for getting muted user list of the channel instance.
/// since:
/// 4.0.0
///
/// returns:
/// UserListQuery instance for the muted user list.
+ (SBDMutedUserListQuery * _Nonnull)createMutedUserListQueryWithChannelType:(enum SBDChannelType)channelType channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PreviousMessageListQuery</code> instance for getting the previous messages list of the channel.
///
/// returns:
/// Returns the message list of the channel.
- (SBDPreviousMessageListQuery * _Nullable)createPreviousMessageListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PreviousMessageListQuery</code> instance for getting the previous messages list of the channel.
/// since:
/// 4.0.0
/// \param channelType channel type
///
/// \param channelURL channel url
///
///
/// returns:
/// Returns the message list of the channel.
+ (SBDPreviousMessageListQuery * _Nonnull)createPreviousMessageListQueryWithChannelType:(enum SBDChannelType)channelType channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>OperatorListQuery</code> instance for getting operators in the channel.
/// since:
/// 3.0.94
///
/// returns:
/// The operator list in the channel.
- (SBDOperatorListQuery * _Nullable)createOperatorListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>OperatorListQuery</code> instance for getting operators in the channel.
/// since:
/// 4.0.0
///
/// returns:
/// The operator list in the channel.
+ (SBDOperatorListQuery * _Nonnull)createOperatorListQueryWithChannelType:(enum SBDChannelType)channelType channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PollListQuery</code> instance for getting poll list in this channel.
/// since:
/// 3.0.232
/// \param channelType channel type.
///
/// \param channelURL channel url.
///
///
/// returns:
/// poll list query object.
- (SBDPollListQuery * _Nullable)createPollListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PollListQuery</code> instance for getting poll list in this channel.
/// since:
/// 4.0.0
/// \param channelURL channel url that you want to query poll list.
///
///
/// returns:
/// poll list query object.
+ (SBDPollListQuery * _Nonnull)createPollListQueryWithChannelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PollVoterListQuery</code> instance for getting user list on given poll option
/// since:
/// 3.0.232
/// \param pollId poll ID.
///
/// \param optionId option ID.
///
///
/// returns:
/// poll voter list query object.
- (SBDPollVoterListQuery * _Nullable)createPollVoterListQueryWithPollId:(int64_t)pollId optionId:(int64_t)optionId SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PollVoterListQuery</code> instance for getting user list on given poll option
/// since:
/// 4.0.0
/// \param pollId poll ID.
///
/// \param optionId option ID.
///
/// \param channelURL channel url.
///
///
/// returns:
/// poll voter list query object.
+ (SBDPollVoterListQuery * _Nonnull)createPollVoterListQueryWithPollId:(int64_t)pollId optionId:(int64_t)optionId channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDThreadInfoUpdateEvent;
@class SBDPollUpdateEvent;
@class SBDPollVoteEvent;

/// An object that adopts the <code>BaseChannelDelegate</code> protocol is responsible for receiving the events
/// in the channel. Delegate methods in <code>BaseChannelDelegate</code> are common for the <code>BaseChannel</code>.
/// Exclusive delegate methods for <code>OpenChannel</code> and <code>GroupChannel</code> can be found in
/// <code>OpenChannelDelegate</code> and <code>GroupChannelDelegate</code>. You must use <code>OpenChannelDelegate</code>
/// and <code>GroupChannelDelegate</code> instead of using <code>BaseChannelDelegate</code> by using <code>add(_:identifier:)</code> in <code>SendbirdChat</code>.
/// warning:
/// If the object that adopts the <code>BaseChannelDelegate</code> protocol is invalid, the delegate has to
/// be removed by the identifier via <code>removeChannelDelegate(forIdentifier:)</code> in <code>SendbirdChat</code>.
/// This protocol deals with the below events.
/// <ul>
///   <li>
///     Receives a message in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a message is updated in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when the property of the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> was changed.
///   </li>
///   <li>
///     Receives an event when the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> was deleted.
///   </li>
///   <li>
///     Receives an event when a message in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> was deleted.
///   </li>
///   <li>
///     Receives an event when meta data in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> was changed.
///   </li>
///   <li>
///     Receives an event when meta counters in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> were changed.
///   </li>
///   <li>
///     Receives an event when a group channel was hidden.
///   </li>
///   <li>
///     Receives an event when a user was muted or unmuted in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a user was banned or unbanned in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when operators are updated.
///   </li>
///   <li>
///     Receives an event when a reaction of message in a channel was updated.
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("BaseChannelDelegate")
@protocol SBDBaseChannelDelegate <NSObject>
@optional
/// A callback when a message is received.
/// \param channel The channel where the message is received.
///
/// \param message The received message.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel didReceiveMessage:(SBDBaseMessage * _Nonnull)message;
/// A callback when a message is updated.
/// \param channel The channel where the message is updated.
///
/// \param message The updated message.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel didUpdateMessage:(SBDBaseMessage * _Nonnull)message;
/// A delegate is called when someone mentioned the user.
/// \param channel The channel mention was occured in.
///
/// \param message The message mention was occured about.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel didReceiveMention:(SBDBaseMessage * _Nonnull)message;
/// A callback when a user was muted in the channel.
/// \param channel The channel.
///
/// \param user The user who was muted.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel userWasMuted:(SBDUser * _Nonnull)user;
/// A callback when a user was unmuted in the channel.
/// \param channel The channel.
///
/// \param user The user who was unmuted.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel userWasUnmuted:(SBDUser * _Nonnull)user;
/// A callback when a user was banned in the channel.
/// \param channel The channel.
///
/// \param user The user who was banned.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel userWasBanned:(SBDUser * _Nonnull)user;
/// A callback when a user was unbanned in the channel.
/// \param channel The channel.
///
/// \param user The user who was unbanned.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel userWasUnbanned:(SBDUser * _Nonnull)user;
/// A callback when an channel was frozen.
/// \param channel The channel.
///
- (void)channelWasFrozen:(SBDBaseChannel * _Nonnull)channel;
/// A callback when an channel was unfrozen.
/// \param channel The channel
///
- (void)channelWasUnfrozen:(SBDBaseChannel * _Nonnull)channel;
/// A callback when an open channel was changed.
/// \param channel The open channel.
///
- (void)channelWasChanged:(SBDBaseChannel * _Nonnull)channel;
/// A callback when an open channel was deleted.
/// \param channelURL The channel url.
///
/// \param channelType The Type of channel, types of open channel or group channel.
///
- (void)channelWasDeleted:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType;
/// A callback when a message was removed in the channel.
/// \param channel The base channel.
///
/// \param messageId The message ID which was removed.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel messageWasDeleted:(int64_t)messageId;
/// A callback when meta data was created in the channel.
/// \param channel The channel that the meta data was created.
///
/// \param createdMetaData The created meta data.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel createdMetaData:(NSDictionary<NSString *, NSString *> * _Nullable)createdMetaData;
/// A callback when meta data was updated in the channel.
/// \param channel The channel that the meta data was updated.
///
/// \param updatedMetaData The updated meta data.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel updatedMetaData:(NSDictionary<NSString *, NSString *> * _Nullable)updatedMetaData;
/// A callback when meta data was deleted in the channel.
/// \param channel The channel that the meta data was deleted.
///
/// \param deletedMetaDataKeys The keys of the deleted meta data.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel deletedMetaDataKeys:(NSArray<NSString *> * _Nullable)deletedMetaDataKeys;
/// A callback when meta counters were created in the channel.
/// \param channel The channel that the meta counters were created.
///
/// \param createdMetaCounters The created meta counters.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel createdMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nullable)createdMetaCounters;
/// A callback when meta counters were updated in the channel.
/// \param channel The channel that the meta counters were updated.
///
/// \param updatedMetaCounters The updated meta counters.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel updatedMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nullable)updatedMetaCounters;
/// A callback when meta counters were deleted in the channel.
/// \param channel The channel that the meta counters were deleted.
///
/// \param deletedMetaCountersKeys The keys of the deleted meta counters.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel deletedMetaCountersKeys:(NSArray<NSString *> * _Nullable)deletedMetaCountersKeys;
/// A callback when a reaction was updated.
/// \param channel The channel that the reaction was updated.
///
/// \param reactionEvent The updated reaction event.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel updatedReaction:(SBDReactionEvent * _Nonnull)reactionEvent;
/// A callback when operators were updated in the channel.
/// since:
/// 3.0.174
/// \param channel The channel that the operators was updated.
///
- (void)channelDidUpdateOperators:(SBDBaseChannel * _Nonnull)channel;
/// Invoked when the thread information is updated.
/// since:
/// 3.0.181
/// \param channel The channel that has the message thread.
///
/// \param threadInfoUpdateEvent <code>ThreadInfoUpdateEvent</code> object that has the latest information about the thread.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel didUpdateThreadInfo:(SBDThreadInfoUpdateEvent * _Nonnull)threadInfoUpdateEvent;
/// A callback when the poll has been updated.
/// since:
/// 3.0.232
/// \param event event object contains updated poll information.
///
- (void)didUpdatePoll:(SBDPollUpdateEvent * _Nonnull)event;
/// A callback when vote has been occurred.
/// since:
/// 3.0.232
/// \param event event object that contains voting information.
///
- (void)didVotePoll:(SBDPollVoteEvent * _Nonnull)event;
@end


/// An base object for collection
SWIFT_CLASS_NAMED("BaseCollection")
@interface SBDBaseCollection : NSObject
/// Identifier for the connection delegates of a collection object.
/// <ul>
///   <li>
///     Since 3.0.227
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull connectionDelegateId;
/// Identifier for the internal channel delegates of a collection object.
/// <ul>
///   <li>
///     Since 3.0.227
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull channelDelegateId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBDGroupChannel;

/// An object that adopts the <code>GroupChannelDelegate</code> protocol is responsible for receiving the events in the channel.
/// This protocol deals with the below events.
/// <ul>
///   <li>
///     Receives an event when a member read a message in the <a href="../Classes/GroupChannel.html"><code>GroupChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a member typed something in the <a href="../Classes/GroupChannel.html"><code>GroupChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a new member joined the <a href="../Classes/GroupChannel.html"><code>GroupChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a member left from the <a href="../Classes/GroupChannel.html"><code>GroupChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a group channel was hidden.
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("GroupChannelDelegate")
@protocol SBDGroupChannelDelegate <SBDBaseChannelDelegate>
@optional
/// A callback when read receipts updated.
/// \param channel The group channel where the read status updated.
///
- (void)channelDidUpdateReadStatus:(SBDGroupChannel * _Nonnull)channel;
/// A callback when delivery receipts updated.
/// since:
/// 3.0.162
/// \param channel The group channel where the delivery status updated.
///
- (void)channelDidUpdateDeliveryStatus:(SBDGroupChannel * _Nonnull)channel;
/// A callback when user sends typing status.
/// \param channel The group channel where the typing status updated.
///
- (void)channelDidUpdateTypingStatus:(SBDGroupChannel * _Nonnull)channel;
/// A callback when member count has been changed for broadcast channel
/// since:
/// 3.0.219
/// \param channels The group channel that member count has been updated
///
- (void)channelDidChangeMemberCount:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
/// A callback when users are invited by inviter.
/// \param channel The group channel where the invitation is occured.
///
/// \param invitees Invitees.
///
/// \param inviter Inviter.
///
- (void)channel:(SBDGroupChannel * _Nonnull)channel didReceiveInvitation:(NSArray<SBDUser *> * _Nullable)invitees inviter:(SBDUser * _Nullable)inviter;
/// A callback when user declined the invitation.
/// \param channel The group channel where the invitation is occured.
///
/// \param inviter Invitee.
///
/// \param invitee Inviter.
///
- (void)channel:(SBDGroupChannel * _Nonnull)channel didDeclineInvitation:(SBDUser * _Nonnull)invitee inviter:(SBDUser * _Nullable)inviter;
/// A callback when new member joined to the group channel.
/// \param channel The group channel.
///
/// \param user The new user joined to the channel.
///
- (void)channel:(SBDGroupChannel * _Nonnull)channel userDidJoin:(SBDUser * _Nonnull)user;
/// A callback when current member left from the group channel.
/// \param channel The group channel.
///
/// \param user The member left from the channel.
///
- (void)channel:(SBDGroupChannel * _Nonnull)channel userDidLeave:(SBDUser * _Nonnull)user;
/// A callback when the channel was hidden on the other device or by Platform API.
/// \param channel The channel that was hidden on the other device or by Platform API.
///
- (void)channelWasHidden:(SBDGroupChannel * _Nonnull)channel;
@end

enum SBDCollectionEventSource : NSInteger;

/// The method that is invoked when an event occurs in the channel.
/// since:
/// 3.1.0
SWIFT_PROTOCOL("_TtP12SendbirdChat20ChannelEventDelegate_")
@protocol ChannelEventDelegate <SBDGroupChannelDelegate>
@optional
/// Invoked when the message has been sent on the current device.
/// \param channel The channel that has the message. 
///
/// \param newMessage Message object. 
///
/// \param deletedMessage Message object to be deleted. 
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel new:(SBDBaseMessage * _Nullable)new_ deleted:(SBDBaseMessage * _Nullable)deleted;
/// Invoked when sending message or resending message is failed.
/// \param channel The channel that has the failed message. 
///
/// \param message Failed message object. 
///
/// \param source The reason why the sending or resending message is failed. 
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel failed:(SBDBaseMessage * _Nonnull)failed source:(enum SBDCollectionEventSource)source;
/// Invoked when sending message is canceled.
/// \param channel The channel that has the message. 
///
/// \param message Canceled message object. 
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel canceled:(SBDBaseMessage * _Nonnull)canceled;
/// Invoked when the pending message is created.
/// \param channel The channel that has the message. 
///
/// \param message Pending message object. 
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel pending:(SBDBaseMessage * _Nonnull)pending;
@end


/// Represents a delegate to receive connection relates events
SWIFT_PROTOCOL_NAMED("ConnectionDelegate")
@protocol SBDConnectionDelegate
@optional
/// Invoked when reconnection starts.
- (void)didStartReconnection;
/// Invoked when reconnection is succeeded.
- (void)didSucceedReconnection;
/// Invoked when reconnection is failed.
- (void)didFailReconnection;
/// Invoked when connected.
- (void)didConnectWithUserId:(NSString * _Nonnull)userId;
/// Invoked when disconnected.
- (void)didDisconnectWithUserId:(NSString * _Nonnull)userId;
@end


@interface SBDBaseCollection (SWIFT_EXTENSION(SendbirdChat)) <ChannelEventDelegate, SBDConnectionDelegate>
@end



@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BaseMessage</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
- (NSComparisonResult (^ _Nonnull)(id _Nullable, id _Nullable))comparator SWIFT_WARN_UNUSED_RESULT;
- (NSComparisonResult)orderBetweenObjectWithObj1:(id _Nullable)obj1 obj2:(id _Nullable)obj2 SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>BaseMessage</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// since:
/// 3.0.203
/// \param data <code>Data</code> instance
///
/// \param desiredState The sending status that a message object will have. 
///
///
/// returns:
/// <code>BaseMessage</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data desiredState:(enum SBDMessageSendingStatus)desiredState SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
- (BOOL)contains:(SBDUser * _Nullable)mentionedUser SWIFT_WARN_UNUSED_RESULT;
- (BOOL)wasMentionedBy:(SBDUser * _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasUpdatedLaterThanWithTimestamp:(int64_t)timestamp SWIFT_WARN_UNUSED_RESULT;
- (void)addReaction:(SBDReaction * _Nonnull)reaction;
- (void)removeReaction:(SBDReaction * _Nonnull)reaction;
@end

@class SBDMessageRetrievalParams;
@class SBDThreadedMessageListParams;

@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
/// Checks the channel type is open channel or not.
///
/// returns:
/// <code>true</code> when this message is in open channel.
- (BOOL)isOpenChannel SWIFT_WARN_UNUSED_RESULT;
/// Checks the channel type is group channel or not.
///
/// returns:
/// <code>true</code>, when this message is in group channel.
- (BOOL)isGroupChannel SWIFT_WARN_UNUSED_RESULT;
/// Checks message can resend.
/// The message can only resend if the problem is due to network related error.
/// since:
/// 3.0.161
///
/// returns:
/// <code>true</code> if this message can resend.
- (BOOL)isResendable SWIFT_WARN_UNUSED_RESULT;
/// Represents that the SDK is able to resend this message object automatically.
/// When it is <code>true</code> and this message object is put into the auto resend queue by the <code>registerAutoResend(message:)</code>
/// method of the <code>MessageCollection</code>, the message object will be sent when the connection is established.
/// When it is <code>false</code>, the SDK won’t resend the message automatically.
/// since:
/// 3.1.0
///
/// returns:
/// <code>true</code> if the SDK can resend this message object automatically.
@property (nonatomic, readonly) BOOL isAutoResendable;
/// Returns an array of meta arrays for keys.
/// since:
/// 3.0.148
/// \param keys Keys of the meta array.
///
///
/// returns:
/// An Array of meta array with keys.
- (NSArray<SBDMessageMetaArray *> * _Nonnull)metaArraysWithKeys:(NSArray<NSString *> * _Nonnull)keys SWIFT_WARN_UNUSED_RESULT;
/// Applies reaction event to this message
/// \param reactionEvent <code>ReactionEvent</code> instance
///
///
/// returns:
/// <code>true</code> if the given event was applied successfully
- (BOOL)applyReactionEvent:(SBDReactionEvent * _Nonnull)reactionEvent;
/// Applies the update of the thread information to the message object.
/// since:
/// 3.0.181
/// \param threadInfoUpdateEvent The event object that is applied to.
///
///
/// returns:
/// <code>true</code> if <code>threadInfoUpdateEvent</code>was applied successfully otherwise <code>false</code>
- (BOOL)applyThreadInfoUpdateEvent:(SBDThreadInfoUpdateEvent * _Nonnull)threadInfoUpdateEvent;
/// Retrieves a message with a specified message ID.
/// since:
/// 3.0.181
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to be executed. The <code>message</code>
/// retrieves the message with the matching message ID. A value of <code>nil</code> indicates that there is no
/// message with the specified message ID. The <code>error</code> Indicates whether there is an error. If there
/// is no error, the value is <code>nil</code>.
///
+ (void)getMessageWithParams:(SBDMessageRetrievalParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Retrieves the threaded replies of the current message depending on the timestamp. If the current message doesn’t have replies, the result is <code>nil</code>.
/// since:
/// 3.0.181
/// \param timestamp Specifies the timestamp to be the reference point of the retrieval, in Unix milliseconds format.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to be executed. The <code>parentMessage</code> retrieves
/// the parent message of the thread. The <code>threadedReplies</code> retrieves the threaded replies in the thread.
/// The <code>error</code> indicates whether there is an error. If there is no error, the value is <code>nil</code>.
///
- (void)getThreadedMessagesWithTimestamp:(int64_t)timestamp params:(SBDThreadedMessageListParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
@end

enum SBDPushNotificationDeliveryOption : NSInteger;

/// Represents the base class which has parameters to create a channel.
/// The <code>UserMessageCreateParams</code>, the <code>FileMessageCreateParams</code> are derived from this class.
SWIFT_CLASS_NAMED("BaseMessageCreateParams")
@interface SBDBaseMessageCreateParams : NSObject
/// Message data. The default value is nil.
/// since:
/// 3.0.90
@property (nonatomic, copy) NSString * _Nullable data;
/// Customize message’s type to filter. The default value is nil.
/// since:
/// 3.0.90
@property (nonatomic, copy) NSString * _Nullable customType;
/// The push notification delivery option that determines how to deliver the push notification when sending
/// a user or a file message. The default value is <code>.default</code>.
@property (nonatomic) enum SBDPushNotificationDeliveryOption pushNotificationDeliveryOption;
/// Meta array with keys and values
/// since:
/// 3.0.179
@property (nonatomic, copy) NSArray<SBDMessageMetaArray *> * _Nullable metaArrays;
/// Mention type
/// since:
/// 3.0.103
@property (nonatomic) enum SBDMentionType mentionType;
@property (nonatomic) BOOL didSetMentionType;
/// Mention to specific users.
/// If sends a message with this field, the message will be arrived to mentioned users.
/// since:
/// 3.0.90
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mentionedUserIds;
@property (nonatomic) BOOL didSetMentionedUsers;
/// Sets the <code>mentionedUserIds</code> by this method either.
/// since:
/// 3.0.90
/// \param mentionedUsers The list of users will be receive mention.
///
- (void)setMentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers;
/// Adds user IDs for mention
/// \param userIds list of user IDs
///
- (void)addMentionedUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// The unique ID of a parent message. The default value is <code>0</code>.
/// since:
/// 3.0.181
@property (nonatomic) int64_t parentMessageId;
@property (nonatomic) BOOL didSetParentMessageId;
/// Determines if a threaded message is also replied to the channel. Default is <code>false</code>
/// since:
/// 3.0.236
@property (nonatomic) BOOL isReplyToChannel;
/// Push notification options for the Apple critical alert. The default value is <code>nil</code>.
/// since:
/// 3.0.221
@property (nonatomic, strong) SBDAppleCriticalAlertOptions * _Nullable appleCriticalAlertOptions;
@property (nonatomic, copy) NSString * _Nullable channelURL;
@property (nonatomic, copy) NSString * _Nullable requestId;
/// Custom payload
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull payload;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BaseMessageCreateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents the base class which has parameters to update a channel.
/// The <code>UserMessageUpdateParams</code>, the <code>FileMessageUpdateParams</code> are derived from this class.
SWIFT_CLASS_NAMED("BaseMessageUpdateParams")
@interface SBDBaseMessageUpdateParams : NSObject
/// Message data. The default value is nil.
@property (nonatomic, copy) NSString * _Nullable data;
/// Customize message’s type to filter. The default value is nil.
@property (nonatomic, copy) NSString * _Nullable customType;
/// Mention type
@property (nonatomic) enum SBDMentionType mentionType;
/// Mention to specific users.
/// If sends a message with this field, the message will be arrived to mentioned users.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mentionedUserIds;
/// Sets the <code>mentionedUserIds</code> by this method either.
/// \param mentionedUsers The list of users will be receive mention.
///
- (void)setMentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers;
/// Adds user IDs for mention
/// \param userIds list of user IDs
///
- (void)addMentionedUserIds:(NSArray<NSString *> * _Nonnull)users;
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BaseMessageUpdateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12SendbirdChat10BinaryData")
@interface BinaryData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>BlockedUserListQuery</code> class is a query class for getting the list of blocked users
/// by the current user.
/// This instance is created by <code>createBlockedUserListQuery()</code> of <code>SendbirdChat</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("BlockedUserListQuery")
@interface SBDBlockedUserListQuery : NSObject
/// Sets the user IDs filter.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull userIdsFilter;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use SendbirdChat's `createBlockedUserListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BlockedUserListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDBlockedUserListQuery * _Nonnull)setupFor:(SBDBlockedUserListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// Operation object that is used to sequentialize asynchronous tasks in a blocking manner.
/// No two tasks are run at the same time, and the order of tasks inserted to a <code>OperationQueue</code> is guaranteed.
SWIFT_CLASS("_TtC12SendbirdChat17BlockingOperation")
@interface BlockingOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Channel context
/// since:
/// 3.1.0
SWIFT_CLASS_NAMED("ChannelContext")
@interface SBDChannelContext : NSObject
/// Event source
@property (nonatomic) enum SBDCollectionEventSource source;
/// Initializes with the channel source.
/// <ul>
///   <li>
///     Returns ChannelContext object.
///   </li>
/// </ul>
/// \param source Channel source.
///
- (nonnull instancetype)initWithSource:(enum SBDCollectionEventSource)source OBJC_DESIGNATED_INITIALIZER;
/// Checks whether the context is from an event or not.
///
/// returns:
/// <code>true</code> if the context is from an event.
@property (nonatomic, readonly) BOOL fromEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The enum type to filter my group channels with the hidden state.
/// since:
/// 3.0.122
typedef SWIFT_ENUM_NAMED(NSInteger, SBDChannelHiddenStateFilter, "ChannelHiddenStateFilter", open) {
/// Shows the unhidden channels only.
  SBDChannelHiddenStateFilterUnhiddenOnly = 0,
/// Shows the hidden channels only.
  SBDChannelHiddenStateFilterHiddenOnly = 1,
/// Shows the channels will be unhidden automatically when there is a new message in the channel.
  SBDChannelHiddenStateFilterHiddenAllowAutoUnhide = 2,
/// Shows the channels will not be unhidden automatically.
  SBDChannelHiddenStateFilterHiddenPreventAutoUnhide = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SBDChannelMetaCountersUpdateMode, "ChannelMetaCountersUpdateMode", open) {
  SBDChannelMetaCountersUpdateModeSet = 0,
  SBDChannelMetaCountersUpdateModeIncrease = 1,
  SBDChannelMetaCountersUpdateModeDecrease = 2,
};


/// An object to handle the cached channels.
/// <ul>
///   <li>
///     Since 3.0.227
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12SendbirdChat17ChannelRepository")
@interface ChannelRepository : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Channel types.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDChannelType, "ChannelType", open) {
/// Open channel.
  SBDChannelTypeOpen = 0,
/// Group channel.
  SBDChannelTypeGroup = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SBChatError, "ChatError", open) {
  SBChatErrorInvalidParameterValueString = 400100,
  SBChatErrorInvalidParameterValueNumber = 400101,
  SBChatErrorInvalidParameterValueList = 400102,
  SBChatErrorInvalidParameterValueJson = 400103,
  SBChatErrorInvalidParameterValueBoolean = 400104,
  SBChatErrorInvalidParameterValueRequired = 400105,
  SBChatErrorInvalidParameterValuePositive = 400106,
  SBChatErrorInvalidParameterValueNegative = 400107,
  SBChatErrorNonAuthorized = 400108,
  SBChatErrorTokenExpired = 400109,
  SBChatErrorInvalidChannelURL = 400110,
  SBChatErrorInvalidParameterValue = 400111,
  SBChatErrorUnusableCharacterIncluded = 400151,
  SBChatErrorNotFoundInDatabase = 400201,
  SBChatErrorDuplicatedData = 400202,
  SBChatErrorReachedMaxCount = 400203,
  SBChatErrorUserDeactivated = 400300,
  SBChatErrorUserNotExist = 400301,
  SBChatErrorAccessTokenNotValid = 400302,
  SBChatErrorAuthUnknownError = 400303,
  SBChatErrorAppIdNotValid = 400304,
  SBChatErrorAuthUserIdTooLong = 400305,
  SBChatErrorAuthPlanQuotaExceeded = 400306,
  SBChatErrorSessionKeyExpired = 400309,
  SBChatErrorSessionTokenRevoked = 400310,
  SBChatErrorInvalidApiToken = 400401,
  SBChatErrorParameterMissing = 400402,
  SBChatErrorInvalidJsonBody = 400403,
  SBChatErrorConflict = 409000,
  SBChatErrorInternalServerError = 500901,
  SBChatErrorRateLimitExceeded = 500910,
  SBChatErrorUnknownError = 800000,
  SBChatErrorInvalidInitialization = 800100,
  SBChatErrorConnectionRequired = 800101,
  SBChatErrorConnectionCanceled = 800102,
  SBChatErrorInvalidParameter = 800110,
  SBChatErrorWrongChannelType = 800150,
  SBChatErrorMarkAsReadRateLimitExceeded = 800160,
  SBChatErrorQueryInProgress = 800170,
  SBChatErrorAckTimeout = 800180,
  SBChatErrorLoginTimeout = 800190,
  SBChatErrorWebSocketConnectionClosed = 800200,
  SBChatErrorWebSocketConnectionFailed = 800210,
  SBChatErrorTimerWasExpired = 800301,
  SBChatErrorTimerWasAlreadyDone = 800302,
  SBChatErrorPendingError = 800400,
  SBChatErrorPassedInvalidAccessToken = 800500,
  SBChatErrorSessionKeyRefreshSucceeded = 800501,
  SBChatErrorSessionKeyRefreshFailed = 800502,
  SBChatErrorCollectionDisposed = 800600,
  SBChatErrorLocalDatabaseError = 800700,
  SBChatErrorNetworkError = 800120,
  SBChatErrorNetworkRoutingError = 800121,
  SBChatErrorMalformedData = 800130,
  SBChatErrorMalformedErrorData = 800140,
  SBChatErrorRequestFailed = 800220,
  SBChatErrorFileUploadCancelFailed = 800230,
  SBChatErrorFileUploadCanceled = 800240,
  SBChatErrorFileUploadTimeout = 800250,
  SBChatErrorFileSizeLimitExceeded = 800260,
  SBChatErrorSocketLoginRequired = 900010,
  SBChatErrorSocketUserNotMember = 900020,
  SBChatErrorSocketUserDeactivated = 900021,
  SBChatErrorSocketUserNotOwnerOfMessage = 900022,
  SBChatErrorSocketUserSendMessageNotAllowed = 900023,
  SBChatErrorSocketInvalidMentionForMessage = 900025,
  SBChatErrorSocketInvalidPushOptionForMessage = 900026,
  SBChatErrorSocketTooManyMetaKeyForMessage = 900027,
  SBChatErrorSocketTooManyMetaValueForMessage = 900028,
  SBChatErrorSocketTooManyMetaArrayForMessage = 900029,
  SBChatErrorSocketGuestNotAllowed = 900030,
  SBChatErrorSocketMutedUserInApplicationSendMessageNotAllowed = 900040,
  SBChatErrorSocketMutedUserInChannelSendMessageNotAllowed = 900041,
  SBChatErrorSocketChannelFrozen = 900050,
  SBChatErrorSocketProfanityMessageBlocked = 900060,
  SBChatErrorSocketBannedUrlsBlocked = 900061,
  SBChatErrorSocketRestrictedDomainBlocked = 900065,
  SBChatErrorSocketModeratedFileBlocked = 900066,
  SBChatErrorSocketEnterDeletedChannel = 900070,
  SBChatErrorSocketBlockedUserReceiveMessageNotAllowed = 900080,
  SBChatErrorSocketDeactivatedUserReceiveMessageNotAllowed = 900081,
  SBChatErrorSocketWrongChannelType = 900090,
  SBChatErrorSocketBannedUserSendMessageNotAllowed = 900100,
  SBChatErrorSocketTooManyMessages = 900200,
  SBChatErrorSocketMessageNotFound = 900300,
  SBChatErrorSocketTooManyParticipants = 900400,
  SBChatErrorSocketChannelNotFound = 900500,
  SBChatErrorSocketPollNotFound = 901200,
};
static NSString * _Nonnull const SBChatErrorDomain = @"SendbirdChat.ChatError";


SWIFT_CLASS("_TtC12SendbirdChat10ChatLogger")
@interface ChatLogger : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Channel sources that represents where the channel object comes from.
/// <ul>
///   <li>
///     Since 3.0.227
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SBDCollectionEventSource, "CollectionEventSource", open) {
/// Message change log
  SBDCollectionEventSourceMessageChangelog = 0,
/// Message gap has been filled
  SBDCollectionEventSourceMessageFill = 1,
/// Channel change log
  SBDCollectionEventSourceChannelChangelog = 2,
/// Pending message has been created
  SBDCollectionEventSourceLocalMessagePendingCreated = 3,
/// Message has been failed
  SBDCollectionEventSourceLocalMessageFailed = 4,
/// Message has been canceled
  SBDCollectionEventSourceLocalMessageCanceled = 5,
/// Message has been resent
  SBDCollectionEventSourceLocalMessageResendStarted = 6,
/// Message has been sent
  SBDCollectionEventSourceEventMessageSent = 100,
/// Message has been received
  SBDCollectionEventSourceEventMessageReceived = 101,
/// Message has been updated
  SBDCollectionEventSourceEventMessageUpdated = 102,
/// Message has been deleted
  SBDCollectionEventSourceEventMessageDeleted = 103,
/// Reaction has been updated
  SBDCollectionEventSourceEventReactionUpdated = 104,
/// Message thread info has been updated
  SBDCollectionEventSourceEventThreadInfoUpdated = 105,
/// Message mention has been received
  SBDCollectionEventSourceEventMention = 106,
/// Channel has been changed
  SBDCollectionEventSourceEventChannelChanged = 107,
/// Channel member count has been changed
  SBDCollectionEventSourceEventChannelMemberCountChanged = 108,
/// Channel has been frozen
  SBDCollectionEventSourceEventChannelFrozen = 109,
/// Channel has been unfrozen
  SBDCollectionEventSourceEventChannelUnfrozen = 110,
/// Channel has been hidden
  SBDCollectionEventSourceEventChannelHidden = 111,
/// Channel has been deleted
  SBDCollectionEventSourceEventChannelDeleted = 112,
/// Channel’s operators have been updated
  SBDCollectionEventSourceEventOperatorUpdated = 113,
/// Typing status has been udpated
  SBDCollectionEventSourceEventTypingStatusUpdated = 114,
/// Channel delivery status has been updated
  SBDCollectionEventSourceEventDeliveryStatusUpdated = 115,
/// Channel read status has been updated
  SBDCollectionEventSourceEventReadStatusUpdated = 116,
/// User receives group channel invitation
  SBDCollectionEventSourceEventUserReceivedInvitation = 117,
/// User declines group channel invitation
  SBDCollectionEventSourceEventUserDeclinedInvitation = 118,
/// User joins group channel
  SBDCollectionEventSourceEventUserJoined = 119,
/// User has been muted
  SBDCollectionEventSourceEventUserMuted = 120,
/// User has been umuted
  SBDCollectionEventSourceEventUserUnmuted = 121,
/// User leave group channel
  SBDCollectionEventSourceEventUserLeft = 122,
/// User has been banned
  SBDCollectionEventSourceEventUserBanned = 123,
/// User has been unbanned
  SBDCollectionEventSourceEventUserUnbanned = 124,
};


/// Core error code
typedef SWIFT_ENUM_NAMED(NSInteger, SBCoreError, "CoreError", open) {
  SBCoreErrorUnknownError = 800000,
  SBCoreErrorNetworkError = 800120,
  SBCoreErrorNetworkRoutingError = 800121,
  SBCoreErrorMalformedData = 800130,
  SBCoreErrorRequestFailed = 800220,
  SBCoreErrorFileUploadCancelFailed = 800230,
  SBCoreErrorFileUploadCanceled = 800240,
  SBCoreErrorFileUploadTimeout = 800250,
  SBCoreErrorFileSizeLimitExceeded = 800260,
  SBCoreErrorInternalServerError = 500901,
};
static NSString * _Nonnull const SBCoreErrorDomain = @"SendbirdChat.CoreError";

/// The enum type to represent various kinds of counts.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDCountPreference, "CountPreference", open) {
/// The channel of this preference has all of count.
  SBDCountPreferenceAll = 0,
/// The channel of this preference has only unread message count.
  SBDCountPreferenceUnreadMessageCountOnly = 1,
/// The channel of this preference has only unread mention count.
  SBDCountPreferenceUnreadMentionCountOnly = 2,
/// The channel of this preference does not get any count.
  SBDCountPreferenceOff = 3,
};


/// An object represets delivery status of a channel
SWIFT_CLASS_NAMED("DeliveryStatus")
@interface SBDDeliveryStatus : NSObject
@property (nonatomic, copy) NSString * _Nullable channelURL;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nullable updatedDeliveryReceipt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class to represent emoji
/// since:
/// 3.0.180
SWIFT_CLASS_NAMED("Emoji")
@interface SBDEmoji : NSObject
/// Emoji’s key
@property (nonatomic, copy) NSString * _Nonnull key;
/// Emoji’s url
@property (nonatomic, copy) NSString * _Nonnull url;
@end


@interface SBDEmoji (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>Emoji</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// Class to represent emoji cateogry
/// since:
/// 3.0.180
SWIFT_CLASS_NAMED("EmojiCategory")
@interface SBDEmojiCategory : NSObject
/// Emoji category’s key
@property (nonatomic) int64_t cid;
/// Emoji category’s name
@property (nonatomic, copy) NSString * _Nonnull name;
/// Emoji category’s url
@property (nonatomic, copy) NSString * _Nonnull url;
/// Emoji list
@property (nonatomic, copy) NSArray<SBDEmoji *> * _Nonnull emojis;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDEmojiCategory (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDEmojiCategory (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>EmojiCategory</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains list of <code>EmojiCategory</code> and hash
SWIFT_CLASS_NAMED("EmojiContainer")
@interface SBDEmojiContainer : NSObject
/// A hash value that represnts any changes on emojis
@property (nonatomic, copy) NSString * _Nonnull emojiHash;
/// Emoji category list
@property (nonatomic, copy) NSArray<SBDEmojiCategory *> * _Nonnull categories;
@end


@interface SBDEmojiContainer (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>EmojiContainer</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDThumbnail;

/// Represents a mesage object that contains a file. Derived from <code>BaseMessage</code>
/// note:
/// This class doesn’t include a binary <em>data</em> for the file. It is just a URL.
SWIFT_CLASS_NAMED("FileMessage")
@interface SBDFileMessage : SBDBaseMessage
/// The file URL.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The file URL without the ekey.
/// since:
/// 3.0.194
@property (nonatomic, readonly, copy) NSString * _Nullable plainURL;
/// The name of file.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The size of file.
@property (nonatomic, readonly) NSUInteger size;
/// The type of file.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Image thumbnails.
@property (nonatomic, copy) NSArray<SBDThumbnail *> * _Nullable thumbnails;
@property (nonatomic) BOOL requireAuth;
@property (nonatomic, copy) NSString * _Nullable eKey;
+ (SBDFileMessage * _Nullable)pendingMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params requestId:(NSString * _Nullable)requestId channel:(SBDBaseChannel * _Nonnull)channel sender:(SBDUser * _Nullable)sender isOperatorMessage:(BOOL)isOperatorMessage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage SWIFT_UNAVAILABLE;
@end


@interface SBDFileMessage (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDFileMessage (SWIFT_EXTENSION(SendbirdChat))
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>FileMessage</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDThumbnailSize;

/// An object contains set of options to create <code>FileMessage</code>
/// since:
/// 3.0.90
SWIFT_CLASS_NAMED("FileMessageCreateParams")
@interface SBDFileMessageCreateParams : SBDBaseMessageCreateParams
/// Binary file data. <code>file</code> and <code>fileURL</code> cannot be set together.
@property (nonatomic, copy) NSData * _Nullable file;
@property (nonatomic, copy) NSData * _Nullable internalFile;
@property (nonatomic, copy) NSString * _Nullable base64File;
/// File URL. <code>file</code> and <code>fileURL</code> cannot be set together.
@property (nonatomic, copy) NSString * _Nullable fileURL;
@property (nonatomic, copy) NSString * _Nullable internalFileURL;
/// Thumbnail sizes. This parameter is the array of <code>ThumbnailSize</code> instance and works for image file only.
@property (nonatomic, copy) NSArray<SBDThumbnailSize *> * _Nullable thumbnailSizes;
/// File name.
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable internalFileName;
/// File MIME type.
@property (nonatomic, copy) NSString * _Nullable mimeType;
@property (nonatomic, copy) NSString * _Nullable internalMimeType;
/// File size.
@property (nonatomic) NSUInteger fileSize;
/// Initializes an instance of a file message params with binary file.
/// \param file A Biniary file to be sent.
///
///
/// returns:
/// An initialized file message params
- (nonnull instancetype)initWithFile:(NSData * _Nonnull)file OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of a file message params with file url.
/// \param fileURL File url to be sent.
///
///
/// returns:
/// An initialized file message params
- (nonnull instancetype)initWithFileURL:(NSString * _Nonnull)fileURL OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) BinaryData * _Nullable binaryData;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>FileMessageCreateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithData:(NSString * _Nullable)data customType:(NSString * _Nullable)customType pushNotificationDeliveryOption:(enum SBDPushNotificationDeliveryOption)pushNotificationDeliveryOption metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays mentionType:(enum SBDMentionType)mentionType mentionedUserIds:(NSArray<NSString *> * _Nullable)mentionedUserIds parentMessageId:(int64_t)parentMessageId isReplyToChannel:(BOOL)isReplyToChannel appleCriticalAlertOptions:(SBDAppleCriticalAlertOptions * _Nullable)appleCriticalAlertOptions SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWith:(SBDBaseMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end


/// The <code>FileMessageCreateParams</code> class is used to send a file message in <code>BaseChannel</code>. This is a child class of <code>BaseMessageCreateParams</code>.
SWIFT_CLASS_NAMED("FileMessageUpdateParams")
@interface SBDFileMessageUpdateParams : SBDBaseMessageUpdateParams
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>FileMessage</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithData:(NSString * _Nullable)data customType:(NSString * _Nullable)customType mentionType:(enum SBDMentionType)mentionType mentionedUserIds:(NSArray<NSString *> * _Nullable)mentionedUserIds SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWith:(SBDBaseMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end

@class NSStream;

SWIFT_CLASS("_TtC12SendbirdChat16FoundationStream")
@interface FoundationStream : NSObject <NSStreamDelegate>
/// Delegate for the stream methods. Processes incoming bytes
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A object to retrieve friend list
SWIFT_CLASS_NAMED("FriendListQuery")
@interface SBDFriendListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use SendbirdChat's `createFriendListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>FriendListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDFriendListQuery * _Nonnull)setupFor:(SBDFriendListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDMember;
enum SBDGroupChannelPushTriggerOption : NSInteger;
enum SBDMemberState : NSInteger;
enum SBDRole : NSInteger;
enum SBDMutedState : NSInteger;
enum SBDGroupChannelHiddenState : NSInteger;
enum SBDGroupChannelListOrder : NSInteger;

/// The <code>GroupChannel</code> class represents a group channel which is a private chat.
/// The user who wants to join the group channel has to be invited by another user who is already joined
/// the channel. This class is derived from <code>BaseChannel</code>. If the <code>BaseChannelDelegate</code> is added,
/// the user will automatically receive all messages from the group channels where the user belongs after
/// connection. The <code>GroupChannel</code> provides the features of general messaging apps.
/// <ul>
///   <li>
///     Typing indicator.
///   </li>
///   <li>
///     Read status for each message.
///   </li>
///   <li>
///     Unread message count in the channel.
///   </li>
///   <li>
///     Lastest message in the channel.
///   </li>
/// </ul>
/// The <code>GroupChannel</code> has a special property, <code>isDistinct</code>. The distinct property enabled group
/// channel is always reuesd for same channel <em>members</em>. If a new member gets invited or the member
/// left from the channel, then the distinct property disabled automatically. If you don’t set distinct property
/// on the channel, it always create new channel for the same <em>members</em>.
/// For more information, see <a href="https://docs.sendbird.com/ios#group_channel">Group Channel</a>.
SWIFT_CLASS_NAMED("GroupChannel")
@interface SBDGroupChannel : SBDBaseChannel
/// Last message of the channel.
@property (nonatomic, strong) SBDBaseMessage * _Nullable lastMessage;
/// Represents the channel is super channel or not.
@property (nonatomic) BOOL isSuper;
/// Represents the channel is broadcast channel or not.
/// since:
/// 3.0.171
@property (nonatomic) BOOL isBroadcast;
/// Represents the channel is public channel or private one.
@property (nonatomic) BOOL isPublic;
/// Represents that the channel has access code to enter.
/// since:
/// 3.0.116
@property (nonatomic) BOOL isAccessCodeRequired;
/// Represents the channel is distinct or not.
@property (nonatomic) BOOL isDistinct;
/// Represents a boolean whether the public group channel is discoverable.
/// It is only for a public group channel.
/// The default value is <code>true</code> if the channel is a public group channel.
/// If the channel is not a public group channel, the default value is <code>false</code>.
/// since:
/// 3.0.136
@property (nonatomic) BOOL isDiscoverable;
/// Unread message count of the channel.
@property (nonatomic) NSUInteger unreadMessageCount;
/// The number of mentions that user does not read yet in the channel.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger unreadMentionCount;
/// Channel members
/// note:
/// Number of member for Super GroupChannel is limited to 10
@property (nonatomic, readonly, copy) NSArray<SBDMember *> * _Nonnull members;
@property (nonatomic, copy) NSDictionary<NSString *, SBDMember *> * _Nonnull memberMap;
/// The number of members.
@property (nonatomic) NSUInteger memberCount;
/// The number of joined members.
@property (nonatomic) NSUInteger joinedMemberCount;
/// Timestamp when current user joined
/// since:
/// 3.0.224
@property (nonatomic) int64_t joinedAt;
/// Represents which push notification for the current user to receive in a group channel.
/// since:
/// 3.0.128
@property (nonatomic) enum SBDGroupChannelPushTriggerOption myPushTriggerOption;
/// Represents this channel is hidden or not.
@property (nonatomic) BOOL isHidden;
/// Current member’s state in the channel.
@property (nonatomic) enum SBDMemberState myMemberState;
/// The role of current user in the channel.
@property (nonatomic) enum SBDRole myRole;
/// The muted state of the current user in the channel.
@property (nonatomic) enum SBDMutedState myMutedState;
/// The preference lets to know counts in the channel. The default value is <code>.all</code>.
/// since:
/// 3.0.102
@property (nonatomic) enum SBDCountPreference myCountPreference;
/// The time stamp when the current user got a invitation from other user in the channel.
/// since:
/// 3.0.107
@property (nonatomic) int64_t invitedAt;
/// The hidden state of the channel.
/// since:
/// 3.0.122
@property (nonatomic) enum SBDGroupChannelHiddenState hiddenState;
/// A last read information for the current user.
/// since:
/// 3.0.138
@property (nonatomic) int64_t myLastRead;
/// Message offset of a channel. User can only see messages after this offset.
/// since:
/// 3.0.157
@property (nonatomic) int64_t messageOffsetTimestamp;
/// A value that sets the message survival time in seconds. In the channel that is created or updated
/// with this option, the read messages are automatically deleted after a determined amount of time.
/// The default value is <code>-1</code> that represents the disappearing message is disabled.
/// note:
/// This feature is available in a 1-on-1 group channel.
/// since:
/// 3.0.172
@property (nonatomic) NSInteger messageSurvivalSeconds;
@property (nonatomic) int64_t memberCountUpdatedAt;
@property (nonatomic) BOOL isCreated;
/// Checks if the channel has a member that has <code>userId</code>.
/// \param userId User ID.
///
///
/// returns:
/// If <code>true</code>, the channel has the member.
- (BOOL)hasMember:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Gets member in the channel.
/// \param userId User ID.
///
///
/// returns:
/// <code>Member</code> object as a member. If there is a member who has the <code>userId</code>, Returns nil.
- (SBDMember * _Nullable)getMember:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSTimeInterval typingIndicatorThrottlingInterval;
@property (nonatomic) NSTimeInterval lastStartTypingTimestamp;
@property (nonatomic) NSTimeInterval lastEndTypingTimestamp;
@property (nonatomic) NSTimeInterval lastManualMarkAsReadTimestamp;
@property (nonatomic, strong) SBDUser * _Nullable inviter;
/// Gets a user who invites current user to this channel
///
/// returns:
/// optional `User
- (SBDUser * _Nullable)getInviter SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull readReceipts;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull deliveryReceipts;
/// Gets my delivery status in UTC timestamp
- (int64_t)myDeliveryStatus SWIFT_WARN_UNUSED_RESULT;
/// Compares two channel objects with the channel list order.
/// since:
/// 3.0.227
/// \param channelA First channel object.
///
/// \param channelB Second channel obejct.
///
/// \param order Order.
///
+ (BOOL)compareWithChannelA:(SBDGroupChannel * _Nonnull)channelA channelB:(SBDGroupChannel * _Nonnull)channelB order:(enum SBDGroupChannelListOrder)order SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL name:(NSString * _Nonnull)name coverURL:(NSString * _Nullable)coverURL createdAt:(int64_t)createdAt creator:(SBDUser * _Nullable)creator isCreated:(BOOL)isCreated data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType isEphemeral:(BOOL)isEphemeral isFrozen:(BOOL)isFrozen lastSyncedTs:(int64_t)lastSyncedTs isSuper:(BOOL)isSuper isBroadcast:(BOOL)isBroadcast isPublic:(BOOL)isPublic isDiscoverable:(BOOL)isDiscoverable isDistinct:(BOOL)isDistinct unreadMentionCount:(NSUInteger)unreadMentionCount unreadMessageCount:(NSUInteger)unreadMessageCount lastMessage:(SBDBaseMessage * _Nullable)lastMessage members:(NSArray<SBDMember *> * _Nonnull)members memberCount:(NSUInteger)memberCount memberCountUpdatedAt:(int64_t)memberCountUpdatedAt joinedMemberCount:(NSUInteger)joinedMemberCount readReceipts:(NSDictionary<NSString *, NSNumber *> * _Nonnull)readReceipts deliveryReceipts:(NSDictionary<NSString *, NSNumber *> * _Nonnull)deliveryReceipts inviter:(SBDUser * _Nullable)inviter invitedAt:(int64_t)invitedAt myMemberState:(enum SBDMemberState)myMemberState isHidden:(BOOL)isHidden joinedAt:(int64_t)joinedAt myRole:(enum SBDRole)myRole myMuteState:(enum SBDMutedState)myMuteState myCountPreference:(enum SBDCountPreference)myCountPreference isAccessCodeRequired:(BOOL)isAccessCodeRequired myLastRead:(int64_t)myLastRead messageOffset:(int64_t)messageOffset messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSObject * _Nullable uniqueKey;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL name:(NSString * _Nonnull)name coverURL:(NSString * _Nullable)coverURL createdAt:(int64_t)createdAt creator:(SBDUser * _Nullable)creator isCreated:(BOOL)isCreated data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType isEphemeral:(BOOL)isEphemeral isFrozen:(BOOL)isFrozen lastSyncedTs:(int64_t)lastSyncedTs SWIFT_UNAVAILABLE;
@end



@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)updateTypingStatusWith:(SBDUser * _Nullable)user didStart:(BOOL)didStart;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Freeze the channel. If channel is frozen, only operators can send messages to the channel.
/// since:
/// 3.0.89
/// \param completionHandler The handler block to be executed after freeze.
///
- (void)freezeWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Stop to freeze the channel. If It is not frozen channel, this will be ignored.
/// since:
/// 3.0.89
/// \param completionHandler The handler block to be executed after stop to freeze.
///
- (void)unfreezeWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly) BOOL shouldSendMACK;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>GroupChannel</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)internalBuildFromSerializedData:(NSData * _Nullable)data fromDB:(BOOL)isFromDB SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)updateMyReadReceiptWithTimestamp:(int64_t)timestamp;
- (void)updateReadReceiptWith:(NSString * _Nullable)userId timestamp:(int64_t)timestamp;
- (void)removeReadReceiptWith:(NSString * _Nullable)userId;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)updateDeliveryReceiptWith:(NSString * _Nullable)userId timestamp:(int64_t)timestamp;
- (void)updateDeliveryReceipts:(NSDictionary<NSString *, NSNumber *> * _Nullable)deliveryReceipts;
- (void)removeDeliveryReceiptWith:(NSString * _Nullable)userId;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (NSComparisonResult (^ _Nonnull)(id _Nullable, id _Nullable))comparator SWIFT_WARN_UNUSED_RESULT;
- (NSComparisonResult)orderBetweenObjectWithObj1:(id _Nullable)obj1 obj2:(id _Nullable)obj2 SWIFT_WARN_UNUSED_RESULT;
+ (NSComparisonResult)orderBetweenObjectsWithObj1:(id _Nullable)obj1 obj2:(id _Nullable)obj2 order:(enum SBDGroupChannelListOrder)order SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)addMember:(SBDMember * _Nullable)member timestamp:(int64_t)timestamp;
- (SBDMember * _Nullable)removeMember:(SBDMember * _Nullable)member;
- (SBDMember * _Nullable)removeMemberWith:(NSString * _Nullable)userId;
- (void)updateJoinedMemberCount;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (BOOL)shouldUpdateLastMessage:(SBDBaseMessage * _Nonnull)message sender:(SBDSender * _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
- (void)updateMember:(SBDUser * _Nullable)sender;
- (BOOL)updateUnreadCountWithMessage:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDGroupChannelListQuery;
@class SBDPublicGroupChannelListQuery;
@class SBDGroupChannelMemberListQuery;

@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates a query for my group channel list.
///
/// returns:
/// GroupChannelListQuery instance for the current user.
+ (SBDGroupChannelListQuery * _Nonnull)createMyGroupChannelListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query for public group channel list.
///
/// returns:
/// The instance to query public group channels.
+ (SBDPublicGroupChannelListQuery * _Nonnull)createPublicGroupChannelListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query for members in group channel.
/// \param channelURL channel url
///
///
/// returns:
/// The instance to query the members in group channel.
+ (SBDGroupChannelMemberListQuery * _Nonnull)createMemberListQueryWithChannelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates a query for members in group channel.
///
/// returns:
/// The instance to query the members in group channel.
- (SBDGroupChannelMemberListQuery * _Nullable)createMemberListQuery SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Resets the history in this channel.
/// \param completionHandler The handler block to execute.
///
- (void)resetMyHistoryWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Changes a setting that decides which push notification for the current user to receive in the group channel.
/// If a value of option is <code>.default</code>, a push trigger option in this group channel follows a push trigger option
/// of the current user. It is related with <code>SendbirdChat setPushTriggerOption(_:completionHandler:)</code>.
/// since:
/// 3.0.128
/// \param option options to choose which push notification for the current user to receive.
///
/// \param completionHandler handler block to execute when setting a push trigger option of the current user is completed.
///
- (void)setMyPushTriggerOption:(enum SBDGroupChannelPushTriggerOption)option completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Requests a setting that decides which push notification for the current user to receive in the group channel.
/// since:
/// 3.0.128
/// \param completionHandler The handler block to execute when getting a push trigger option of the current user is completed.
///
- (void)getMyPushTriggerOptionWithCompletionHandler:(void (^ _Nonnull)(enum SBDGroupChannelPushTriggerOption, SBError * _Nullable))completionHandler;
/// Sets count preference of current user.
/// since:
/// 3.0.102
/// \param myCountPreference Preference is type of <code>CountPreference</code>. The default value is <code>.all</code>.
///
- (void)setMyCountPreference:(enum SBDCountPreference)myCountPreference completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Starts typing. The other <em>members</em> in the channel will receive an event.
/// The event will be received in <code>channelDidUpdateTypingStatus(_:)</code> of <code>GroupChannelDelegate</code>.
- (void)startTyping;
/// Ends typing. The other <em>members</em> in the channel will receive an event.
/// The event will be received in <code>channelDidUpdateTypingStatus(_:)</code> of <code>GroupChannelDelegate</code>.
- (void)endTyping;
/// Checks any members in the channel has been typing
///
/// returns:
/// <code>true</code> when other users are typing in this channel.
- (BOOL)isTyping SWIFT_WARN_UNUSED_RESULT;
/// Returns the users who are typing now.
/// since:
/// 3.0.202
///
/// returns:
/// The users who are typing now.
- (NSArray<SBDUser *> * _Nullable)getTypingUsers SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Returns how many <em>members</em> haven’t been read the given message yet.
/// since:
/// 3.0.185
/// \param message The message.
///
///
/// returns:
/// Number of unread member count. Zero if all <em>members</em> read the message.
- (NSInteger)getUnreadMemberCount:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Returns the <em>members</em> who read the given message.
/// since:
/// 3.0.115
/// \param message The message.
///
/// \param includeAllMembers If <code>true</code>, the return value includes the current user and the sender of the message.
///
///
/// returns:
/// Members who read the message.
- (NSArray<SBDMember *> * _Nonnull)getReadMembersWithMessage:(SBDBaseMessage * _Nonnull)message includeAllMembers:(BOOL)includeAllMembers SWIFT_WARN_UNUSED_RESULT;
/// Returns the <em>members</em> who didn’t read the given message.
/// since:
/// 3.0.115
/// \param message The message.
///
/// \param includeAllMembers If <code>true</code>, the return value includes the current user and the sender of the message.
///
///
/// returns:
/// Members who don’t read the message.
- (NSArray<SBDMember *> * _Nonnull)getUnreadMembersWithMessage:(SBDBaseMessage * _Nonnull)message includeAllMembers:(BOOL)includeAllMembers SWIFT_WARN_UNUSED_RESULT;
/// Returns how many <em>members</em> haven’t been delivery the given message yet.
/// since:
/// 3.0.185
/// \param message The message.
///
///
/// returns:
/// Number of undelivered member count. Zero if all <em>members</em> delivered the message.
- (NSInteger)getUndeliveredMemberCount:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Returns the read status.
/// since:
/// 3.0.115
/// [
/// USER_ID: [
/// “user”: <em>User</em> object,
/// “last_seen_at”: <em>Int64</em>,
/// ]
/// ]
/// <code>USER_ID</code> is the user ID as a key. Each <code>USER_ID</code> has a <code>Dictionary</code> which includes
/// <code>User</code> object and <code>Int64</code>. The “user” is a key of <code>User</code> object and the
/// “last_seen_at” is a key of <code>Int64</code> object.
/// \param includeAllMembers If true, the return value includes the current user and the sender of the message.
///
///
/// returns:
/// The read status. If there’s no data, it will be an empty dictionary.
- (NSDictionary<NSString *, NSDictionary<NSString *, id> *> * _Nonnull)getReadStatusIncludingAllMembers:(BOOL)includeAllMembers SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDGroupChannelCreateParams;
@class SBDGroupChannelUpdateParams;

@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Refreshes this channel instance.
/// \param completionHandler The handler block to execute.
///
- (void)refreshWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Creates a group channel with <code>GroupChannelCreateParams</code> class.
/// \param params The parameter instance of GroupChannelCreateParams what has properties
/// to create group channel.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel
/// instance which has the <code>userIds</code> as <em>members</em>.
///
+ (void)createChannelWithParams:(SBDGroupChannelCreateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a group channel with <code>GroupChannelCreateParams</code> class.
/// since:
/// 3.0.215
/// \param params The parameter instance of GroupChannelCreateParams what has properties to create group channel.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of bytes sent
/// since the last time this method was called. <code>totalBytesSent</code> is the total number of bytes sent so far.
/// <code>totalBytesExpectedToSend</code> is the expected length of the body <em>data</em>. These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel instance which
/// has the <code>userIds</code> as <em>members</em>.
///
+ (void)createChannelWithParams:(SBDGroupChannelCreateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a group channel with <code>GroupChannelCreateParams</code> class.
/// The <code>completionHandler</code> Returns <code>isCreated</code>, which notifies the <code>channel</code> instance is created now.
/// since:
/// 3.0.122
/// \param params The parameter instance of <code>GroupChannelCreateParams</code> what has properties
/// to create group channel. The channel that is created by this method is always a distinct channel regardless of
/// the <code>isDistinct</code> value of the <code>params</code>.
///
/// \param completionHandler The handler block to be executed. If the <code>channel</code> instance is new,
/// then <code>isCreated</code> is <code>true</code>.
///
+ (void)createDistinctChannelIfNotExistWithParams:(SBDGroupChannelCreateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDGroupChannel * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Creates a group channel with <code>GroupChannelCreateParams</code> class.
/// The <code>completionHandler</code> Returns <code>isCreated</code>, which notifies the <code>channel</code> instance is created now.
/// since:
/// 3.0.215
/// \param params The parameter instance of GroupChannelCreateParams what has properties to create
/// group channel. The channel that is created by this method is always a distinct channel regardless
/// of the <code>isDistinct</code> value of the <code>params</code>.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of
/// bytes sent since the last time this method was called. <code>totalBytesSent</code> is the total number of
/// bytes sent so far. <code>totalBytesExpectedToSend</code> is the expected length of the body <em>data</em>.
/// These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to be executed. If the <code>channel</code> instance is new, then <code>isCreated</code> is <code>true</code>.
///
+ (void)createDistinctChannelIfNotExistWithParams:(SBDGroupChannelCreateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nonnull)(SBDGroupChannel * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Update a group channel with <code>GroupChannelUpdateParams</code> class.
/// \param params instance of <code>GroupChannelUpdateParams</code> contains what to update for group channel.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel
/// instance which has the <code>userIds</code> as <em>members</em>.
///
- (void)updateChannelWithParams:(SBDGroupChannelUpdateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Update a group channel with <code>GroupChannelUpdateParams</code> class.
/// since:
/// 3.0.215
/// <ul>
///   <li>
///     <h2>parameter d</h2>
///   </li>
/// </ul>
/// \param params instance of <code>GroupChannelUpdateParams</code> contains what to update for group channel.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of bytes
/// sent since the last time this method was called. <code>totalBytesSent</code> is the total number of bytes sent so far.
/// <code>totalBytesExpectedToSend</code> is the expected length of the body <em>data</em>. These parameters are
/// the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel instance which
/// has the <code>userIds</code> as <em>members</em>.
///
- (void)updateChannelWithParams:(SBDGroupChannelUpdateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nonnull)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Gets a group channel instance from channel URL asynchronously.
/// \param url The channel URL.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel
/// instance which has the <code>channelURL</code>.
///
+ (void)getChannelWithURL:(NSString * _Nonnull)url completionHandler:(void (^ _Nullable)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes the group channel. The user has to be an operator of the channel.
/// since:
/// 3.0.137
/// \param completionHandler The handler block to execute.
///
- (void)deleteChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)clearAllUnreadCount;
@property (nonatomic, readonly) BOOL isMyUnreadMessageCountEnabled;
- (void)increaseUnreadMessageCount;
- (void)clearUnreadMessageCount;
@property (nonatomic, readonly) BOOL isMyUnreadMentionCountEnabled;
- (void)increaseUnreadMentionCount;
- (void)decreaseUnreadMentionCount;
- (void)clearUnreadMentionCount;
@end

@class SBDScheduledUserMessageCreateParams;
@class SBDScheduledUserMessage;

@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Invites a single user to the group channel.
/// \param user The user to be invited.
///
/// \param completionHandler The handler block to execute.
///
- (void)inviteUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Invites a single user to the group channel.
/// \param userId The user ID to be invited.
///
/// \param completionHandler The handler block to execute.
///
- (void)inviteUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Invites multiple users to the group channel.
/// \param users The user array to be invited.
///
/// \param completionHandler The handler block to execute.
///
- (void)inviteUsers:(NSArray<SBDUser *> * _Nonnull)users completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Invites multiple users to the group channel.
/// \param userIds The IDs of users array to be invited.
///
/// \param completionHandler The handler block to execute.
///
- (void)inviteUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Accpets the invitation.
/// \param completionHandler The handler block to execute.
///
- (void)acceptInvitationWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Accpets the invitation from a public group channel that has access code.
/// since:
/// 3.0.116
/// \param accessCode The string code is used to accept invitation from a public group channel.
///
/// \param completionHandler The handler block to be executed after accepting. This block
/// has no return value and takes an argument that is an error made when there is something wrong to accept.
///
- (void)acceptInvitationWithAccessCode:(NSString * _Nullable)accessCode completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Declines the invitation.
/// \param completionHandler The handler block to execute.
///
- (void)declineInvitationWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Join a group channel
/// \param completionHandler The handler block to execute.
///
- (void)joinWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Join a public group channel that has access code.
/// since:
/// 3.0.116
/// \param accessCode The string code is used to join a public group channel.
///
/// \param completionHandler The handler block to be executed after joining. This block
/// has no return value and takes an argument that is an error made when there is something wrong to join.
///
- (void)joinWithAccessCode:(NSString * _Nullable)accessCode completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Leaves the group channel. The channel will be disappeared from the channel list. If join the channel,
/// the invitation is required.
/// \param completionHandler The handler block to execute.
///
- (void)leaveChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Hides the group channel. The channel will be hid from the channel list, but it will be appeared again
/// when the other user send a message in the channel.
/// \param hidePreviousMessages The option to hide the previous message of this channel when the channel will be appeared again.
///
/// \param completionHandler The handler block to execute.
///
- (void)hideChannelWithHidePreviousMessages:(BOOL)hidePreviousMessages completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Hides the group channel with the auto unhide option. The channel will be hid from the channel list.
/// If the <code>allowAutoUnhide</code> is <code>true</code>, the channel will be appeared again when the other user send a
/// message in the channel. However, if the <code>allowAutoUnhide</code> is <code>false</code>, the channel will be appeared
/// by <code>unhideChannel(completionHandler:)</code> method.
/// since:
/// 3.0.122
/// \param hidePreviousMessages The option to hide the previous message of this channel when the channel will be appeared again.
///
/// \param allowAutoUnhide The auto unhide option.
///
/// \param completionHandler THe handle block to be executed.
///
- (void)hideChannelWithHidePreviousMessages:(BOOL)hidePreviousMessages allowAutoUnhide:(BOOL)allowAutoUnhide completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Unhides the group channel.
/// since:
/// 3.0.122
/// \param completionHandler THe handle block to be executed.
///
- (void)unhideChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Sends mark as read. The other <em>members</em> in the channel will receive an event. The event will be received in
/// <code>channelDidUpdateReadStatus:</code> of <code>GroupChannelDelegate</code>.
/// \param completionHandler completion handler 
///
- (void)markAsReadWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Registers a scheduled user message. The message will be sent at the specified time in <code>params</code>.
/// since:
/// 3.0.119
/// \param params The instance of <code>ScheduledUserMessageCreateParams</code> that can has
/// parameters related with a text message. It has also the specified time to send a user message.
///
/// \param completionHandler The handler block to be executed.
///
- (void)registerScheduledUserMessageWithParams:(SBDScheduledUserMessageCreateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDScheduledUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Notifies the current user took a screenshot in this channel. The server is going to send an admin
/// message to notify this in the group channel.
/// since:
/// 3.0.172
/// \param completionHandler The handler block to be executed.
///
- (void)notifyScreenshotWasTakenWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


/// An object that represents the parameters for the The method returns channels according to the properties in this object.
/// since:
/// 3.0.182
SWIFT_CLASS_NAMED("GroupChannelChangeLogsParams")
@interface SBDGroupChannelChangeLogsParams : NSObject
/// Sets the custom types filter.
/// The property filters channels which have one of custom types.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull customTypes;
/// Determines whether to include the empty channels in the results.
/// note:
/// The default value is <code>true</code>.
@property (nonatomic) BOOL includeEmptyChannel;
/// Determines whether to include the frozen channels in the results.
/// note:
/// The default value is <code>true</code>.
@property (nonatomic) BOOL includeFrozenChannel;
/// Create <code>GroupChannelChangeLogsParams</code> from a given GroupChannelListQuery instance.
/// since:
/// 3.0.185
/// \param query group channel list query
///
///
/// returns:
/// A created instance of <code>GroupChannelChangeLogsParams</code>
+ (SBDGroupChannelChangeLogsParams * _Nonnull)createWithGroupChannelListQuery:(SBDGroupChannelListQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBDGroupChannelCollectionDelegate;

/// An object that accesses the cache for the group channels.
/// since:
/// 3.1.0
SWIFT_CLASS_NAMED("GroupChannelCollection")
@interface SBDGroupChannelCollection : SBDBaseCollection
/// The channels that the collection has fetched.
@property (nonatomic, readonly, copy) NSArray<SBDGroupChannel *> * _Nonnull channelList;
/// If <code>true</code>, the next page might exist.
@property (nonatomic) BOOL hasNext;
/// Group channel list query
@property (nonatomic, strong) SBDGroupChannelListQuery * _Nonnull query;
/// Collection delegate.
@property (nonatomic, weak) id <SBDGroupChannelCollectionDelegate> _Nullable delegate;
/// Represents that the collection is going to display the real-time messages.
@property (nonatomic, readonly) BOOL isLive;
/// Token for channel change log.
@property (nonatomic, readonly, copy) NSString * _Nullable changelogsToken;
/// Default timestamp for group channel change logs.
@property (nonatomic, readonly) int64_t defaultTs;
/// Represents the collection needs to fetch more data to satisfy query limit
@property (nonatomic, readonly) BOOL needMoreData;
/// Channel repository to access the memory cache and the DB.
@property (nonatomic, strong) ChannelRepository * _Nonnull repository;
/// Comparator for channel list.
@property (nonatomic, readonly, copy) BOOL (^ _Nonnull comparator)(SBDGroupChannel * _Nonnull, SBDGroupChannel * _Nonnull);
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull queue;
@property (nonatomic, readonly, copy) NSString * _Nonnull delegateKey;
/// Loads next page.
/// \param completionHandler The completion handler to be executed.
///
- (void)loadMoreWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, SBError * _Nullable))completionHandler;
/// Invalidates the object.
- (void)dispose;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)didSucceedReconnection;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly, copy) NSString * _Nullable token;
@property (nonatomic, readonly) int64_t timestamp;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChangeNotification;)
+ (NSNotificationName _Nonnull)ChangeNotification SWIFT_WARN_UNUSED_RESULT;
/// Notifies that data set has been changed.
- (void)notifyDataSetChanged;
/// Notifies that channels have been deleted.
/// \param context Channel context.
///
/// \param deletedChannelURLs Deleted channels’ URLs.
///
- (void)notifyChannelDeletedWithContext:(SBDChannelContext * _Nonnull)context channelURLs:(NSArray<NSString *> * _Nonnull)channelURLs;
/// Notifies that channels have been updated.
/// \param context Channel context.
///
/// \param updatedChannels Updated channels.
///
- (void)notifyChannelUpdatedWithContext:(SBDChannelContext * _Nonnull)context channels:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
/// Notifies that channels have been added.
/// \param context Channel context.
///
/// \param addedChannels Added channels.
///
- (void)notifyChannelAddedWithContext:(SBDChannelContext * _Nonnull)context channels:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
/// Requests channel change logs.
- (void)requestChangelogs;
/// Sets the default timestamp for getting the channel change logs.
/// \param channels Array of channel objects
///
- (void)setDefaultChangelogsTimestampsWithChannel:(SBDGroupChannel * _Nullable)channel;
/// Checks the <code>channel</code> should be displayed above the <code>baseChannel</code>.
- (BOOL)shouldAddToViewWithChannel:(SBDGroupChannel * _Nonnull)channel baseChannel:(SBDGroupChannel * _Nullable)baseChannel SWIFT_WARN_UNUSED_RESULT;
/// Gets the oldest channel from the cache that the collection has.
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nullable oldestChannel;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)updateWithChannel:(SBDGroupChannel * _Nonnull)channel source:(enum SBDCollectionEventSource)source;
/// Updates all channels if they exist and invokes the channel collection delegates.
/// \param source Channel source. 
///
/// \param channels Channels to be updated. 
///
- (void)updateIfExistsWithChannels:(NSArray<SBDGroupChannel *> * _Nonnull)channels source:(enum SBDCollectionEventSource)source;
/// Updates a channel if it exists and invokes the channel collection delegates.
/// \param source Channel source. 
///
/// \param channel Channel to be updated. 
///
- (void)updateIfExistWithChannel:(SBDGroupChannel * _Nonnull)channel source:(enum SBDCollectionEventSource)source;
/// Updates or inserts a channel and invokes the channel collection delegates.
/// \param source Channel source. 
///
/// \param channel Channel to be updated or inserted. 
///
- (void)upsertWithChannel:(SBDGroupChannel * _Nonnull)channel source:(enum SBDCollectionEventSource)source;
/// Updates channels.
/// \param channels Channels to be updated. 
///
- (void)updateWithChannels:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
/// Updates channels with the channel change logs.
- (void)updateChangelogsWithAdded:(NSArray<SBDGroupChannel *> * _Nonnull)added updated:(NSArray<SBDGroupChannel *> * _Nonnull)updated deleted:(NSArray<NSString *> * _Nonnull)deleted;
/// Deletes a channel and invokes the channel collection delegates.
/// \param channel Deleted channel. 
///
/// \param source Channel source. 
///
///
/// returns:
/// <code>true</code> If there is a deleted channel.
- (BOOL)deleteWithChannel:(SBDGroupChannel * _Nonnull)channel source:(enum SBDCollectionEventSource)source;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)channel:(SBDBaseChannel * _Nonnull)channel new:(SBDBaseMessage * _Nonnull)new_ deleted:(SBDBaseMessage * _Nullable)deleted;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMention:(SBDBaseMessage * _Nonnull)message;
- (void)channelWasChanged:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDGroupChannel * _Nonnull)sender didReceiveInvitation:(NSArray<SBDUser *> * _Nullable)invitees inviter:(SBDUser * _Nullable)inviter;
- (void)channel:(SBDGroupChannel * _Nonnull)sender didDeclineInvitation:(SBDUser * _Nonnull)invitee inviter:(SBDUser * _Nullable)inviter;
- (void)channelDidUpdateDeliveryReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateReadReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidChangeMemberCount:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasMuted:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasUnmuted:(SBDUser * _Nonnull)user;
- (void)channelWasFrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasUnfrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasHidden:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateOperators:(SBDBaseChannel * _Nonnull)sender;
- (void)channelDidUpdateTypingStatus:(SBDGroupChannel * _Nonnull)sender;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidLeave:(SBDUser * _Nonnull)user;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidJoin:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasBanned:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasUnbanned:(SBDUser * _Nonnull)user;
- (void)channelWasDeleted:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType;
@end


/// Methods that are invoked when the event of the channel collection occurs.
/// since:
/// 3.0.227
SWIFT_PROTOCOL_NAMED("GroupChannelCollectionDelegate")
@protocol SBDGroupChannelCollectionDelegate
@optional
/// A callback when the channels are added.
/// \param collection The collection object.
///
/// \param context The context that represents the reason why the delegate is invoked.
///
/// \param addedChannels The channels that are added.
///
- (void)channelCollection:(SBDGroupChannelCollection * _Nonnull)collection context:(SBDChannelContext * _Nonnull)context addedChannels:(NSArray<SBDGroupChannel *> * _Nonnull)addedChannels;
/// A callback when the channels are updated.
/// \param collection The collection object.
///
/// \param context The context that represents the reason why the delegate is invoked.
///
/// \param updatedChannels The channels that are updated.
///
- (void)channelCollection:(SBDGroupChannelCollection * _Nonnull)collection context:(SBDChannelContext * _Nonnull)context updatedChannels:(NSArray<SBDGroupChannel *> * _Nonnull)updatedChannels;
/// A callback when the channels are deleted.
/// \param collection The collection object.
///
/// \param context The context that represents the reason why the delegate is invoked.
///
/// \param deletedChannelURLs list of channel url that are deleted.
///
- (void)channelCollection:(SBDGroupChannelCollection * _Nonnull)collection context:(SBDChannelContext * _Nonnull)context deletedChannelURLs:(NSArray<NSString *> * _Nonnull)deletedChannelURLs;
@end


/// An object contains set of options to create a group channel
SWIFT_CLASS_NAMED("GroupChannelCreateParams")
@interface SBDGroupChannelCreateParams : NSObject
/// Represents the channel is to be updated.
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Determines the channel is super channel or not. Default is <code>false</code>
@property (nonatomic) BOOL isSuper;
/// Determines the channel is broadcast channel or not. Default is <code>false</code>
/// since:
/// 3.0.171
@property (nonatomic) BOOL isBroadcast;
/// Determines the channel is public channel or not. Default is <code>false</code>
@property (nonatomic) BOOL isPublic;
/// Determines the channel is distinct or not.
/// If <code>true</code>, the channel which has the same users is returned. Default is <code>false</code>
@property (nonatomic) BOOL isDistinct;
/// Determines the channel is ephemeral or not. Default is <code>false</code>
/// since:
/// 3.0.90
@property (nonatomic) BOOL isEphemeral;
/// Determines whether the public group channel is discoverable.
/// It is only for creating or updating a public group channel. If the value is <code>true</code> and <code>isPublic</code> is <code>false</code>, you will get an error from call-back of creating/updateing channel.
/// The default is <code>true</code>.
/// since:
/// 3.0.136
@property (nonatomic) BOOL isDiscoverable;
/// The boolean that can cause an error if any of the users is not valid when creating the channel.
/// If you have two valid users and <code>strict</code> is true, the channel is created successfully when you create
/// a channel with users. If one valid user, one invalid user, and <code>strict</code> are true, you will get an error
/// creating the channel. However, if you have one valid user, one invalid user, and <code>strict</code> is false,
/// you can create a channel without errors without a user.
/// since:
/// 3.0.148
@property (nonatomic) BOOL isStrict;
/// Custom type of group channel.
@property (nonatomic, copy) NSString * _Nullable customType;
/// Custom data of group channel.
@property (nonatomic, copy) NSString * _Nullable data;
/// Cover image url of group channel.
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// Cover image data of group channel.
@property (nonatomic, copy) NSData * _Nullable coverImage;
/// Name of group channel.
@property (nonatomic, copy) NSString * _Nullable name;
/// Channel’s operators’s user id.
/// since:
/// 3.0.89
@property (nonatomic, copy) NSArray<NSString *> * _Nullable operatorUserIds;
@property (nonatomic, copy) NSSet<NSString *> * _Nullable operatorUserIdSet;
/// User ids who will be invited to the channel
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIds;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull userIdSet;
/// A string that allows access to the public group channel. ONLY use for public group channel.
/// since:
/// 3.0.116
@property (nonatomic, copy) NSString * _Nullable accessCode;
/// A value that sets the message survival time in seconds. In the channel that is created or updated
/// with this option, the read messages are automatically deleted after a determined amount of time.
/// The default value is <code>-1</code> that represents the disappearing message is disabled.
/// note:
/// This feature is available in a 1-on-1 group channel.
/// since:
/// 3.0.172
@property (nonatomic) NSInteger messageSurvivalSeconds;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add user with User class to be member of the group channel.
/// \param user The user to be member of a group channel.
///
- (void)addUser:(SBDUser * _Nonnull)user;
/// Add user with user ID to be member of the group channel.
/// \param userId The user ID to be member of a group channel.
///
- (void)addUserId:(NSString * _Nonnull)userId;
/// Add users with User class array to be member of the group channel.
/// \param users The users to be member of a group channel.
///
- (void)addUsers:(NSArray<SBDUser *> * _Nonnull)users;
/// Add users with user ids to be member of the group channel.
/// \param userIds The user ids to be member of a group channel.
///
- (void)addUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Set operators with list of user instance.
/// since:
/// 3.0.89
/// \param operators The list of operators.
///
- (void)setOperators:(NSArray<SBDUser *> * _Nonnull)operators;
@property (nonatomic, readonly) BOOL hasCoverImageBinary;
@end


@interface SBDGroupChannelCreateParams (SWIFT_EXTENSION(SendbirdChat)) <NSCopying>
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>GroupChannelParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// The enum type for the hidden state of a group channel.
/// since:
/// 3.0.122
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelHiddenState, "GroupChannelHiddenState", open) {
/// Shows the channel is unhidden.
  SBDGroupChannelHiddenStateUnhidden = 0,
/// Shows the channel will be unhidden automatically when there is a new message in the channel.
  SBDGroupChannelHiddenStateHiddenAllowAutoUnhide = 1,
/// Shows the channel will not be unhidden automatically.
  SBDGroupChannelHiddenStateHiddenPreventAutoUnhide = 2,
};

/// The order type for <code>GroupChannelListQuery</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelListOrder, "GroupChannelListOrder", open) {
/// Chronological order for group channel.
  SBDGroupChannelListOrderChronological = 0,
/// Lastest last message order for group channel.
  SBDGroupChannelListOrderLatestLastMessage = 1,
/// Alphabetical name order for group channel.
  SBDGroupChannelListOrderChannelNameAlphabetical = 2,
/// Alphabetical value order of a selected key in meta data for group channel.
  SBDGroupChannelListOrderChannelMetaDataValueAlphabetical = 3,
};

enum SBDGroupChannelListQueryType : NSInteger;
enum SBDMemberStateFilter : NSInteger;
enum SBDGroupChannelSuperChannelFilter : NSInteger;
enum SBDGroupChannelPublicChannelFilter : NSInteger;
enum SBDUnreadChannelFilter : NSInteger;
@class SBDGroupChannelListQuerySearchField;

/// The <code>GroupChannelListQuery</code> class is a query class for getting the list of group channels.
/// The instance of this class is created by <code>createMyGroupChannelListQuery()</code> in <code>GroupChannel</code> class.
SWIFT_CLASS_NAMED("GroupChannelListQuery")
@interface SBDGroupChannelListQuery : NSObject
/// Determines channel list includes empty channel. Default is <code>true</code>
@property (nonatomic) BOOL includeEmptyChannel;
/// Determines channel list includes frozen channel. Default is <code>true</code>
/// since:
/// 3.0.182
@property (nonatomic) BOOL includeFrozenChannel;
/// Determines channel object of the list includes members list.
@property (nonatomic) BOOL includeMemberList;
/// Determines channel object of the list includes meta data property.
/// since:
/// 3.0.216
@property (nonatomic) BOOL includeMetaData;
/// Sets the order of the list. The order is defined in <code>GroupChannelListOrder</code>.
@property (nonatomic) enum SBDGroupChannelListOrder order;
/// Sets query type for <code>includeMemberList</code>.
@property (nonatomic) enum SBDGroupChannelListQueryType queryType;
/// Sets the member state filter.
@property (nonatomic) enum SBDMemberStateFilter memberStateFilter;
/// Sets <code>GroupChannel</code> URLs filter. <code>GroupChannel</code> list containing
/// only and exactly the passed <code>GroupChannel</code> URLs will be returned.
/// This does not cooperate with other filters.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable channelURLsFilter;
/// Sets to filter super channel. Default is <code>.all</code>
@property (nonatomic) enum SBDGroupChannelSuperChannelFilter superChannelFilter;
/// Sets to filter public channel.Default is <code>.all</code>
@property (nonatomic) enum SBDGroupChannelPublicChannelFilter publicChannelFilter;
/// Sets to filter channels by custom type that starts with.
@property (nonatomic, copy) NSString * _Nullable customTypeStartsWithFilter;
/// Sets the custom types filter. The custom types to search.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypesFilter;
/// Sets the filter with nickname. The group channels which have the member that has nickname
/// are returned by <code>loadNextPage:</code>(LIKE search).
@property (nonatomic, copy) NSString * _Nullable nicknameContainsFilter;
/// Sets the filter with user IDs. The group channels which have the members that contain user
/// IDs are returned by <code>loadNextPage:</code>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable userIdsIncludeFilter;
/// Sets the filter with user IDs. The group channels which have the members that have user
/// IDs are returned by <code>loadNextPage:</code>. The channels have the <code>userIds</code> members only.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIdsExactFilter;
/// Sets a filter to return only channels that contains the specified group channel name.
/// The channel name to search. The query will return the channels include <code>channelName</code>.
@property (nonatomic, copy) NSString * _Nullable channelNameContainsFilter;
/// Sets to filter channels by the unread messages. The default value is <code>.all</code>.
/// since:
/// 3.0.113
@property (nonatomic) enum SBDUnreadChannelFilter unreadChannelFilter;
/// Sets a key for ordering by value in the metadata. This is valid when the <code>order</code>
/// is <code>GroupChannelListOrder.channelMetaDataValueAlphabetical</code> only.
/// since:
/// 3.0.118
@property (nonatomic, copy) NSString * _Nullable metaDataOrderKeyFilter;
/// Searches for group channels with metadata containing an item with the specified value as its key
/// since:
/// 3.0.232
@property (nonatomic, copy) NSString * _Nullable metaDataKeyFilter;
/// Searches for group channels with metadata containing an item with the key specified by the metaDataKey
/// since:
/// 3.0.232
@property (nonatomic, copy) NSArray<NSString *> * _Nullable metaDataValuesFilter;
/// Searches for group channels with metadata containing an item with the key specified by the metaDataKey
/// and the values of that item start with the specified value
/// since:
/// 3.0.232
@property (nonatomic, copy) NSString * _Nullable metaDataValueStartsWithFilter;
/// Sets to filter channels by the hidden state. The default value is <code>ChannelHiddenStateFilter.unhiddenOnly</code>.
/// since:
/// 3.0.122
@property (nonatomic) enum SBDChannelHiddenStateFilter channelHiddenStateFilter;
/// The query property of the query specified by <code>setSearchFilterQuery:fields:</code>
/// since:
/// 3.0.144
@property (nonatomic, readonly, copy) NSString * _Nullable searchQuery;
/// The fields properties of the query specified by <code>setSearchFilterQuery:fields:</code>
/// since:
/// 3.0.144
@property (nonatomic, readonly, strong) SBDGroupChannelListQuerySearchField * _Nonnull searchFields;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use GroupChannel's `createMyGroupChannelListQuery`");
/// Sets the filter with user IDs.
/// The group channels which have the members that contain user IDs are returned by <code>loadNext:</code>.
/// \param userIds User IDs to search.
///
/// \param queryType Logical condition applied to filter. If you pass <code>GroupChannelListQueryTypeAnd</code>
/// to <code>queryType</code> and A, B to <code>userIds</code>, the channels whose members containing A and B will be returned.
/// If <code>GroupChannelListQueryTypeOr</code> is set, the members of the queried channels will be A or B.
///
- (void)setUserIdsIncludeFilter:(NSArray<NSString *> * _Nonnull)userIds queryType:(enum SBDGroupChannelListQueryType)queryType;
/// Sets the search query and search fields of the query specified a given query and a given fields.
/// note:
/// fields MUST be an array with <code>GroupChannelListQuerySearchField</code>.
/// since:
/// 3.0.144
/// \param query The query to request for <code>searchFields</code>.
///
/// \param fields The fields to request query for <code>searchQuery</code> that MUST be <code>GroupChannelListQuerySearchField</code>.
///
- (void)setSearchFilter:(NSString * _Nonnull)query fields:(SBDGroupChannelListQuerySearchField * _Nonnull)fields;
/// Sets meta data filter
/// note:
/// Using this method will reset <code>metaDataValueStartsWithFilter</code> property
/// \param key meta data key
///
/// \param values meta data values
///
- (void)setMetaDataFilterWithKey:(NSString * _Nonnull)key values:(NSArray<NSString *> * _Nonnull)values;
/// Sets meta data filter
/// note:
/// Using this method will reset <code>metaDataValuesFilter</code> property
/// \param key meta data key
///
/// \param value meta data values that starts with
///
- (void)setMetaDataFilterWithKey:(NSString * _Nonnull)key valueStartsWith:(NSString * _Nonnull)value;
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, SBError * _Nullable))completionHandler;
@end


@interface SBDGroupChannelListQuery (SWIFT_EXTENSION(SendbirdChat))
/// Validates the given channel object is belonged to this query object
/// \param channel a group channel
///
///
/// returns:
/// <code>true</code> if its belonged, otherwise <code>false</code>
- (BOOL)belongsToChannel:(SBDGroupChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannelListQuery (SWIFT_EXTENSION(SendbirdChat))
/// Gets comparator
///
/// returns:
/// <code>SBObjectComparator</code> object
- (NSComparisonResult (^ _Nonnull)(id _Nullable, id _Nullable))comparator SWIFT_WARN_UNUSED_RESULT;
/// Compares two channels
/// \param objc1 First channel
///
/// \param objc2 Second channel
///
///
/// returns:
/// <code>ComparisonResult</code> value
- (NSComparisonResult)orderBetweenObjectWithObj1:(id _Nullable)obj1 obj2:(id _Nullable)obj2 SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannelListQuery (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>GroupChannelListQuery</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannelListQuery (SWIFT_EXTENSION(SendbirdChat))
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>GroupChannelListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDGroupChannelListQuery * _Nonnull)setupFor:(SBDGroupChannelListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// Filter types to query with <code>GroupChannelListQuery</code>. You can combine search fields to query.
/// used for <code>setSearchFilter(_:fields:)</code> of <code>GroupChannelListQuery</code>
/// since:
/// 3.0.144
SWIFT_CLASS_NAMED("GroupChannelListQuerySearchField")
@interface SBDGroupChannelListQuerySearchField : NSObject
@property (nonatomic) NSUInteger rawValue;
- (nonnull instancetype)initWithRawValue:(NSUInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
/// filter type to query for member nickname
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDGroupChannelListQuerySearchField * _Nonnull memberNickname;)
+ (SBDGroupChannelListQuerySearchField * _Nonnull)memberNickname SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDGroupChannelListQuerySearchField * _Nonnull channelName;)
+ (SBDGroupChannelListQuerySearchField * _Nonnull)channelName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFields:(NSArray<SBDGroupChannelListQuerySearchField *> * _Nonnull)fields;
@property (nonatomic, readonly) NSUInteger hash;
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(SBDGroupChannelListQuerySearchField * _Nonnull)other;
- (void)formIntersection:(SBDGroupChannelListQuerySearchField * _Nonnull)other;
- (void)formSymmetricDifference:(SBDGroupChannelListQuerySearchField * _Nonnull)other;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelListQueryType, "GroupChannelListQueryType", open) {
  SBDGroupChannelListQueryTypeAnd = 0,
  SBDGroupChannelListQueryTypeOr = 1,
};

enum SBDGroupChannelOperatorFilter : NSInteger;
enum SBDGroupChannelMutedMemberFilter : NSInteger;
enum SBDMemberListOrder : NSInteger;

/// The <code>GroupChannelMemberListQuery</code> class is a query class for getting the list member in group channels.
/// The instance of this class is created by <code>createMemberListQuery()</code> in <code>GroupChannel</code> class.
SWIFT_CLASS_NAMED("GroupChannelMemberListQuery")
@interface SBDGroupChannelMemberListQuery : NSObject
/// Filters members of nickname that starts with.
/// since:
/// 3.0.102
@property (nonatomic, copy) NSString * _Nullable nicknameStartsWithFilter;
/// Sets a filter to query operators.
/// since:
/// 3.0.89
@property (nonatomic) enum SBDGroupChannelOperatorFilter operatorFilter;
/// Sets a filter to query muted member list.
/// since:
/// 3.0.89
@property (nonatomic) enum SBDGroupChannelMutedMemberFilter mutedMemberFilter;
/// Sets a filter to query member list with member state.
@property (nonatomic) enum SBDMemberStateFilter memberStateFilter;
/// Sets how the query result should be ordered.
/// If the <code>order</code> is <code>.nicknameAlphabetical</code>, the result will be ordered by the nickname in
/// alphabetical order. If the <code>order</code> is <code>.operatorThenMemberNicknameAlphabetical</code>,
/// then the result will contain the operators first, and then the members. The two groups (operators
/// and members) will be ordered by the nickname in alphabetical order. The default value is <code>.nicknameAlphabetical</code>.
/// since:
/// 3.0.198
@property (nonatomic) enum SBDMemberListOrder order;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use GroupChannel's `createMemberListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDMember *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>GroupChannelMemberListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDGroupChannelMemberListQuery * _Nonnull)setupFor:(SBDGroupChannelMemberListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

/// Filter operators in group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelMutedMemberFilter, "GroupChannelMutedMemberFilter", open) {
/// Without filter.
  SBDGroupChannelMutedMemberFilterAll = 0,
/// Filter muted members.
  SBDGroupChannelMutedMemberFilterMuted = 1,
/// Filter members not muted.
  SBDGroupChannelMutedMemberFilterUnmuted = 2,
};

/// Filter operators in group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelOperatorFilter, "GroupChannelOperatorFilter", open) {
/// Without filter.
  SBDGroupChannelOperatorFilterAll = 0,
/// Filter operators.
  SBDGroupChannelOperatorFilterOperator = 1,
/// Filter members except operators.
  SBDGroupChannelOperatorFilterNonOperator = 2,
};

/// Filter public group channel or private one in group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelPublicChannelFilter, "GroupChannelPublicChannelFilter", open) {
/// Without filter
  SBDGroupChannelPublicChannelFilterAll = 0,
/// Filter public group channel.
  SBDGroupChannelPublicChannelFilterPublic = 1,
/// Filter private group channel.
  SBDGroupChannelPublicChannelFilterPrivate = 2,
};

/// The options to choose which push notification for the current user to receive in a group channel.
/// since:
/// 3.0.128
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelPushTriggerOption, "GroupChannelPushTriggerOption", open) {
/// Follow the push trigger of current user. See <code>PushTriggerOption</code>.
  SBDGroupChannelPushTriggerOptionDefault = 0,
/// Receive all of remote push notification.
  SBDGroupChannelPushTriggerOptionAll = 1,
/// Do NOT receive any remote push notification.
  SBDGroupChannelPushTriggerOptionOff = 2,
/// Receive only mentioned messages’s notification.
  SBDGroupChannelPushTriggerOptionMentionOnly = 3,
};

/// Channel filter for super mode in group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelSuperChannelFilter, "GroupChannelSuperChannelFilter", open) {
/// Without filter
  SBDGroupChannelSuperChannelFilterAll = 0,
/// Filter super group channel.
  SBDGroupChannelSuperChannelFilterSuper = 1,
/// Filter non-super group channel.
  SBDGroupChannelSuperChannelFilterNonSuper = 2,
  SBDGroupChannelSuperChannelFilterBroadcastOnly = 3,
};


/// An object contains set of options to retrieve total unread channel count
SWIFT_CLASS_NAMED("GroupChannelTotalUnreadChannelCountParams")
@interface SBDGroupChannelTotalUnreadChannelCountParams : NSObject
/// Array filter of channel custom types.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypesFilter;
/// The enumerator filter of super channel.
@property (nonatomic) enum SBDGroupChannelSuperChannelFilter superChannelFilter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object contains a set of options to get total unread message count from a group channel
SWIFT_CLASS_NAMED("GroupChannelTotalUnreadMessageCountParams")
@interface SBDGroupChannelTotalUnreadMessageCountParams : NSObject
/// The array filter of channel custom types.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable channelCustomTypesFilter;
/// The enumerator filter of super channel.
@property (nonatomic) enum SBDGroupChannelSuperChannelFilter superChannelFilter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object contains a set of options to update a group channel
SWIFT_CLASS_NAMED("GroupChannelUpdateParams")
@interface SBDGroupChannelUpdateParams : NSObject
/// Channel name
@property (nonatomic, copy) NSString * _Nullable name;
/// Channel cover image url
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// Channel cover image data
@property (nonatomic, copy) NSData * _Nullable coverImage;
/// Channel data
@property (nonatomic, copy) NSString * _Nullable data;
/// Channel custom type
@property (nonatomic, copy) NSString * _Nullable customType;
/// Determines whether the channel is public or not
@property (nonatomic) BOOL isPublic;
/// set true if channel need to be updated as distinct
@property (nonatomic) BOOL isDistinct;
/// set true if this channel is discoverable
@property (nonatomic) BOOL isDiscoverable;
/// A string that allows access to the public group channel. ONLY use for public group channel.
@property (nonatomic, copy) NSString * _Nullable accessCode;
/// channel’s operator user ids
@property (nonatomic, copy) NSArray<NSString *> * _Nullable operatorUserIds;
@property (nonatomic, copy) NSSet<NSString *> * _Nullable operatorUserIdSet;
/// A value that sets the message survival time in seconds.
@property (nonatomic) NSInteger messageSurvivalSeconds;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Set operators with list of user instance.
/// \param operators The list of operators.
///
- (void)setOperators:(NSArray<SBDUser *> * _Nonnull)operators;
@end


SWIFT_CLASS("_TtC12SendbirdChat10HTTPClient")
@interface HTTPClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLSession;
@class NSURLSessionDataTask;
@class NSURLSessionTask;

@interface HTTPClient (SWIFT_EXTENSION(SendbirdChat)) <NSURLSessionDataDelegate>
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
@end


/// Represents the parameters to check the gap.
/// <ul>
///   <li>
///     Since 3.1.0
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("HugeGapParams")
@interface SBDHugeGapParams : NSObject
/// Channel URL.
@property (nonatomic, readonly, copy) NSString * _Nonnull channelURL;
/// Message list params object.
@property (nonatomic, readonly, strong) SBDMessageListParams * _Nonnull params;
/// The start timestamp for the previous direction.
@property (nonatomic, readonly) int64_t prevStartTs;
/// The end timestamp for the previous direction.
@property (nonatomic, readonly) int64_t prevEndTs;
/// The count of the previous messages.
@property (nonatomic, readonly) NSInteger prevCount;
/// The start timestamp for the next direction.
@property (nonatomic, readonly) int64_t nextStartTs;
/// The end timestamp for the next direction.
@property (nonatomic, readonly) int64_t nextEndTs;
/// The count of the next messages.
@property (nonatomic, readonly) NSInteger nextCount;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL params:(SBDMessageListParams * _Nonnull)params prevStartTs:(int64_t)prevStartTs prevEndTs:(int64_t)prevEndTs prevCount:(NSInteger)prevCount nextStartTs:(int64_t)nextStartTs nextEndTs:(int64_t)nextEndTs nextCount:(NSInteger)nextCount OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDLogLevel;

/// An object to initialize SendbirdChat
/// since:
/// 4.0.0
SWIFT_CLASS_NAMED("InitParams")
@interface SBDInitParams : NSObject
/// Application id
@property (nonatomic, copy) NSString * _Nonnull applicationId;
/// Determines to use local caching
@property (nonatomic) BOOL isLocalCachingEnabled;
/// Loglevel
@property (nonatomic, strong) SBDLogLevel * _Nonnull logLevel;
/// Host app version
@property (nonatomic, copy) NSString * _Nullable appVersion;
/// Parameter constructor
/// \param applicationId Sendbird Application ID
///
/// \param isLocalCachingEnabled <code>true</code> if using local caching
///
/// \param logLevel log level
///
/// \param appVersion host app version
///
- (nonnull instancetype)initWithApplicationId:(NSString * _Nonnull)applicationId isLocalCachingEnabled:(BOOL)isLocalCachingEnabled logLevel:(SBDLogLevel * _Nonnull)logLevel appVersion:(NSString * _Nullable)appVersion OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Log level
SWIFT_CLASS_NAMED("LogLevel")
@interface SBDLogLevel : NSObject
@property (nonatomic) NSUInteger rawValue;
- (nonnull instancetype)initWithRawValue:(NSUInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDLogLevel * _Nonnull none;)
+ (SBDLogLevel * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDLogLevel * _Nonnull error;)
+ (SBDLogLevel * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDLogLevel * _Nonnull warning;)
+ (SBDLogLevel * _Nonnull)warning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDLogLevel * _Nonnull info;)
+ (SBDLogLevel * _Nonnull)info SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Parameter constructor
/// \param levels set of <code>LogLevel</code>
///
- (nonnull instancetype)initWithLevels:(NSArray<SBDLogLevel *> * _Nonnull)levels;
/// Union current value with given other <code>LogLevel</code>
/// \param other <code>LogLevel</code> object
///
- (void)formUnion:(SBDLogLevel * _Nonnull)other;
/// Intersect current value with given other <code>LogLevel</code>
/// \param other <code>LogLevel</code> object
///
- (void)formIntersection:(SBDLogLevel * _Nonnull)other;
/// Symmetric difference on current value with given other <code>LogLevel</code>
/// \param other <code>LogLevel</code> object
///
- (void)formSymmetricDifference:(SBDLogLevel * _Nonnull)other;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum SBDUserConnectionStatus : NSInteger;

/// The <code>User</code> class represents a user. The user is identified by the <code>userId</code>, so the <code>userId</code> has
/// to be unique. The <code>userId</code>, <code>nickname</code> and <code>profileURL</code> are valid in every <code>User</code>
/// instance, however the <code>connectionStatus</code> and <code>lastSeenAt</code> is valid in <code>User</code> instance
/// from <code>UserListQuery</code>.
SWIFT_CLASS_NAMED("User")
@interface SBDUser : NSObject
/// User ID. This has to be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// User nickname.
@property (nonatomic, copy) NSString * _Nullable nickname;
/// Profile image url.
@property (nonatomic, readonly, copy) NSString * _Nullable profileURL;
/// Original profile image url.
@property (nonatomic, readonly, copy) NSString * _Nullable originalProfileURL;
/// The profile image URL without the <code>ekey</code>.
/// since:
/// 3.0.194
@property (nonatomic, copy) NSString * _Nullable plainProfileImageURL;
/// User connection status. This is defined in <code>UserConnectionStatus</code>.
@property (nonatomic) enum SBDUserConnectionStatus connectionStatus;
/// The lastest time when the user became offline.
@property (nonatomic) int64_t lastSeenAt;
/// Represents the user is activated. This property is changed by the <a href="https://docs.sendbird.com/platform#user_3_update_a_user">Platform API</a>
@property (nonatomic, readonly) BOOL isActive;
/// Discovery key for friend
@property (nonatomic, readonly, copy) NSString * _Nullable friendDiscoveryKey;
/// User name for friend
@property (nonatomic, readonly, copy) NSString * _Nullable friendName;
/// User’s preferred language. Used for translating messages.
/// since:
/// 3.0.159
@property (nonatomic, copy) NSArray<NSString *> * _Nullable preferredLanguages;
/// Meta data.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metaData;
@property (nonatomic) BOOL requireAuth;
@property (nonatomic, copy) NSString * _Nullable eKey;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth OBJC_DESIGNATED_INITIALIZER;
- (void)updateWith:(SBDUser * _Nonnull)user;
- (void)updateUserInfoWith:(NSDictionary<NSString *, id> * _Nullable)dictionary;
@property (nonatomic, readonly) BOOL isCurrentUser;
- (SBDSender * _Nullable)asSenderWithChannel:(SBDBaseChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDRestrictionInfo;

/// Represents a member in <code>GroupChannel</code>
SWIFT_CLASS_NAMED("Member")
@interface SBDMember : SBDUser
/// The state for invitation. The values of the property are <code>invited</code> and <code>joined</code>.
/// The <code>invited</code> means that the user doesn’t accept the invitation yet and the <code>joined</code>
/// means that the user accepted the invitation manually or automatically.
@property (nonatomic) enum SBDMemberState state;
/// Whether this member has been blocked by me
@property (nonatomic) BOOL isBlockedByMe;
/// Whether this member has blocked me
@property (nonatomic) BOOL isBlockingMe;
/// The muted state of the member in the channel.
/// since:
/// 3.0.198
@property (nonatomic) BOOL isMuted;
/// The role of current user in the channel.
/// since:
/// 3.0.174
@property (nonatomic) enum SBDRole role;
/// Restriction information of a muted member.
/// This property is nil for an unmuted member.
/// <ul>
///   <li>
///     Since 3.0.236
///   </li>
/// </ul>
@property (nonatomic, strong) SBDRestrictionInfo * _Nullable restrictionInfo;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth SWIFT_UNAVAILABLE;
@end


@interface SBDMember (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>Member</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDMember (SWIFT_EXTENSION(SendbirdChat))
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>Member</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end

/// The order type for member list query.
/// since:
/// 3.0.198
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMemberListOrder, "MemberListOrder", open) {
  SBDMemberListOrderNicknameAlphabetical = 0,
  SBDMemberListOrderOperatorThenMemberNicknameAlphabetical = 1,
};

/// Member state in group channel.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMemberState, "MemberState", open) {
/// Filter of joined members in a group channel.
  SBDMemberStateJoined = 0,
/// Filter of invited members in a group channel.
  SBDMemberStateInvited = 1,
/// Filter of members neither joined or invited in a group channel.
  SBDMemberStateNone = 2,
};

/// Member state filter for group channel list query and group channel count
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMemberStateFilter, "MemberStateFilter", open) {
/// Filter of all member states.
  SBDMemberStateFilterAll = 0,
/// Filter of joined state only.
  SBDMemberStateFilterJoinedOnly = 1,
/// Filter of invited state only. This contains <code>.invitedByFriend</code>and <code>invitedByNonFriend</code>.
  SBDMemberStateFilterInvitedOnly = 2,
/// Filter of invited by friend state only.
  SBDMemberStateFilterInvitedByFriend = 3,
/// Filter of invited by non-friend state only.
  SBDMemberStateFilterInvitedByNonFriend = 4,
};

/// The enum type to represent target type of mention.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMentionType, "MentionType", open) {
  SBDMentionTypeUsers = 0,
  SBDMentionTypeChannel = 1,
};

enum SBDReplyType : NSInteger;

/// An object contains set of options for message change logs.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("MessageChangeLogsParams")
@interface SBDMessageChangeLogsParams : NSObject <NSCopying>
/// Determines whether to include the metaarray information of the updated messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeMetaArray;
/// Determines whether to include the reactions of the updated messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the updated messages in the results when the results contain parent messages.
/// note:
/// The default value is <code>false</code>.
@property (nonatomic) BOOL includeThreadInfo;
/// Determines whether to include poll information of the message in the results. Default is <code>false</code>
@property (nonatomic) BOOL includePollDetails;
/// Determines wheter to include information on parent message. Default is <code>false</code>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Determines which reply types to include in the results. Default is <code>.none</code>
@property (nonatomic) enum SBDReplyType replyType;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Default parameter constructor
- (nonnull instancetype)initWithIncludeMetaArray:(BOOL)includeMetaArray includeReactions:(BOOL)includeReactions includeThreadInfo:(BOOL)includeThreadInfo includePollDetails:(BOOL)includePollDetails includeParentMessageInfo:(BOOL)includeParentMessageInfo replyType:(enum SBDReplyType)replyType OBJC_DESIGNATED_INITIALIZER;
/// Creates <code>PreviousMessageListQuery</code> from a given <code>PreviousMessageListQuery</code> instance.
/// since:
/// 3.0.185
/// \param query previous message list query
///
///
/// returns:
/// A created instance of <code>MessageChangeLogsParams</code>
+ (SBDMessageChangeLogsParams * _Nonnull)createWithPreviousMessageListQuery:(SBDPreviousMessageListQuery * _Nullable)query SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>MessageChangeLogParams</code> from a given <code>MessageListParams</code> instance.
/// since:
/// 3.0.185
/// \param params previous message list query
///
///
/// returns:
/// A created instance of <code>MessageChangeLogsParams</code>
+ (SBDMessageChangeLogsParams * _Nonnull)createWithMessageListParams:(SBDMessageListParams * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageChangeLogsParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@protocol SBDMessageCollectionDelegate;
enum SBDMessageCollectionInitPolicy : NSInteger;

/// An object that accesses the cache for the messages.
/// since:
/// 3.1.0
SWIFT_CLASS_NAMED("MessageCollection")
@interface SBDMessageCollection : SBDBaseCollection
@property (nonatomic, weak) id <SBDMessageCollectionDelegate> _Nullable delegate;
/// Message collection delegate.
@property (nonatomic) int64_t startingPoint;
/// If <code>true</code>, there may be the messages on the next page.
@property (nonatomic) BOOL hasNext;
/// If <code>true</code>, there may be the messages on the previous page.
@property (nonatomic) BOOL hasPrevious;
/// If <code>true</code>, the message collection hasn’t been invalidated by the <code>dispose</code> method.
@property (nonatomic) BOOL isLive;
/// Message list params object for the message collection.
@property (nonatomic, strong) SBDMessageListParams * _Nonnull params;
/// The timestamp of the oldest synced message in the message collection.
@property (nonatomic) int64_t oldestSyncedTs;
/// The timestamp of the latest synced message in the message collection.
@property (nonatomic) int64_t latestSyncedTs;
/// Returns the succeeded messages that are already loaded in memory.
@property (nonatomic, readonly, copy) NSArray<SBDBaseMessage *> * _Nonnull succeededMessages;
/// The channel object that the message collection has.
/// since:
/// 3.0.227
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nonnull channel;
/// The token that the method of the message changelogs Returns.
@property (nonatomic, copy) NSString * _Nullable lastSyncedToken;
/// <code>true</code> if starting message collection is completed.
@property (nonatomic) BOOL initCompleted;
- (BOOL)initCompleted SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Returns the pending messages that are already loaded in memory.
@property (nonatomic, readonly, copy) NSArray<SBDBaseMessage *> * _Nonnull pendingMessages;
/// Returns the failed messages that are already loaded in memory.
@property (nonatomic, readonly, copy) NSArray<SBDBaseMessage *> * _Nonnull failedMessages;
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull queue;
@property (nonatomic, readonly, copy) NSString * _Nonnull delegateKey;
/// Starts the message collection with the policy. The result of the
/// \param initPolicy The policy for the message collection.
///
/// \param cacheResultHandler The callback to call when the messages are loaded from the cache.
/// The <code>messages</code> is the messages that are loaded from the cache. The <code>error</code> will be returned when the loading message failed.
///
/// \param apiResultHandler The callback to call when the messages are loaded from the server.
/// The <code>messages</code> is the messages that are loaded from the server. The <code>error</code> will be returned when the loading message failed.
///
- (void)startCollectionWithInitPolicy:(enum SBDMessageCollectionInitPolicy)initPolicy cacheResultHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))cacheResultHandler apiResultHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))apiResultHandler;
/// Invalidates the object.
- (void)dispose;
/// Loads messages of the next page.
/// \param completionHandler The callback to call when the load is complete. The <code>error</code> will be
/// returned when the loading message failed.
///
- (void)loadNextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Loads messages of the previous page.
/// \param completionHandler The callback to call when the load is complete. 
/// The <code>error</code> will be returned when the loading message failed.
///
- (void)loadPreviousWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Removes failed messages from DB.
/// <ul>
///   <li>
///     Parameters messages The failed messages to be removed from DB.
///   </li>
/// </ul>
/// \param completionHandler The callback to call when the method is complete. 
/// The <code>error</code> will be returned when the removing failed messages failed.
///
- (void)removeFailedWithMessages:(NSArray<SBDBaseMessage *> * _Nonnull)messages completionHandler:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Removes all failed messages.
/// \param completionHandler The callback to call when the method is complete. 
/// The <code>error</code> will be returned when the removing failed messages failed.
///
- (void)removeAllFailedWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)didSucceedReconnection;
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChangeNotification;)
+ (NSNotificationName _Nonnull)ChangeNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)notifyDataSetChanged;
- (void)notifyEventForUpdateWithSource:(enum SBDCollectionEventSource)source messages:(NSArray<SBDBaseMessage *> * _Nonnull)messages;
- (void)notifyEventForAddWithSource:(enum SBDCollectionEventSource)source messages:(NSArray<SBDBaseMessage *> * _Nonnull)messages;
- (void)notifyEventForDeleteWithSource:(enum SBDCollectionEventSource)source messages:(NSArray<SBDBaseMessage *> * _Nonnull)messages;
- (void)notifyEventForChannelChangedWithSource:(enum SBDCollectionEventSource)source channel:(SBDGroupChannel * _Nonnull)channel;
- (void)notifyEventForChannelChangedWithSource:(enum SBDCollectionEventSource)source channelURL:(NSString * _Nonnull)channelURL;
- (void)notifyEventForHugeGap;
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
- (NSError * _Nullable)fetchMessagesFromCached SWIFT_WARN_UNUSED_RESULT;
- (void)requestChangeLogs;
- (void)checkHugeGapAndFill;
- (BOOL)isCurrentChannelWithChannel:(SBDBaseChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
- (BOOL)upsertSucceeded:(SBDBaseMessage * _Nonnull)message;
- (BOOL)upsertPending:(SBDBaseMessage * _Nonnull)message;
- (BOOL)upsertFailed:(SBDBaseMessage * _Nonnull)message;
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)channel:(SBDBaseChannel * _Nonnull)channel new:(SBDBaseMessage * _Nullable)new_ deleted:(SBDBaseMessage * _Nullable)deleted;
- (void)channel:(SBDBaseChannel * _Nonnull)channel failed:(SBDBaseMessage * _Nonnull)failed source:(enum SBDCollectionEventSource)source;
- (void)channel:(SBDBaseChannel * _Nonnull)channel canceled:(SBDBaseMessage * _Nonnull)canceled;
- (void)channel:(SBDBaseChannel * _Nonnull)channel pending:(SBDBaseMessage * _Nonnull)pending;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didUpdateMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender messageWasDeleted:(int64_t)messageId;
- (void)channel:(SBDBaseChannel * _Nonnull)sender updatedReaction:(SBDReactionEvent * _Nonnull)reactionEvent;
- (void)channel:(SBDBaseChannel * _Nonnull)channel didUpdateThreadInfo:(SBDThreadInfoUpdateEvent * _Nonnull)threadInfoUpdateEvent;
- (void)channelWasChanged:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDGroupChannel * _Nonnull)sender didReceiveInvitation:(NSArray<SBDUser *> * _Nullable)invitees inviter:(SBDUser * _Nullable)inviter;
- (void)channelDidUpdateDeliveryReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateReadReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidChangeMemberCount:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasMuted:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasUnmuted:(SBDUser * _Nonnull)user;
- (void)channelWasFrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasUnfrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasHidden:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateOperators:(SBDBaseChannel * _Nonnull)sender;
- (void)channelDidUpdateTypingStatus:(SBDGroupChannel * _Nonnull)sender;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidLeave:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasBanned:(SBDUser * _Nonnull)user;
- (void)channel:(SBDGroupChannel * _Nonnull)sender didDeclineInvitation:(SBDUser * _Nonnull)invitee inviter:(SBDUser * _Nullable)inviter;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidJoin:(SBDUser * _Nonnull)user;
- (void)channelWasDeleted:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMention:(SBDBaseMessage * _Nonnull)message;
@end

@class SBDMessageContext;

/// Methods that are invoked when the event of the message collection occurs.
/// since:
/// 3.1.0
SWIFT_PROTOCOL_NAMED("MessageCollectionDelegate")
@protocol SBDMessageCollectionDelegate
@optional
/// Invoked when the messages are added.
/// \param collection Message collection object.
///
/// \param context The reason why the messages are added.
///
/// \param channel The channel that has the messages.
///
/// \param addedMessages Messages to be added.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context channel:(SBDGroupChannel * _Nonnull)channel addedMessages:(NSArray<SBDBaseMessage *> * _Nonnull)addedMessages;
/// Invoked when the message are updated.
/// \param collection Message collection object.
///
/// \param context The reason why the messages are updated.
///
/// \param channel The channel that has the messages.
///
/// \param updatedMessages Messages to be updated.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context channel:(SBDGroupChannel * _Nonnull)channel updatedMessages:(NSArray<SBDBaseMessage *> * _Nonnull)updatedMessages;
/// Invoked when the message are deleted.
/// \param collection Message collection object.
///
/// \param context The reason why the messages are deleted.
///
/// \param channel The channel that has the messages.
///
/// \param deletedMessages Messages to be deleted.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context channel:(SBDGroupChannel * _Nonnull)channel deletedMessages:(NSArray<SBDBaseMessage *> * _Nonnull)deletedMessages;
/// Invoked when the channel that has the message collection is changed.
/// \param collection Message collection object.
///
/// \param context The reason why the channel are changed.
///
/// \param updatedChannel The channel that has the message collection has.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context updatedChannel:(SBDGroupChannel * _Nonnull)updatedChannel;
/// Invoked when the channel that has the message collection is deleted.
/// \param collection Message collection object.
///
/// \param context The reason why the channel are deleted.
///
/// \param channelURL Channel URL that has been deleted.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context deletedChannel:(NSString * _Nonnull)channelURL;
/// Invoked when the huge gap has been detected.
/// \param collection Message collection object.
///
- (void)didDetectHugeGap:(SBDMessageCollection * _Nonnull)collection;
@end

/// The policy for the message collection initialization.
/// since:
/// 3.0.227
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMessageCollectionInitPolicy, "MessageCollectionInitPolicy", open) {
/// Caches will be replaced by api result
  SBDMessageCollectionInitPolicyCacheAndReplaceByApi = 0,
};


/// Represents what happened to the messages.
/// since:
/// 3.1.0
SWIFT_CLASS_NAMED("MessageContext")
@interface SBDMessageContext : NSObject
/// Event source
@property (nonatomic, readonly) enum SBDCollectionEventSource source;
/// Message sending status
@property (nonatomic, readonly) enum SBDMessageSendingStatus sendingStatus;
/// Initializes with the message source.
/// <ul>
///   <li>
///     Returns CollectionEventSource object.
///   </li>
/// </ul>
/// \param source Message source.
///
/// \param sendingStatus Message sending status.
///
- (nonnull instancetype)initWithSource:(enum SBDCollectionEventSource)source sendingStatus:(enum SBDMessageSendingStatus)sendingStatus OBJC_DESIGNATED_INITIALIZER;
/// Checks whether the context is from an event or not.
///
/// returns:
/// <code>true</code> if the context is from an event.
@property (nonatomic, readonly) BOOL fromEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SBDMessageTypeFilter : NSInteger;

/// An object contains set of options for get message methods
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("MessageListParams")
@interface SBDMessageListParams : NSObject <NSCopying>
/// The number of messages to retrieve that were sent before the specified timestamp or message ID. Default is 20
@property (nonatomic) NSInteger previousResultSize;
/// The number of messages to retrieve that were sent after the specified timestamp or message ID. Default is 0
@property (nonatomic) NSInteger nextResultSize;
/// Determines whether to include the messages with the matching timestamp or message ID in the results. Default is <code>false</code>
@property (nonatomic) BOOL isInclusive;
/// Determines whether to sort the retrieved messages in reverse order. If <code>false</code>, the results are in ascending order.  Default is <code>false</code>
@property (nonatomic) BOOL reverse;
/// Restricts the search scope only to retrieve the messages with the specified message type. Default is <code>.all</code>
@property (nonatomic) enum SBDMessageTypeFilter messageType;
/// Restricts the search scope only to retrieve the messages with the specified custom message type.
/// When the custom type filtering is not needed, the value should be set to <code>nil</code>.
/// If the <code>customTypes</code> is set, this property is ignored.
@property (nonatomic, copy) NSString * _Nullable customType;
/// Restricts the search scope only to retrieve the messages sent by the users with the specified user IDs.
/// When the user ID filtering is not needed, the value should be set to <code>nil</code>.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable senderUserIds;
/// Determines whether to include the metaarray information of the messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeMetaArray;
/// Determines whether to include the reactions to the messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the messages in the results when the results contain root messages.
/// note:
/// The default value is <code>false</code>.
@property (nonatomic) BOOL includeThreadInfo;
/// Determines whether to include poll information in the message. Default is <code>false</code>
@property (nonatomic) BOOL includePollDetails;
/// Determines whether to include parent message info. Default is <code>false</code>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Determines which reply types to include. Default is <code>.none</code>
@property (nonatomic) enum SBDReplyType replyType;
/// Determines whether to include only messages from the subChannel to which you belong in the results. Default is <code>false</code>
/// warning:
/// This value is only used in open channels.
/// since:
/// 3.0.204
@property (nonatomic) BOOL showSubChannelMessagesOnly;
/// Restricts the search scope only to retrieve the messages with the multiple specified custom message
/// types. When the custom type filtering is not needed, the value should be set to <code>nil</code>.
/// since:
/// 3.0.213
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypes;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Parameter constructor
- (nonnull instancetype)initWithPreviousResultSize:(NSInteger)previousResultSize nextResultSize:(NSInteger)nextResultSize isInclusive:(BOOL)isInclusive reverse:(BOOL)reverse messageType:(enum SBDMessageTypeFilter)messageType customType:(NSString * _Nullable)customType senderUserIds:(NSArray<NSString *> * _Nullable)senderUserIds includeMetaArray:(BOOL)includeMetaArray includeReactions:(BOOL)includeReactions includeThreadInfo:(BOOL)includeThreadInfo includePollDetails:(BOOL)includePollDetails includeParentMessageInfo:(BOOL)includeParentMessageInfo replyType:(enum SBDReplyType)replyType showSubChannelMessagesOnly:(BOOL)showSubChannelMessagesOnly customTypes:(NSArray<NSString *> * _Nullable)customTypes OBJC_DESIGNATED_INITIALIZER;
/// Checks whether given message is belonged to this params
/// \param message <code>BaseMessage</code> instance
///
///
/// returns:
/// <code>true</code> if it is belonged, otherwise <code>false</code>
- (BOOL)belongsTo:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Checks whether the given params is belonged to this object
/// \param params <code>BaseMessageCreateParams</code> (either user or file) instance
///
///
/// returns:
/// <code>true</code> if the given params is belonged to this object, otherwise <code>false</code>
- (BOOL)belongsToMessageParams:(SBDBaseMessageCreateParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageListParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// The <code>MessageMetaArray</code> instance has a string type of key and an array type of value.
/// The value consists of a string.
/// It usually can be used for ‘vote’ or ‘reaction’ for the message.
SWIFT_CLASS_NAMED("MessageMetaArray")
@interface SBDMessageMetaArray : NSObject <NSCopying>
/// A string type of key.
/// since:
/// 3.0.148
@property (nonatomic, copy) NSString * _Nonnull key;
/// The value consists of a string.
/// The value guarantees de-duplicated string.
/// since:
/// 3.0.148
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull value;
/// Initializes an message meta array with the given key and an empty array of the value.
/// since:
/// 3.0.148
/// \param key A string type of key.
///
///
/// returns:
/// Message meta array instance.
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key;
/// Initializes an message meta array with the given key and the given value.
/// since:
/// 3.0.148
/// \param key A string type of key.
///
/// \param value The value consists of a string.
///
///
/// returns:
/// Message meta array instance.
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSArray<NSString *> * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
/// Adds an set type of the value to the receiver’s value field.
/// since:
/// 3.0.148
/// \param value String set.
///
- (void)addValue:(NSSet<NSString *> * _Nonnull)value;
/// Adds an array type of the value to the receiver’s value field.
/// since:
/// 3.0.148
/// \param array String array.
///
- (void)addValueWithArray:(NSArray<NSString *> * _Nonnull)array;
/// Removes an set type of the value from the receiver’s value field.
/// note:
/// Nonexistent string value are not ignored.
/// since:
/// 3.0.148
/// \param value String set.
///
- (void)removeValue:(NSSet<NSString *> * _Nonnull)value;
/// Removes an array type of the value from the receiver’s value field.
/// note:
/// Nonexistent string value are not ignored.
/// since:
/// 3.0.148
/// \param array String array.
///
- (void)removeValueWithArray:(NSArray<NSString *> * _Nonnull)array;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDMessageMetaArray (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageMetaArray</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDMessageMetaArray (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>MessageMetaArray</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains set of options to retrieve a message.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("MessageRetrievalParams")
@interface SBDMessageRetrievalParams : NSObject <NSCopying>
/// Specifies the URL of the channel to retrieve the message.
@property (nonatomic, copy) NSString * _Nonnull channelURL;
/// Specifies the type of the channel.
@property (nonatomic) enum SBDChannelType channelType;
/// Specifies the unique ID of the message to retrieve.
@property (nonatomic) int64_t messageId;
/// Determines whether the metaarray of the message is included in the results.
@property (nonatomic) BOOL includeMetaArray;
/// Determines wheter to include reactions in the results. Default is <code>false</code>
/// since:
/// 3.0.237
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the message when it is a parent message. Default is <code>false</code>
@property (nonatomic) BOOL includeThreadInfo;
/// Determines whether to include poll information of the message in the results. Default is <code>false</code>
/// <ul>
///   <li>
///     Since 3.0.232
///   </li>
/// </ul>
@property (nonatomic) BOOL includePollDetails;
/// Determines wheter to include information on parent message. Default is <code>false</code>
/// <ul>
///   <li>
///     Since 3.0.236
///   </li>
/// </ul>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Parameter constructor
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType messageId:(int64_t)messageId includeMetaArray:(BOOL)includeMetaArray includeReactions:(BOOL)includeReactions includeThreadInfo:(BOOL)includeThreadInfo includeParentMessageInfo:(BOOL)includeParentMessageInfo OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageRetrievalParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

enum SBDMessageSearchQueryOrder : NSInteger;

/// A class representing query to retrieve list of <code>BaseMessage</code>s that matches a given
/// query with given filters. <code>MessageSearchQuery</code> can be generated by using
/// <code>MessageSearchQueryBuilder</code>
/// since:
/// 3.0.162
SWIFT_CLASS_NAMED("MessageSearchQuery")
@interface SBDMessageSearchQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
/// Keyword to search for.
@property (nonatomic, copy) NSString * _Nullable keyword;
/// Channel url of the channel you want to set as a scope for the search.
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Channel custom type you want to set as a scope for the search.
@property (nonatomic, copy) NSString * _Nullable channelCustomType;
/// Should reverse the queried result list. Default is <code>false</code>
@property (nonatomic) BOOL reverse;
/// Should search as a complete, exact phrase. Default is <code>false</code>
@property (nonatomic) BOOL exactMatch;
/// Starting timestamp to search from. Default is 0
@property (nonatomic) int64_t messageTimestampFrom;
/// Ending timestamp to search to. Default is 0
@property (nonatomic) int64_t messageTimestampTo;
/// The order method for the search. Default is <code>.score</code>
@property (nonatomic) enum SBDMessageSearchQueryOrder order;
/// Whether treat keyword field as advanced query or not
/// since:
/// 3.0.222
@property (nonatomic) BOOL advancedQuery;
/// Array of target fields in message’s data that will be searched with keyword
/// since:
/// 3.0.222
@property (nonatomic, copy) NSArray<NSString *> * _Nullable targetFields;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic) BOOL includeNotJoinedPublicChannel;
@property (nonatomic) BOOL includeOpenChannel;
@property (nonatomic) NSUInteger totalCount;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use SendbirdChat's `createMessageSearchQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDMessageSearchQuery * _Nonnull)setupFor:(SBDMessageSearchQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDMessageSearchQuery (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>MessageSearchQuery</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// Message ssearch query builder
SWIFT_CLASS_NAMED("MessageSearchQueryBuilder")
@interface SBDMessageSearchQueryBuilder : NSObject
/// Keyword to search for.
@property (nonatomic, copy) NSString * _Nullable keyword;
/// Channel url of the channel you want to set as a scope for the search.
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Channel custom type you want to set as a scope for the search.
@property (nonatomic, copy) NSString * _Nullable channelCustomType;
/// Should reverse the queried result list. Default is <code>false</code>
@property (nonatomic) BOOL reverse;
/// Should search as a complete, exact phrase. Default is <code>false</code>
@property (nonatomic) BOOL exactMatch;
/// Starting timestamp to search from. Default is 0
@property (nonatomic) int64_t messageTimestampFrom;
/// Ending timestamp to search to. Default is 0
@property (nonatomic) int64_t messageTimestampTo;
/// The order method for the search. Default is <code>.score</code>
@property (nonatomic) enum SBDMessageSearchQueryOrder order;
/// The maximum number of <code>SBDBaseMessage</code>s per queried page.
/// Default is 20, maximum is 999 (<1000)
@property (nonatomic) NSUInteger limit;
/// Whether treat keyword field as advanced query or not
/// since:
/// 3.0.222
@property (nonatomic) BOOL advancedQuery;
/// Array of target fields in message’s data that will be searched with keyword
/// since:
/// 3.0.222
@property (nonatomic, copy) NSArray<NSString *> * _Nullable targetFields;
@property (nonatomic) BOOL includeNotJoinedPublicChannel;
@property (nonatomic) BOOL includeOpenChannel;
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The order type for <code>MessageSearchQuery</code>.
/// since:
/// 3.0.162
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMessageSearchQueryOrder, "MessageSearchQueryOrder", open) {
/// Score type Returns the result as by their matching score.
  SBDMessageSearchQueryOrderScore = 0,
/// Timestamp type Returns the result as by <code>BaseMessage</code>’s timestamp.
  SBDMessageSearchQueryOrderTimeStamp = 1,
};

/// Constants of type to describe message’s sending status.
/// since:
/// 3.0.173
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMessageSendingStatus, "MessageSendingStatus", open) {
/// MUST NOT BE. If you got a message instance from SDK, the message can’t have this value.
  SBDMessageSendingStatusNone = 0,
/// Indicates the status of the message returned when trying to send a message.
/// The message with the pending status means that is not dispatched completely to the Sendbird
/// server. The pending message should be replaced with a message (failed or succeeded)
/// from the callback.
  SBDMessageSendingStatusPending = 1,
/// Indicates the status of the message that failed to send the message.
  SBDMessageSendingStatusFailed = 2,
/// Indicates the status of the message that success to send the message.
  SBDMessageSendingStatusSucceeded = 3,
/// Indicates the status of the message that is canceled.
  SBDMessageSendingStatusCanceled = 4,
};


/// An object that synchronizes messages for a specific group <span>channel</span>.
/// <h3>MessageSyncManager</h3>
/// The `MessageSyncManager` class creates an `MessageSync` object for a group channel,
/// inserts the `MessageSync` object into the waiting queue, and runs the object in the running queue.
/// <h3>Message synchronization</h3>
/// An `MessageSync` object is for a specific group <span>channel</span>. The object sends a request
/// for the messages to the server repeatedly. The method that the request uses is the
/// `getMessages(timestamp:params:completionHandler:)` of `BaseChannel` class.
/// The `params` for the method makes the synchronizer get the all messages without any filters. The synchronization
/// starts from the edge of the chunk of the channel. If the edge of the chunk hasn't been set yet, it starts from
/// `Int64.max`. Whenever the synchronizer receives the response from the server, it updates the chunk with
/// the oldest and the newest `createdAt` timestamp of the messages that the server Returns. When the
/// synchronizer resumes later, the updated chunk will be used as the `timestamp` of the method of
/// `BaseChannel` class. If there isn't any message in the previous direction, the synchronizer sets that
/// the previous messages synchronization for the channel is completed. And then, the synchronizer for the
/// channel never tries to get the previous messages again.
/// since:
/// 3.1.0
SWIFT_CLASS("_TtC12SendbirdChat11MessageSync")
@interface MessageSync : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Message type for filtering
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMessageTypeFilter, "MessageTypeFilter", open) {
/// Filter of all messages.
  SBDMessageTypeFilterAll = 0,
/// Filter of user message.
  SBDMessageTypeFilterUser = 1,
/// Filter of file message.
  SBDMessageTypeFilterFile = 2,
/// Filter of admin message.
  SBDMessageTypeFilterAdmin = 3,
};

/// The current user’s muted state type.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMutedState, "MutedState", open) {
/// The current user is unmuted in the group channel.
  SBDMutedStateUnmuted = 0,
/// The current user is muted in the group channel.
  SBDMutedStateMuted = 1,
};


/// The <code>MutedUserListQuery</code> class is a query class for getting the list of muted users in
/// a specific channel.
/// This instance is created by <code>createMutedUserListQuery</code> of <code>BaseChannel</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("MutedUserListQuery")
@interface SBDMutedUserListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) enum SBDChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createMutedUserListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MutedUserListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// Represents a delegate to receive network event
SWIFT_PROTOCOL_NAMED("NetworkDelegate")
@protocol SBDNetworkDelegate
/// Call when reconnection succeeds
- (void)didReconnect;
@end


/// Represents OpenGraph Image information
/// since:
/// 3.0.193
SWIFT_CLASS_NAMED("OGImage")
@interface SBDOGImage : NSObject
/// An image url
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// An alternate url to use if the webpage requires HTTPS
@property (nonatomic, readonly, copy) NSString * _Nullable secureURL;
/// A MIME type for this image
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// A description of what is in the image (not a caption). If the page specifies an og:image it should specify this property
@property (nonatomic, readonly, copy) NSString * _Nullable alt;
/// The number of pixels wide
@property (nonatomic, readonly) NSInteger width;
/// The number of pixels high
@property (nonatomic, readonly) NSInteger height;
@end


/// Represents OpenGraph information
/// since:
/// 3.0.193
SWIFT_CLASS_NAMED("OGMetaData")
@interface SBDOGMetaData : NSObject
/// The title of object as it should appear within the graph
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The canonical URL of object that will be used as its permanent ID in the graph
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// A one to two sentence description of object.
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
/// An image object which should represent the object within the graph
@property (nonatomic, readonly, strong) SBDOGImage * _Nullable defaultImage;
@end


/// The <code>OpenChannel</code> class represents a open channel which is a public chat.
/// Any users who wants to enter the channel can join freely. This class is derived from <code>BaseChannel</code>.
/// If the <code>OpenChannelDelegate</code> is added, the user will automatically receive all messages from the
/// channels where the user belongs after connection. The <code>OpenChannel</code> does not provide the features that
/// <code>GroupChannel</code> does, but it can handle much more users.
/// For more information, see <a href="https://docs.sendbird.com/ios#open_channel">Group Channel</a>.
SWIFT_CLASS_NAMED("OpenChannel")
@interface SBDOpenChannel : SBDBaseChannel
/// The number of participants in this channel.
@property (nonatomic) NSInteger participantCount;
/// The operators of this channel.
@property (nonatomic, copy) NSArray<SBDUser *> * _Nullable operators;
/// Returns the user is an operator or not.
/// \param user The user object.
///
///
/// returns:
/// If <code>true</code>, the user is an operator.
- (BOOL)isOperatorWithUser:(SBDUser * _Nonnull)user SWIFT_WARN_UNUSED_RESULT;
/// Returns the user ID is an operator or not.
/// \param userId The user ID.
///
///
/// returns:
/// If <code>true</code>, the user ID is an operator.
- (BOOL)isOperatorWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL name:(NSString * _Nonnull)name coverURL:(NSString * _Nullable)coverURL createdAt:(int64_t)createdAt creator:(SBDUser * _Nullable)creator isCreated:(BOOL)isCreated data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType isEphemeral:(BOOL)isEphemeral isFrozen:(BOOL)isFrozen lastSyncedTs:(int64_t)lastSyncedTs SWIFT_UNAVAILABLE;
@end


@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>OpenChannel</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Bans a user with the user object.
/// \param user The user object.
///
/// \param seconds Duration for ban in seconds.
///
/// \param completionHandler The handler block to execute.
///
- (void)banUser:(SBDUser * _Nonnull)user seconds:(NSInteger)seconds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("Use `ban(_:seconds:description:completionHandler:)` instead");
/// Bans a user with the user ID.
/// \param userId The user ID.
///
/// \param seconds Duration for ban in seconds.
///
/// \param completionHandler The handler block to execute.
///
- (void)banUserWithUserId:(NSString * _Nonnull)userId seconds:(NSInteger)seconds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("Use `ban(userId:seconds:description:completionHandler:)` instead");
@end


@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Enters this channel.
/// \param completionHandler The handler block to execute.
///
- (void)enterChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Exits this channel.
/// \param completionHandler The handler block to execute.
///
- (void)exitChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end

@class SBDOpenChannelListQuery;
@class SBDParticipantListQuery;

@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates a query instance for open channel list.
///
/// returns:
/// The query instance for open channel list.
+ (SBDOpenChannelListQuery * _Nonnull)createOpenChannelListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query instance for getting participant list of the channel with the given channel URL.
/// \param channelURL URL of the channel to create the query with.
///
///
/// returns:
/// ParticipantListQuery instance for the participant list of the channel instance.
+ (SBDParticipantListQuery * _Nonnull)createParticipantListQueryWithChannelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates a participant list query for this channel.
///
/// returns:
/// <code>UserListQuery</code> instance for the participant list of the channel instance.
- (SBDParticipantListQuery * _Nullable)createParticipantListQuery SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDOpenChannelCreateParams;
@class SBDOpenChannelUpdateParams;

@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates an open channel.
/// note:
/// The name and cover URL of the channel are generated in Sendbird server.
/// \param completionHandler The handler block to execute.
///
+ (void)createChannelWithCompletionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a open channel with <code>OpenChannelCreateParams</code> class.
/// since:
/// 3.0.206
/// \param params Instance of <code>OpenChannelCreateParams</code> what has properties to create open channel.
///
/// \param completionHandler Handler block to execute. <code>channel</code> is the open channel instance.
///
+ (void)createChannelWithParams:(SBDOpenChannelCreateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a open channel with <code>OpenChannelCreateParams</code> class.
/// since:
/// 3.0.206
/// \param params The parameter instance of <code>OpenChannelCreateParams</code> what has properties to create open channel.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of bytes sent since
/// the last time this method was called. <code>totalBytesSent</code> is the total number of bytes sent so far. <code>totalBytesExpectedToSend</code>
/// is the expected length of the body <em>data</em>. These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance.
///
+ (void)createChannelWithParams:(SBDOpenChannelCreateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Updates this channel with <code>OpenChannelUpdateParams</code> class.
/// since:
/// 3.0.206
/// \param params The parameter instance of OpenChannelCreateParams what has properties to update open channel.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance.
///
- (void)updateChannelWithParams:(SBDOpenChannelUpdateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Updates this channel with <code>OpenChannelUpdateParams</code> class.
/// since:
/// 3.0.206
/// \param params The parameter instance of OpenChannelCreateParams what has properties to update open channel.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of bytes sent since
/// the last time this method was called. <code>totalBytesSent</code> is the total number of bytes sent so far. <code>totalBytesExpectedToSend</code>
/// is the expected length of the body <em>data</em>. These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance.
///
- (void)updateChannelWithParams:(SBDOpenChannelUpdateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes this channel
/// since:
/// 3.0.180
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance which is deleted.
///
- (void)deleteChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets an open channel instance from channel URL.
/// \param channelURL The channel URL.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance which has the <code>channelURL</code>.
///
+ (void)getChannelWithURL:(NSString * _Nonnull)url completionHandler:(void (^ _Nullable)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Refreshes the channel information.
/// \param completionHandler The handler block to execute.
///
- (void)refreshWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


/// The <code>OpenChannelCreateParams</code> class contain parameters for <code>open channel</code>.
/// When you want to create a open channel or update a open channel, use this class. Add what you want
/// to create with, add which properties you want to update, and pass this class to <code>OpenChannel</code>. You
/// can use this class with apis that are <code>OpenChannel.createChannel(params::completionHandler:)</code> or
/// <code>OpenChannel,update(params:completionHandler:)</code>.
/// For more information, see <a href="https://sendbird.com/docs/chat/v4/ios/guides/open-channel">Open Channel</a>.
/// since:
/// 3.0.206
SWIFT_CLASS_NAMED("OpenChannelCreateParams")
@interface SBDOpenChannelCreateParams : NSObject <NSCopying>
/// Channel name
@property (nonatomic, copy) NSString * _Nullable name;
/// Channel URL. If nil, channel url will be determined randomly.
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Channel cover image url
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// Channel cocer image data
@property (nonatomic, copy) NSData * _Nullable coverImage;
/// Channel cover image name
@property (nonatomic, copy) NSString * _Nullable coverImageName;
/// Channel data
@property (nonatomic, copy) NSString * _Nullable data;
/// Channel’s operator user ids
@property (nonatomic, copy) NSArray<NSString *> * _Nullable operatorUserIds;
/// Channel custom type
@property (nonatomic, copy) NSString * _Nullable customType;
- (nonnull instancetype)init;
/// Parameter constructor
- (nonnull instancetype)initWithName:(NSString * _Nullable)name channelURL:(NSString * _Nullable)channelURL coverURL:(NSString * _Nullable)coverURL coverImage:(NSData * _Nullable)coverImage coverImageName:(NSString * _Nullable)coverImageName data:(NSString * _Nullable)data operatorUserIds:(NSArray<NSString *> * _Nullable)operatorUserIds customType:(NSString * _Nullable)customType OBJC_DESIGNATED_INITIALIZER;
/// Set operators with list of user instance.
/// since:
/// 3.0.206
/// \param operators The list of operators.
///
- (void)setOperators:(NSArray<SBDUser *> * _Nonnull)operators;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>OpenChannelParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// An object that adopts the <code>OpenChannelDelegate</code> protocol is responsible for receiving the events in the channel.
/// This protocol deals with the below events.
/// <ul>
///   <li>
///     Receives an event when a participant entered the <a href="../Classes/OpenChannel.html"><code>OpenChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a participant exited the <a href="../Classes/OpenChannel.html"><code>OpenChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when the <a href="../Classes/OpenChannel.html"><code>OpenChannel</code></a> was frozen or unfrozen.
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("OpenChannelDelegate")
@protocol SBDOpenChannelDelegate <SBDBaseChannelDelegate>
@optional
/// A callback when participant count has been changed for open channel
/// since:
/// 3.0.219
/// \param channels The open channel that member count has been updated
///
- (void)channelDidChangeParticipantCount:(NSArray<SBDOpenChannel *> * _Nonnull)channels;
/// A callback when a user enter an open channel.
/// \param channel The open channel.
///
/// \param user A user who enters the channel
///
- (void)channel:(SBDOpenChannel * _Nonnull)channel userDidEnter:(SBDUser * _Nonnull)user;
/// A callback when a user exit an open channel.
/// \param channel The open channel.
///
/// \param user A user who exits the channel.
///
- (void)channel:(SBDOpenChannel * _Nonnull)channel userDidExit:(SBDUser * _Nonnull)user;
@end


/// The <code>OpenChannelListQuery</code> class is a query class for getting the list of open channels.
/// The instance of this class is created by <code>createOpenChannelListQuery()</code> in <code>OpenChannel</code> class.
SWIFT_CLASS_NAMED("OpenChannelListQuery")
@interface SBDOpenChannelListQuery : NSObject <NSCopying>
/// Whether the result contains frozen channel or not. Default is <code>true</code>
/// since:
/// 3.0.182
@property (nonatomic) BOOL includeFrozenChannel;
/// Whether the result channel includes metadata or not. Default is <code>false</code>
/// since:
/// 3.0.216
@property (nonatomic) BOOL includeMetaData;
/// Sets the channel URL filter.
@property (nonatomic, copy) NSString * _Nullable channelURLFilter;
/// Sets the channel name filter.
@property (nonatomic, copy) NSString * _Nullable channelNameFilter;
/// Sets the custom type filter.
@property (nonatomic, copy) NSString * _Nullable customTypeFilter;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use OpenChannel's `createOpenChannelListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDOpenChannel *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>OpenChannelListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDOpenChannelListQuery * _Nonnull)setupFor:(SBDOpenChannelListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains set of options to update open channel
/// since:
/// 4.0.0
SWIFT_CLASS_NAMED("OpenChannelUpdateParams")
@interface SBDOpenChannelUpdateParams : NSObject <NSCopying>
/// Channel name
@property (nonatomic, copy) NSString * _Nullable name;
/// Channel cover image URL
/// note:
/// This property does not cooperate with <code>coverImage</code>
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// Channel cover image data
/// note:
/// This property does not cooperate with <code>coverURL</code>
@property (nonatomic, copy) NSData * _Nullable coverImage;
/// Channel cover image name
@property (nonatomic, copy) NSString * _Nullable coverImageName;
/// Channel data
@property (nonatomic, copy) NSString * _Nullable data;
/// Channel’s operator user ids
@property (nonatomic, copy) NSArray<NSString *> * _Nullable operatorUserIds;
/// Channel custom type
@property (nonatomic, copy) NSString * _Nullable customType;
/// Default constructor
- (nonnull instancetype)init;
/// Parameter constructor
- (nonnull instancetype)initWithName:(NSString * _Nullable)name coverURL:(NSString * _Nullable)coverURL coverImage:(NSData * _Nullable)coverImage coverImageName:(NSString * _Nullable)coverImageName data:(NSString * _Nullable)data operatorUserIds:(NSArray<NSString *> * _Nullable)operatorUserIds customType:(NSString * _Nullable)customType OBJC_DESIGNATED_INITIALIZER;
/// Set operators with list of user instance.
/// since:
/// 3.0.206
/// \param operators The list of operators.
///
- (void)setOperators:(NSArray<SBDUser *> * _Nonnull)operators;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>OpenChannelUpdateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>OperatorListQuery</code> class is a query class for getting the list of operators in channel.
/// The instance of this class is created by <code>createOperatorListQuery()</code> in <code>BaseChannel</code> class.
SWIFT_CLASS_NAMED("OperatorListQuery")
@interface SBDOperatorListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) enum SBDChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createOperatorListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>OperatorListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDOperatorListQuery * _Nonnull)setupFor:(SBDOperatorListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ParticipantListQuery</code> class is a query class for getting the list of participants in
/// an open channel.
/// This instance is created by <code>createParticipantListQuery()</code> of <code>OpenChannel</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("ParticipantListQuery")
@interface SBDParticipantListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use OpenChannel's `createParticipantListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>ParticipantListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDParticipantListQuery * _Nonnull)setupFor:(SBDParticipantListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// A object to represent a plugin
/// since:
/// 3.0.207
SWIFT_CLASS_NAMED("Plugin")
@interface SBDPlugin : NSObject
/// String indicates a plugin type
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// String indicates a vendor who provides this plugin
@property (nonatomic, readonly, copy) NSString * _Nullable vendor;
/// Dictionary contains details of this plugin
/// Key is string and value is any object
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable detail;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDPollDetails;
@class SBDPollCreateParams;
@class SBDPollRetrievalParams;
@class SBDPollUpdateParams;

/// Represents a poll that users can vote
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("Poll")
@interface SBDPoll : NSObject
/// Poll id
@property (nonatomic, readonly) int64_t pollId;
/// Title of this poll
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Detail information of this poll
/// note:
/// this property will be nil if <code>includePollDetails</code> option is NO when fetching message list
@property (nonatomic, strong) SBDPollDetails * _Nullable details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Creates a poll with given params.
/// \param params <code>PollCreateParams</code> instance.
///
/// \param completionHandler completion block.
///
+ (void)createWithParams:(SBDPollCreateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Gets a poll.
/// \param params <code>PollRetrievalParams</code> object.
///
/// \param completionHandler completion block.
///
+ (void)getWithParams:(SBDPollRetrievalParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Updates this poll with params.
/// \param params <code>PollUpdateParams</code> instance.
///
/// \param completionHandler Completion block.
///
- (void)updateWithParams:(SBDPollUpdateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Closes this poll.
/// \param completionHandler completion block.
///
- (void)closeWithCompletionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes this poll.
/// \param completionHandler completion block.
///
- (void)deleteWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Adds an option to this poll.
/// \param text option text.
///
/// \param channelURL channel url where this poll is included.
///
/// \param completionHandler completion block.
///
- (void)addOptionWithText:(NSString * _Nonnull)text channelURL:(NSString * _Nonnull)channelURL completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Votes on this poll.
/// \param optionIds number array that contains option ids.
///
/// \param channelURL channel url where this poll is included.
///
/// \param completionHandler completion block.
///
- (void)voteWithOptionIds:(NSArray<NSNumber *> * _Nonnull)optionIds channelURL:(NSString * _Nonnull)channelURL completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
@end


@interface SBDPoll (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDPoll (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a parameter object to create or update poll object
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollCreateParams")
@interface SBDPollCreateParams : NSObject
/// Title of this poll
@property (nonatomic, copy) NSString * _Nonnull title;
/// An additional text to accompany the poll.
/// Can be used to provide explanations for incorrect quiz answers
@property (nonatomic, copy) NSString * _Nullable text;
/// Possible options for which a user can vote
/// note:
/// this property is only valid when creating a poll, ignored when updating a poll
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull options;
/// Whether to make the votes anonymous. Default is false
@property (nonatomic) BOOL isAnonymous;
/// Whether to allow user-suggested options. Default is false
@property (nonatomic) BOOL allowUserSuggestion;
/// Whether to allow multiple vote casting. Default is false
@property (nonatomic) BOOL allowMutipleVotes;
/// Unix timestamp at which the poll has closed or will close (millisecond)
@property (nonatomic) int64_t closeAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Represents a poll data
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollData")
@interface SBDPollData : NSObject
/// Text representation
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@end

@class SBDPollOption;
enum SBDPollStatus : NSInteger;

/// Represents a poll details information
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollDetails")
@interface SBDPollDetails : NSObject
/// An additional text to accompany the poll.
/// Can be used to provide explanations for incorrect quiz answers
@property (nonatomic, readonly, strong) SBDPollData * _Nullable data;
/// Number of voters who casted a vote on the poll.
@property (nonatomic, readonly) NSInteger voterCount;
/// Possible options for which a user can vote.
@property (nonatomic, readonly, copy) NSArray<SBDPollOption *> * _Nonnull options;
/// Current user’s voted option list.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull votedOptionIds;
/// User ID who creates this poll.
@property (nonatomic, readonly, copy) NSString * _Nullable createdBy;
/// Whether to make the votes anonymous.
@property (nonatomic, readonly) BOOL isAnonymous;
/// Whether to allow user-suggested options.
@property (nonatomic, readonly) BOOL allowUserSuggestion;
/// Whether to allow multiple vote casting.
@property (nonatomic, readonly) BOOL allowMutipleVotes;
/// Unix timestamp at which the poll is created (millisecond).
@property (nonatomic, readonly) int64_t createdAt;
/// Unix timestamp at which the poll is updated (millisecond).
@property (nonatomic, readonly) int64_t updatedAt;
/// Unix timestamp at which the poll has closed or will close (second).
@property (nonatomic, readonly) int64_t closeAt;
/// Whether the poll is closed.
@property (nonatomic) enum SBDPollStatus status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDPollDetails (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// An object to retrieve list of <code>Poll</code>
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollListQuery")
@interface SBDPollListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createPollListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDPoll *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>PollListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDPollListQuery * _Nonnull)setupFor:(SBDPollListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDUpdatedVoteCount;

/// Represents an option for poll
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollOption")
@interface SBDPollOption : NSObject
/// Poll id
@property (nonatomic, readonly) int64_t pollId;
/// Option id
@property (nonatomic, readonly) int64_t optionId;
/// The text to represent the option
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// Number of votes casted on the option
@property (nonatomic, readonly) NSUInteger voteCount;
/// ID of the user who has created the option
@property (nonatomic, readonly, copy) NSString * _Nonnull createdBy;
/// Unix timestamp at which the option is created (millisecond)
@property (nonatomic, readonly) int64_t createdAt;
/// Unix timestamp at which the option is updated (millisecond)
@property (nonatomic, readonly) int64_t updatedAt;
/// Unix timestamp at which last vote occurs either cast or cancel (millisecond)
@property (nonatomic, readonly) int64_t lastVotedAt;
/// Users who casted the vote on this option, this field is only available when you fetch poll with <code>showPartialVoters</code> option
@property (nonatomic, readonly, copy) NSArray<SBDUser *> * _Nullable partialVoters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Gets an option with id
/// \param pollId poll id
///
/// \param optionId option id
///
/// \param channelURL channelURL that poll is belonged to
///
/// \param completionHandler completion block
///
+ (void)getWithPollId:(int64_t)pollId optionId:(int64_t)optionId channelURL:(NSString * _Nonnull)channelURL completionHandler:(void (^ _Nonnull)(SBDPollOption * _Nullable, SBError * _Nullable))completionHandler;
/// Update this option with text
/// \param text option text
///
/// \param completionHandler completion block
///
- (void)updateWithText:(NSString * _Nonnull)text completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes this option
/// \param completionHandler completion block
///
- (void)deleteWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
- (void)updateWithCount:(SBDUpdatedVoteCount * _Nonnull)count timestamp:(int64_t)timestamp;
@end


@interface SBDPollOption (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains a voter result for an option
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollOptionVoterResult")
@interface SBDPollOptionVoterResult : NSObject
/// Number of voter
@property (nonatomic, readonly) NSUInteger voteCount;
/// First page Voters list - could be partial
@property (nonatomic, readonly, copy) NSArray<SBDUser *> * _Nonnull voters;
@end


/// An object contains set of options to retrieve <code>Poll</code> object
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollRetrievalParams")
@interface SBDPollRetrievalParams : NSObject
/// Channel url where the poll exists in
@property (nonatomic, copy) NSString * _Nonnull channelURL;
/// Poll id
@property (nonatomic) int64_t pollId;
/// Shows limited users on each option in this poll. Default is false
@property (nonatomic) BOOL showPartialVoters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Poll status
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPollStatus, "PollStatus", open) {
  SBDPollStatusOpen = 0,
  SBDPollStatusClosed = 1,
  SBDPollStatusRemoved = 2,
};


/// Represents an poll update event
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollUpdateEvent")
@interface SBDPollUpdateEvent : NSObject
/// Updated poll
@property (nonatomic, readonly, strong) SBDPoll * _Nonnull poll;
/// Poll status
@property (nonatomic, readonly) enum SBDPollStatus status;
/// Timestamps when this event occurs
@property (nonatomic, readonly) int64_t timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object contains set of options to update <code>Poll</code>
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollUpdateParams")
@interface SBDPollUpdateParams : NSObject
/// Title of this poll
@property (nonatomic, copy) NSString * _Nullable title;
/// An additional text to accompany the poll.
/// Can be used to provide explanations for incorrect quiz answers
@property (nonatomic, copy) NSString * _Nullable text;
/// Whether to make the votes anonymous. Default is false
@property (nonatomic) BOOL isAnonymous;
/// Whether to allow user-suggested options. Default is false
@property (nonatomic) BOOL allowUserSuggestion;
/// Whether to allow multiple vote casting. Default is false
@property (nonatomic) BOOL allowMutipleVotes;
/// Unix timestamp at which the poll has closed or will close (millisecond)
@property (nonatomic) int64_t closeAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Represents a vote event on a poll
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollVoteEvent")
@interface SBDPollVoteEvent : NSObject
/// Poll ID associated with this vote event
@property (nonatomic, readonly) int64_t pollId;
/// Updated poll options
@property (nonatomic, readonly, copy) NSArray<SBDUpdatedVoteCount *> * _Nonnull updatedVoteCounts;
/// Timestamp for this vote event
@property (nonatomic, readonly) int64_t timestamp;
@end


/// An object to retrieve list of voter
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollVoterListQuery")
@interface SBDPollVoterListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) int64_t pollId;
@property (nonatomic) int64_t optionId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createPollVoterListQuery:optionId:`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, NSInteger, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>PollVoterListQuery</code> instance
- (id _Nonnull)copyWith:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDPollVoterListQuery * _Nonnull)setupFor:(SBDPollVoterListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// An object which retrieves messages from the given channel.
/// The instance of this class is created by <code>createPreviousMessageListQuery()</code> in <code>BaseChannel</code> class.
SWIFT_CLASS_NAMED("PreviousMessageListQuery")
@interface SBDPreviousMessageListQuery : NSObject
/// Sets the order of messages. If <code>true</code>, the latest message is the index 0. The default value is <code>false</code>.
/// since:
/// 3.0.106
@property (nonatomic) BOOL reverse;
/// Sets the message type to filter messages. The default value is <code>.all</code>.
/// since:
/// 3.0.106
@property (nonatomic) enum SBDMessageTypeFilter messageTypeFilter;
/// Sets the custom type to filter messages.
/// since:
/// 3.0.106
@property (nonatomic, copy) NSString * _Nullable customTypeFilter;
/// Sets the custom types to filter messages.
/// since:
/// 3.0.213
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypesFilter;
/// Sets the senders’ user IDs filter.
/// since:
/// 3.0.106
@property (nonatomic, copy) NSArray<NSString *> * _Nullable senderUserIdsFilter;
/// Determines message object include meta array. Default is <code>false</code>
/// since:
/// 3.0.116
@property (nonatomic) BOOL includeMetaArray;
/// Determines message object include reactions. Default is <code>false</code>
/// since:
/// 3.0.168
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the messages in the results
/// when the results contain parent messages. Default is <code>false</code>
/// since:
/// 3.0.181
@property (nonatomic) BOOL includeThreadInfo;
/// Determines whether to include poll information of the message in the results. Default is <code>false</code>
/// since:
/// 3.0.232
@property (nonatomic) BOOL includePollDetails;
/// Determines whether to include parent message information of the messages in the results
/// when the results contain reply messages. Default is <code>false</code>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Sets the reply type to filter messages. The default value is <code>.none</code>.
@property (nonatomic) enum SBDReplyType replyType;
/// Determines whether to include only messages from the subChannel to which you belong
/// in the results. Default is <code>false</code>
/// note:
/// This value is only used in open channels.
/// since:
/// 3.0.204
@property (nonatomic) BOOL showSubChannelMessagesOnly;
@property (nonatomic) int64_t minimumTimestamp;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) enum SBDChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createPreviousMessageListQuery`");
/// Loads previous messages.
/// \param limit The number of messages per page.
///
/// \param reverse If <code>true</code>, the latest message is the index 0.
///
/// \param completionHandler The handler block to execute. The <code>messages</code> is the array of <code>BaseMessage</code> instances.
///
- (void)loadPreviousMessagesWithLimit:(NSUInteger)limit reverse:(BOOL)reverse completionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("Use `loadNextPage:` instead");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>PreviousMessageListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDPreviousMessageListQuery * _Nonnull)setupFor:(SBDPreviousMessageListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

/// The order type for <code>PublicGroupChannelListQuery</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPublicGroupChannelListOrder, "PublicGroupChannelListOrder", open) {
/// Chronological order for public group channel.
  SBDPublicGroupChannelListOrderChronological = 0,
/// Alphabetical name order for public group channel.
  SBDPublicGroupChannelListOrderChannelNameAlphabetical = 2,
/// Alphabetical value order of a selected key in meta data for public group channel.
  SBDPublicGroupChannelListOrderChannelMetaDataValueAlphabetical = 3,
};

enum SBDPublicGroupChannelMembershipFilter : NSInteger;

/// The <code>PublicGroupChannelListQuery</code> class is a query class for getting the list of public group channels.
/// The instance of this class is created by <code>createPublicGroupChannelListQuery()</code> in <code>GroupChannel</code> class.
SWIFT_CLASS_NAMED("PublicGroupChannelListQuery")
@interface SBDPublicGroupChannelListQuery : NSObject
/// Determines channel list includes empty channel. Deafult is <code>true</code>
@property (nonatomic) BOOL includeEmptyChannel;
/// Determines channel list includes frozen channel. Default is <code>true</code>
/// since:
/// 3.0.182
@property (nonatomic) BOOL includeFrozenChannel;
/// Determines channel list includes their members. Default is <code>true</code>
@property (nonatomic) BOOL includeMemberList;
/// Determines channel object of the list includes meta data property. Default is <code>true</code>
/// since:
/// 3.0.216
@property (nonatomic) BOOL includeMetaData;
/// Sets the order of the list. The order is defined in <code>PublicGroupChannelListOrder</code>.
/// Default is <code>.chronological</code>
@property (nonatomic) enum SBDPublicGroupChannelListOrder order;
/// Sets to filter super channel. Default is <code>.all</code>
@property (nonatomic) enum SBDGroupChannelSuperChannelFilter superChannelFilter;
/// Sets <code>GroupChannel</code> URLs filter.
/// <code>GroupChannel</code> list containing only and exactly the passed <code>GroupChannel</code> URLs will be returned.
/// note:
/// This does not cooperate with other filters.
@property (nonatomic) enum SBDPublicGroupChannelMembershipFilter publicMembershipFilter;
/// Sets the custom types filter.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypesFilter;
/// Sets to filter channels by custom type that starts with.
@property (nonatomic, copy) NSString * _Nullable customTypeStartsWithFilter;
/// Sets <code>GroupChannel</code> URLs filter.
/// <code>GroupChannel</code> list containing only and exactly the passed <code>GroupChannel</code> URLs will be returned.
/// note:
/// This does not cooperate with other filters.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable channelURLsFilter;
/// Sets <code>GroupChannel</code> names filter.
/// <code>GroupChannel</code> list containing only and exactly the passed <code>GroupChannel</code> name will be returned.
/// note:
/// This does not cooperate with other filters.
@property (nonatomic, copy) NSString * _Nullable channelNameContainsFilter;
/// Sets a key for ordering by value in the metadata.
/// This is valid when the <code>order</code> is <code>.channelMetaDataValueAlphabetical</code> only.
/// since:
/// 3.0.118
@property (nonatomic, copy) NSString * _Nullable metaDataOrderKeyFilter;
/// Searches for group channels with metadata containing an item with the specified value as its key
/// since:
/// 3.0.232
@property (nonatomic, copy) NSString * _Nullable metaDataKeyFilter;
/// Searches for group channels with metadata containing an item with the key specified by the metaDataKey
/// since:
/// 3.0.232
@property (nonatomic, copy) NSArray<NSString *> * _Nullable metaDataValuesFilter;
/// Searches for group channels with metadata containing an item with the key specified by the metaDataKey
/// and the values of that item start with the specified value
/// since:
/// 3.0.232
@property (nonatomic, copy) NSString * _Nullable metaDataValueStartsWithFilter;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use GroupChannel's `createPublicGroupChannelListQuery`");
/// Sets meta data filter
/// note:
/// Using this method will reset <code>metaDataValueStartsWithFilter</code> property
/// \param key meta data key
///
/// \param values meta data values
///
- (void)setMetaDataFilterWithKey:(NSString * _Nonnull)key values:(NSArray<NSString *> * _Nonnull)values;
/// Sets meta data filter
/// note:
/// Using this method will reset <code>metaDataValuesFilter</code> property
/// \param key meta data key
///
/// \param value meta data values that starts with
///
- (void)setMetaDataFilterWithKey:(NSString * _Nonnull)key valueStartsWith:(NSString * _Nonnull)value;
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>PublicGroupChannelListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDPublicGroupChannelListQuery * _Nonnull)setupFor:(SBDPublicGroupChannelListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

/// Filter my channels or all ones in public group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPublicGroupChannelMembershipFilter, "PublicGroupChannelMembershipFilter", open) {
/// Without filter.
  SBDPublicGroupChannelMembershipFilterAll = 0,
/// Filter public group channel the current user joined in.
  SBDPublicGroupChannelMembershipFilterJoined = 1,
};

/// The push option that determines how to deliver the push notification when sending a user or a file message.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPushNotificationDeliveryOption, "PushNotificationDeliveryOption", open) {
/// The push notification will be delivered by the opposite user’s setting.
  SBDPushNotificationDeliveryOptionDefault = 0,
/// The push notification will never be delivered.
  SBDPushNotificationDeliveryOptionSuppress = 1,
};

/// Push token registration statuses
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPushTokenRegistrationStatus, "PushTokenRegistrationStatus", open) {
/// Registration succeeded.
  SBDPushTokenRegistrationStatusSuccess = 0,
/// Registration is pending.
  SBDPushTokenRegistrationStatusPending = 1,
/// Registartion is failed.
  SBDPushTokenRegistrationStatusError = 2,
};

/// Constants of type for device push token.
/// since:
/// 3.0.134
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPushTokenType, "PushTokenType", open) {
/// No type.
  SBDPushTokenTypeNone = 0,
/// Token from Android device.
  SBDPushTokenTypeGCM = 1,
/// Normal Token from iOS device.
  SBDPushTokenTypeAPNS = 2,
/// Token used for VoIP from iOS device.
  SBDPushTokenTypeAPNSVoIP = 3,
};

/// The options to choose which push notification for the current user to receive.
/// since:
/// 3.0.128
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPushTriggerOption, "PushTriggerOption", open) {
/// Receive all of remote push notification.
  SBDPushTriggerOptionAll = 0,
/// Do NOT receive any remote push notification.
  SBDPushTriggerOptionOff = 1,
/// Receive only mentioned messages’s notification.
  SBDPushTriggerOptionMentionOnly = 2,
};


/// A object represents the reaction info.
/// The <code>BaseMessage</code> object can have the <code>Reaction</code> object in <code>reactions</code> property.
/// since:
/// 3.0.169
SWIFT_CLASS_NAMED("Reaction")
@interface SBDReaction : NSObject
/// The reaction key.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// List of user who has been reacted.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull userIds;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull userIdsSet;
/// The users who add the reaction.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull getUserIds;
/// The timestamp when the reaction is updated.
@property (nonatomic) int64_t updatedAt;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull updatedAtMap;
- (nonnull instancetype)initWithReactionEvent:(SBDReactionEvent * _Nonnull)reactionEvent OBJC_DESIGNATED_INITIALIZER;
- (BOOL)mergeWith:(SBDReactionEvent * _Nonnull)reactionEvent SWIFT_WARN_UNUSED_RESULT;
/// Compares this object with given other object..
/// \param object <code>Any</code> instance.
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// hash
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDReaction (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end

enum SBDReactionEventAction : NSInteger;

/// An object represents reaction event info.
/// The object is returned by not only the completion handler of <code>addReaction(message:key:completionHandler:)</code>
/// and <code>deleteReaction(message:key:completionHandler:)</code> in <code>BaseChannel</code> class but also
/// <code>channel(_:updatedReaction:)</code> delegate of <code>BaseChannelDelegate</code> protocol. The object has
/// to be applied to the message that has the identical message ID with the <code>apply(_:)</code> method in <code>BaseMessage</code> class.
/// since:
/// 3.0.169
SWIFT_CLASS_NAMED("ReactionEvent")
@interface SBDReactionEvent : NSObject
/// Message ID that indentifies the message that has the reaction event.
@property (nonatomic) int64_t messageId;
/// The reaction key.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// The user ID that identifies the user who adds or deletes the reaction key.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The operation that the user did. It will be adding a reaction or deleting a reaction.
@property (nonatomic, readonly) enum SBDReactionEventAction operation;
/// The timestamp that represents when the reaction event occurs.
@property (nonatomic, readonly) int64_t updatedAt;
- (nonnull instancetype)initWithMessageId:(int64_t)messageId key:(NSString * _Nonnull)key userId:(NSString * _Nonnull)userId operation:(enum SBDReactionEventAction)operation updatedAt:(int64_t)updatedAt OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDReactionEvent (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end

/// The ReactionEvent action state.
/// since:
/// 3.0.169
typedef SWIFT_ENUM_NAMED(NSInteger, SBDReactionEventAction, "ReactionEventAction", open) {
  SBDReactionEventActionAdd = 0,
  SBDReactionEventActionDelete = 1,
};


/// An object represents read status of a user
SWIFT_CLASS_NAMED("ReadStatus")
@interface SBDReadStatus : NSObject
/// User
@property (nonatomic, strong) SBDUser * _Nullable reader;
/// Read timestamp
@property (nonatomic) int64_t timestamp;
/// Channel URL
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Channel type
@property (nonatomic, copy) NSString * _Nullable channelType;
@end

/// Reply type filter
typedef SWIFT_ENUM_NAMED(NSInteger, SBDReplyType, "ReplyType", open) {
  SBDReplyTypeNone = 0,
  SBDReplyTypeAll = 1,
  SBDReplyTypeOnlyReplyToChannel = 2,
};

/// Categories of reporting reasons
/// since:
/// 3.0.154
typedef SWIFT_ENUM_NAMED(NSInteger, SBDReportCategory, "ReportCategory", open) {
/// Report suspicious content
  SBDReportCategorySuspicious = 0,
/// Report harassing content.
  SBDReportCategoryHarassing = 1,
/// Report spam content
  SBDReportCategorySpam = 2,
/// Report inappropriate content
  SBDReportCategoryInappropriate = 3,
};


/// Represents a user who has been restricted in a channel
SWIFT_CLASS_NAMED("RestrictedUser")
@interface SBDRestrictedUser : SBDUser
/// Restriction info for this user
@property (nonatomic, strong) SBDRestrictionInfo * _Nullable restrictionInfo;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth SWIFT_UNAVAILABLE;
@end

enum SBDRestrictionType : NSInteger;

/// An object contains information about restriction
SWIFT_CLASS_NAMED("RestrictionInfo")
@interface SBDRestrictionInfo : NSObject
/// Description for restricted reason
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
/// epoch time when the restriction ends
@property (nonatomic, readonly) int64_t endAt;
/// Restriction type
@property (nonatomic) enum SBDRestrictionType restrictionType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Restriction type for restrictedUser
/// since:
/// 3.0.236
typedef SWIFT_ENUM_NAMED(NSInteger, SBDRestrictionType, "RestrictionType", open) {
  SBDRestrictionTypeMuted = 0,
  SBDRestrictionTypeBanned = 1,
};

/// The users’s role which gives different behaviors, permisions to user.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDRole, "Role", open) {
/// The default role that means nothing.
  SBDRoleNone = 0,
/// The role of operator.
  SBDRoleOperator = 1,
};


@class NSCoder;

/// Sendbird error class.
SWIFT_CLASS("_TtC12SendbirdChat7SBError")
@interface SBError : NSError
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
/// Create error object with Dictionary.
/// \param dict Error Data
///
///
/// returns:
/// <code>SBError</code> object.
+ (SBError * _Nullable)errorWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
/// Create error object with NSError object.
/// \param error NSError Object.
///
///
/// returns:
/// <code>SBError</code> object.
+ (SBError * _Nullable)errorWithNSError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// Create error object
/// \param domin domain.
///
/// \param code error code.
///
/// \param dict additional info in dictionary
///
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
+ (SBError * _Nonnull)errorFrom:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end



@interface SBError (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly) BOOL shouldRetryWithAPI;
@end


@interface SBError (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly, copy) NSString * _Nullable symbol;
@property (nonatomic, readonly, copy) NSString * _Nullable wrappedSymbol;
@property (nonatomic, readonly, copy) NSString * _Nonnull symbolKey;
@end


SWIFT_PROTOCOL("_TtP12SendbirdChat13SBLogReceiver_")
@protocol SBLogReceiver
- (void)logMessage:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC12SendbirdChat15SBRunloopThread")
@interface SBRunloopThread : NSThread
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)main;
@end


SWIFT_CLASS("_TtC12SendbirdChat7SBTimer")
@interface SBTimer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SBDScheduledUserMessageStatus : NSInteger;

/// Represents a scheduled user message.
/// since:
/// 3.0.119
SWIFT_CLASS_NAMED("ScheduledUserMessage")
@interface SBDScheduledUserMessage : NSObject
/// The scheduled message ID.
@property (nonatomic, readonly) int64_t scheduledId;
/// The scheduled message date time. (format: “YYYY-MM-DD HH:mm”)
@property (nonatomic, readonly, copy) NSString * _Nonnull scheduledDateTimeString;
/// The scheduled message timezone. (e.g. UTC, America/Los_Angeles, etc)
@property (nonatomic, readonly, copy) NSString * _Nonnull scheduledTimezone;
/// The scheduled message status.
@property (nonatomic, readonly) enum SBDScheduledUserMessageStatus status;
/// Error code. If there isn’t error, it’s zero.
@property (nonatomic, readonly) NSInteger errorCode;
/// Error message.
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
/// The push notification delivery option that determines how to deliver the push notification
/// when sending a user or a file message. The default value is <code>.default</code>.
@property (nonatomic, readonly) enum SBDPushNotificationDeliveryOption pushOption;
/// Message created time in millisecond(UTC).
@property (nonatomic, readonly) int64_t createdAt;
/// Message updated time in millisecond(UTC).
@property (nonatomic, readonly) int64_t updatedAt;
/// Target type of mention.
@property (nonatomic, readonly) enum SBDMentionType mentionType;
/// The list of users who will be mentioned together with the message.
@property (nonatomic, readonly, copy) NSArray<SBDUser *> * _Nonnull mentionedUsers;
/// Channel URL which will have this message.
@property (nonatomic, readonly, copy) NSString * _Nonnull channelURL;
@property (nonatomic, readonly) enum SBDChannelType channelType;
/// Sender of the <em>message</em>. This is represented by <code>Sender</code> class.
@property (nonatomic, readonly, strong) SBDSender * _Nullable sender;
/// message text
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// The custom data for message.
@property (nonatomic, readonly, copy) NSString * _Nonnull data;
/// Custom message type.
@property (nonatomic, readonly, copy) NSString * _Nonnull customType;
/// The target languages that the message will be translated into.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull targetLanguages;
/// Gets an array of meta arrays sorted by chronological order.
/// since:
/// 3.0.148
@property (nonatomic, readonly, copy) NSArray<SBDMessageMetaArray *> * _Nonnull metaArrays;
/// Checks the channel type is open channel or not.
///
/// returns:
/// <code>true</code> if when this is an open channel message
- (BOOL)isOpenChannel SWIFT_WARN_UNUSED_RESULT;
/// Checks the channel type is group channel or not.
///
/// returns:
/// <code>true</code> if when this is a group channel message
- (BOOL)isGroupChannel SWIFT_WARN_UNUSED_RESULT;
/// Gets metaArrays with given list of keys
/// since:
/// 3.0.148
/// \param keys Keys of the meta array.
///
///
/// returns:
/// An Array of meta array with keys.
- (NSArray<SBDMessageMetaArray *> * _Nonnull)metaArraysWithKeys:(NSArray<NSString *> * _Nonnull)keys SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDScheduledUserMessage (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains a set of options to create <code>UserMessage</code>.
/// since:
/// 3.0.90
SWIFT_CLASS_NAMED("UserMessageCreateParams")
@interface SBDUserMessageCreateParams : SBDBaseMessageCreateParams
/// Message text.
@property (nonatomic, copy) NSString * _Nonnull message;
/// The target languages that the message will be translated into.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable targetLanguages;
/// Links a poll with message, to unlink set it -1
/// since:
/// 3.0.232
@property (nonatomic) int64_t pollId;
/// Default construrctor
/// \param message The message to text.
///
///
/// returns:
/// An initialized user message params
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>UserMessageCreateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(NSString * _Nullable)data customType:(NSString * _Nullable)customType pushNotificationDeliveryOption:(enum SBDPushNotificationDeliveryOption)pushNotificationDeliveryOption metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays mentionType:(enum SBDMentionType)mentionType mentionedUserIds:(NSArray<NSString *> * _Nullable)mentionedUserIds parentMessageId:(int64_t)parentMessageId isReplyToChannel:(BOOL)isReplyToChannel appleCriticalAlertOptions:(SBDAppleCriticalAlertOptions * _Nullable)appleCriticalAlertOptions SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWith:(SBDBaseMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end


/// An object contains set of options to send <code>ScheduleUserMessage</code>
/// since:
/// 3.0.119
SWIFT_CLASS_NAMED("ScheduledUserMessageCreateParams")
@interface SBDScheduledUserMessageCreateParams : SBDUserMessageCreateParams
/// The scheduled date to send a message. (YYYY-MM-DD hh:mm)
@property (nonatomic, readonly, copy) NSString * _Nullable scheduledDateTimeString;
/// The timezone for the scheduled date to send a message.
@property (nonatomic, readonly, copy) NSString * _Nullable scheduledTimezone;
/// Parameter constructor
/// \param message The text message to be sent.
///
/// \param year Year (YYYY), e.g. 2018.
///
/// \param month Month (1~12).
///
/// \param day Day (1~31).
///
/// \param hour Hour (0~23).
///
/// \param min Minute (0~59).
///
/// \param timezone The timezone.
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message year:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hour:(NSInteger)hour min:(NSInteger)min timezone:(NSString * _Nonnull)timezone OBJC_DESIGNATED_INITIALIZER;
/// Sets the specific time to send a message.
/// \param year Year (YYYY), e.g. 2018.
///
/// \param month Month (1~12).
///
/// \param day Day (1~31).
///
/// \param hour Hour (0~23).
///
/// \param min Minute (0~59).
///
/// \param timezone The timezone.
///
///
/// returns:
/// <code>true</code> if the values are valid.
- (BOOL)setScheduleWithYear:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hour:(NSInteger)hour min:(NSInteger)min timezone:(NSString * _Nonnull)timezone;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithMessage:(SBDUserMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end

/// Scheduled user message status
typedef SWIFT_ENUM_NAMED(NSInteger, SBDScheduledUserMessageStatus, "ScheduledUserMessageStatus", open) {
  SBDScheduledUserMessageStatusScheduled = 0,
  SBDScheduledUserMessageStatusSent = 1,
  SBDScheduledUserMessageStatusCanceled = 2,
  SBDScheduledUserMessageStatusFailed = 3,
};

enum SBDWebSocketConnectionState : NSInteger;
@protocol SBDUserEventDelegate;
@protocol SBDSessionDelegate;
@class SBDUnreadItemKey;
@class SBDUnreadItemCount;
@class SBDUserUpdateParams;

/// The <code>SendbirdChat</code> is the core class for Sendbird. This class is singletone instance which is initialized by Application ID.
/// This class provides the methods for overall operations. The methods include <code>BaseChannelDelegate</code> registration for receiving events
/// that are related to channels, <code>ConnectionDelegate</code> for managing the connection status, updating the current user’s information,
/// registration for APNS push notification and blocking other users.
SWIFT_CLASS("_TtC12SendbirdChat12SendbirdChat")
@interface SendbirdChat : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isActive;)
+ (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the SDK version.
///
/// returns:
/// The SDK version.
+ (NSString * _Nonnull)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Gets the Application ID which was used for initialization.
///
/// returns:
/// The Application ID.
+ (NSString * _Nullable)getApplicationId SWIFT_WARN_UNUSED_RESULT;
/// Sets the version of the app that uses the Sendbird SDK. The version will be used when the debugging is needed.
/// since:
/// 3.1.3
/// \param appVersion The version of the app.
///
+ (void)setAppVersionWithVersion:(NSString * _Nullable)version;
/// Gets initializing state.
///
/// returns:
/// If <code>true</code>, <code>SendbirdChat</code> instance is initialized.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isInitialized;)
+ (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
/// Initializes <code>SendbirdChat</code> singleton instance with Sendbird Application ID.
/// The Application ID is on Sendbird dashboard. This method has to be run first in order to user Sendbird.
/// since:
/// 3.0.227
/// \param params <code>InitParams</code> object
///
/// \param migrationStartHandler handler that notifies when local cache migration has started
///
/// \param completionHandler handler that notifies when local cache is ready to use
///
///
/// returns:
/// <code>true</code> if the applicationId is set.
+ (BOOL)initializeWithParams:(SBDInitParams * _Nonnull)params migrationStartHandler:(void (^ _Nullable)(void))migrationStartHandler completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Performs a connection to Sendbird with the user ID.
/// \param userId The user ID.
///
/// \param completionHandler The handler block to execute. <code>user</code> is the object to represent the current user.
///
+ (void)connectWithUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Performs a connection to Sendbird with the user ID and the access token.
/// \param userId The user ID.
///
/// \param authToken The auth token. If the user doesn’t have auth token, set nil.
///
/// \param completionHandler The handler block to execute. <code>user</code> is the object to represent the current user.
///
+ (void)connectWithUserId:(NSString * _Nonnull)userId authToken:(NSString * _Nullable)authToken completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Performs a connection to Sendbird with the user ID and the access token.
/// seealso:
/// <code>connect(userId:authToken:completionHandler:)</code>
/// warning:
/// <em>Important</em>: DON’T use this method. This method will be unavailable.
/// \param userId userId
///
/// \param authToken authToken
///
/// \param apiHost apiHost
///
/// \param wsHost wsHost
///
/// \param completionHandler completionHandler
///
+ (void)connectWithUserId:(NSString * _Nonnull)userId authToken:(NSString * _Nullable)authToken apiHost:(NSString * _Nullable)apiHost wsHost:(NSString * _Nullable)wsHost completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Disconnects from Sendbird. If this method is invoked, the current user will be invalidated.
/// \param completionHandler The handler block to execute.
///
+ (void)disconnectWithCompletionHandler:(void (^ _Nullable)(void))completionHandler;
/// Starts reconnection explictly. The <code>ConnectionDelegate</code> delegates will be invoked by the reconnection process.
///
/// returns:
/// <code>true</code> if there is the data to be used for reconnection.
+ (BOOL)reconnect;
/// The completion handler of background session.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable backgroundSessionCompletionHandler)(void);)
+ (void (^ _Nullable)(void))backgroundSessionCompletionHandler SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackgroundSessionCompletionHandler:(void (^ _Nullable)(void))newValue;
/// Gets information set in the Application.
/// since:
/// 3.0.180
+ (SBDAppInfo * _Nullable)getAppInfo SWIFT_WARN_UNUSED_RESULT;
/// Gets the WebSocket server connection state.
///
/// returns:
/// <code>WebSocketConnectionState</code> indicating socket connection state
+ (enum SBDWebSocketConnectionState)getConnectState SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>ApplicationUserListQuery</code> instance for getting a list of all users of this application.
/// since:
/// 3.0.120
///
/// returns:
/// <code>ApplicationUserListQuery</code> instance
+ (SBDApplicationUserListQuery * _Nonnull)createApplicationUserListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>BlockedUserListQuery</code> instance for getting a list of blocked users by the current user.
///
/// returns:
/// <code>BlockedUserListQuery</code> instance.
+ (SBDBlockedUserListQuery * _Nonnull)createBlockedUserListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>MessageSearchQuery</code> instance for message search
/// since:
/// 4.0.0
/// \param builder <code>MessageSearchQueryBuilder</code> builder
///
///
/// returns:
/// <code>MessageSearchQuery</code> instance
+ (SBDMessageSearchQuery * _Nonnull)createMessageSearchQueryWithBuilder:(SBDMessageSearchQueryBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
/// Adds the <code>ConnectionDelegate</code>.
/// \param delegate <code>ConnectionDelegate</code> delegate.
///
/// \param identifier The identifier for the delegate.
///
+ (void)addConnectionDelegate:(id <SBDConnectionDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes the <code>ConnectionDelegate</code> by identifier.
/// \param identifier The identifier for the delegate to be removed.
///
+ (void)removeConnectionDelegateForIdentifier:(NSString * _Nonnull)identifier;
/// Gets the delegate for connection by indentifer.
/// \param identifier The identifier for delegate.
///
///
/// returns:
/// <code>ConnectionDelegate</code> delegate.
+ (id <SBDConnectionDelegate> _Nullable)connectionDelegateForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Removes all connection delegates;
+ (void)removeAllConnectionDelegates;
/// Adds the <code>BaseChannelDelegate</code>.
/// \param delegate <code>BaseChannelDelegate</code> delegate.
///
/// \param identifier The identifier for delegate.
///
+ (void)addChannelDelegate:(id <SBDBaseChannelDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes the <code>BaseChannelDelegate</code> by identifier.
/// \param identifier The identifier for the delegate to be removed.
///
+ (void)removeChannelDelegateForIdentifier:(NSString * _Nonnull)identifier;
/// Gets the delegate for channel by indentifer.
/// \param identifier The identifier for delegate.
///
///
/// returns:
/// <code>BaseChannelDelegate</code> delegate.
+ (id <SBDBaseChannelDelegate> _Nullable)channelDelegateForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Removes all channel delegates
+ (void)removeAllChannelDelegates;
/// Gets a <code>UserEventDelegate</code>
/// \param identifier Identifier for delegate
///
///
/// returns:
/// <code>UserEventDelgate</code> if exists
+ (id <SBDUserEventDelegate> _Nullable)userEventDelegateForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Adds a <code>UserEventDelegate</code>
/// \param delegate <code>UserEventDelegate</code> instance
///
/// \param identifier String identifier for the delegate
///
+ (void)addUserEventDelegate:(id <SBDUserEventDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes a <code>UserEventDelegate</code>
/// \param identifier String identifier for the delegate
///
+ (void)removeUserEventDelegateForIdentifier:(NSString * _Nonnull)identifier;
/// Removes all registered user event delegates
+ (void)removeAllUserEventDelegates;
/// Adds a <code>SessionDelegate</code>
/// \param delegate <code>SessionDelegate</code> instance
///
+ (void)setSessionDelegate:(id <SBDSessionDelegate> _Nonnull)delegate;
/// Removes the <code>SessionDelegate</code>
+ (void)removeSessionDelegate;
/// Gets the pending push token.
///
/// returns:
/// Returns the pending push token.
+ (NSData * _Nullable)getPendingPushToken SWIFT_WARN_UNUSED_RESULT;
/// Registers the current device token to Sendbird.
/// \param devToken Device token for APNS.
///
/// \param unique If <code>true</code>, register device token after removing exsiting all device tokens of the current user.
/// If <code>false</code>, just add the device token.
///
/// \param completionHandler The handler block to execute. <code>status</code> is the status for push token registration.
/// It is defined in <code>PushTokenRegistrationStatus</code>. <code>.success</code> represents the <code>devToken</code> is registered.
/// <code>.pending</code> represents the <code>devToken</code> is not registered because the connection is not established,
/// so this method has to be invoked with <code>getPendingPushToken</code> method after the connection.
/// The <code>devToken</code> is retrived by <code>getPendingPushToken</code>. <code>.error</code> represents the push token registration is failed.
///
+ (void)registerDevicePushToken:(NSData * _Nonnull)devToken unique:(BOOL)unique completionHandler:(void (^ _Nullable)(enum SBDPushTokenRegistrationStatus, SBError * _Nullable))completionHandler;
/// Unregisters the current device token from Sendbird.
/// \param devToken Device token for APNS.
///
/// \param completionHandler The handler block to execute.
///
+ (void)unregisterPushToken:(NSData * _Nonnull)devToken completionHandler:(void (^ _Nullable)(NSDictionary * _Nullable, SBError * _Nullable))completionHandler;
/// Unregisters all device tokens for the current user from Sendbird.
/// \param completionHandler The handler block to execute.
///
+ (void)unregisterAllPushTokenWithCompletionHandler:(void (^ _Nullable)(NSDictionary * _Nullable, SBError * _Nullable))completionHandler;
/// Requests device push tokens list of current user after the token.
/// since:
/// 3.0.134
/// \param token The token used to get next pagination of deive push tokens.
///
/// \param pushTokenType The enum type to represent the type of push token.
///
/// \param completionHandler The handler block to be executed after requests. This block has no
/// return value and takes 5 arguments that are device push token list, push token type you are
/// requesting, boolean that indicates having next pagination, token to be used next pagination and error.
///
+ (void)getMyPushTokensWithToken:(NSString * _Nullable)token pushTokenType:(enum SBDPushTokenType)pushTokenType completionHandler:(void (^ _Nonnull)(NSArray<NSString *> * _Nonnull, enum SBDPushTokenType, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Sets Do-not-disturb.
/// This method make snooze(or stop snooze) repeatedly.
/// If you want to snooze specific period, use <code>setSnoozePeriodEnable(:startTimestamp:endTimestamp:completionHandler:)</code>.
/// \param enable Enables or not.
///
/// \param startHour Start hour.
///
/// \param startMin Start minute.
///
/// \param endHour End hour.
///
/// \param endMin End minute.
///
/// \param timezone Sets timezone.
///
/// \param completionHandler The handler block to execute.
///
+ (void)setDoNotDisturbWithEnable:(BOOL)enable startHour:(int32_t)startHour startMin:(int32_t)startMin endHour:(int32_t)endHour endMin:(int32_t)endMin timezone:(NSString * _Nonnull)timezone completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets Do-not-disturb.
/// \param completionHandler The handler block to execute.
///
+ (void)getDoNotDisturbWithCompletionHandler:(void (^ _Nullable)(BOOL, NSInteger, NSInteger, NSInteger, NSInteger, NSString * _Nonnull, SBError * _Nullable))completionHandler;
/// Makes a current user snooze/receive remote push notification in specific duration.
/// If you use <code>SendbirdChat setDoNotDisturb(enable:startHour:startMin:endHour:endMin:timezone:completionHandler:)</code> method as well, both methods are applied together.
/// Keep in mind snoozing(or stop snoozing) is applied from this method <em>only once</em>, not repeatedly.
/// If you want to snooze(do not disturb) repeatedly, use <code>SendbirdChat setDoNotDisturb(enable:startHour:startMin:endHour:endMin:timezone:completionHandler:)</code>.
/// since:
/// 3.0.128
/// \param enabled Enabled means snooze remote push notification in duration. If set to disabled, current user can ///receive remote push notification.
///
/// \param startTimestamp Unix timestamp to start snooze.
///
/// \param endTimestamp Unix timestamp to end snooze.
///
/// \param completionHandler The handler block to execute when setting notification snoozed is complete.
///
+ (void)setSnoozePeriodWithEnabled:(BOOL)enabled startTimestamp:(int64_t)startTimestamp endTimestamp:(int64_t)endTimestamp completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Requests whether the current user snooze remote push notification.
/// since:
/// 3.0.128
/// \param completionHandler The handler block to execute when setting notification snoozed is complete.
///
+ (void)getSnoozePeriod:(void (^ _Nonnull)(BOOL, int64_t, int64_t, SBError * _Nullable))completionHandler;
/// Changes a setting that decides which push notification for the current user to receive in all of the group channel.
/// since:
/// 3.0.128
/// \param pushTriggerOption The options to choose which push notification for the current user to receive.
///
/// \param completionHandler The handler block to execute when setting a push trigger option of the current ///user is completed.
///
+ (void)setPushTriggerOption:(enum SBDPushTriggerOption)pushTriggerOption completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Requests a setting that decides which push notification for the current user to receive in all of the group channel.
/// since:
/// 3.0.128
/// \param completionHandler The handler block to execute when getting a push trigger of the current user is ///completed.
///
+ (void)getPushTriggerOptionWithCompletionHandler:(void (^ _Nonnull)(enum SBDPushTriggerOption, SBError * _Nullable))completionHandler;
/// Sets push sound
/// \param sound Push sound
///
/// \param completionHandler The handler block to be executed after set push sound.
///
+ (void)setPushSound:(NSString * _Nonnull)sound completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets push shound
/// \param completionHandler The handler block to execute.
///
+ (void)getPushSoundWithCompletionHandler:(void (^ _Nullable)(NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Sets a push template of the current user.
/// \param name The name of push template. Uses <code>SendbirdChat.PushTemplate</code> constants
///
/// \param completionHandler The handler block to execute.
///
+ (void)setPushTemplateWithName:(NSString * _Nonnull)name completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets a push template of the current user.
/// \param completionHandler The handler block to execute. The <code>name</code> is the current user’s push template.
///
+ (void)getPushTemplateWithCompletionHandler:(void (^ _Nullable)(NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Sets group channel invitation preference for auto acceptance.
/// \param autoAccept If <code>true</code>, the current user will accept the group channel invitation automatically.
///
/// \param completionHandler The handler block to execute.
///
+ (void)setChannelInvitationPreferenceWithAutoAccept:(BOOL)autoAccept completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets group channel inviation preference for auto acceptance.
/// \param completionHandler The handler block to execute.
///
+ (void)getChannelInvitationPreferenceAutoAcceptWithCompletionHandler:(void (^ _Nullable)(BOOL, SBError * _Nullable))completionHandler;
/// Creates <code>FriendListQuery</code> instance for friend list
/// since:
/// 4.0.0
///
/// returns:
/// <code>FriendListQuery</code> instance
+ (SBDFriendListQuery * _Nonnull)createFriendListQuery SWIFT_WARN_UNUSED_RESULT;
/// Sets current user to be discoverable by others
/// since:
/// 3.0.205
/// \param allow if <code>true</code>, current user will be set to discoverable by others
///
+ (void)setAllowFriendDiscovery:(BOOL)allow completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets a flag whether current user is discoverable or not by others
/// since:
/// 3.0.205
+ (void)getAllowFriendDiscoveryWithCompletionHandler:(void (^ _Nullable)(BOOL, SBError * _Nullable))completionHandler;
/// Adds users as friend
/// \param userIds user ID list
///
/// \param completionHandler completion handler
///
+ (void)addFriendsWithUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes a given user ID from friend list
/// \param userId user id
///
/// \param completionHandler completion handler
///
+ (void)deleteFriendWithUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes a given list of user from friend list
/// \param userIds user ID list
///
/// \param completionHandler completion handler
///
+ (void)deleteFriendsWithUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes a friend with given discovery key
/// \param discoveryKey discovery key that associates with friend
///
/// \param completionHandler completion handler
///
+ (void)deleteFriendWithDiscoveryKey:(NSString * _Nonnull)discoveryKey completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes list of friends with given discovery keys
/// \param discoveryKeys list of discovery key that associates with friends
///
/// \param completionHandler completion handler
///
+ (void)deleteFriendsWithDiscoveryKeys:(NSArray<NSString *> * _Nonnull)discoveryKeys completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Uploads discovery key and corresponding name
/// \param discoveryKeyAndNames a dictionary contains discovery key as key and name as value
///
/// \param completionHandler completion handler
///
+ (void)uploadFriendDiscoveries:(NSDictionary<NSString *, NSString *> * _Nonnull)discoveryKeyAndNames completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Fetches friends’ change log
/// \param token a string to pagniate next page
///
/// \param completionHandler completion handler
///
+ (void)getFriendChangeLogsWithToken:(NSString * _Nullable)token completionHandler:(void (^ _Nullable)(NSArray<SBDUser *> * _Nullable, NSArray<NSString *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the number of group channel with the filter.
/// since:
/// 3.0.116
/// \param memberStateFilter The member state of the current user in the channels that are counted.
///
/// \param completionHandler The handler block to execute.
///
+ (void)getGroupChannelCountWithMemberStateFilter:(enum SBDMemberStateFilter)memberStateFilter completionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Gets the total unread channel count of all group channels.
/// since:
/// 3.0.116
/// \param completionHandler The handler block to execute. The <code>unreadCount</code> is the total count
/// of unread channels in all of group channel which the current is a member.
///
+ (void)getTotalUnreadChannelCountWithCompletionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Gets the total unread channel count of all group channels with filters of params.
/// <ul>
///   <li>
///     Since 3.1.7
///   </li>
/// </ul>
/// \param params The instance of parameters to filter. 
///
/// \param completionHandler The handler block to execute. The <code>unreadCount</code> is the total
/// count of unread group channels of which the current user is a member, filtered by <code>params</code>.
///
+ (void)getTotalUnreadChannelCountWithParams:(SBDGroupChannelTotalUnreadChannelCountParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Gets the number of unread messages in group channels.
/// since:
/// 3.0.116
/// \param completionHandler The handler block to execute. The <code>unreadCount</code> is the
/// total count of unread messages in all of group channel which the current is a member.
///
+ (void)getTotalUnreadMessageCountWithCompletionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Gets the total unread message count of the channels with filters of params.
/// since:
/// 3.0.116
/// \param params The instance of parameters to filter.
///
/// \param completionHandler The handler block to be executed after getting total unread message
/// count. This block has no return value and takes two argument, the one is the number of unread message
/// and the other is error.
///
+ (void)getTotalUnreadMessageCountWithParams:(SBDGroupChannelTotalUnreadMessageCountParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Get unread counts of message and invitation counts in super and non_super channels.
/// since:
/// 3.0.116
/// \param key <code>UnreadItemKey</code> optionSets to contain count flags
///
/// \param completionHandler The handler block to be executed after getting unread item count.
/// This block has no return value and takes two argument. the one is type of UnreadItemCount that
/// contains unsinged interger for count you requested. the other is an error made when there is something
/// wrong to response.
///
+ (void)getUnreadItemCountWithKey:(SBDUnreadItemKey * _Nonnull)key completionHandler:(void (^ _Nonnull)(SBDUnreadItemCount * _Nullable, SBError * _Nullable))completionHandler;
/// Gets total unread message count for current user
+ (NSInteger)getSubscribedTotalUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// Gets total unread message count that is subscribed with custom types for current user
+ (NSInteger)getSubscribedCustomTypeTotalUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// Gets unread message count on channels with given custom type for current user
+ (NSInteger)getSubscribedCustomTypeUnreadMessageCountWithCustomType:(NSString * _Nonnull)customType SWIFT_WARN_UNUSED_RESULT;
/// Marks as read all group channels of the current user.
/// \param completionHandler The handler block to execute.
///
+ (void)markAsReadAllWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Marks as read some group channels of the current user.
/// \param channelURLs The array list with channel urls to be marked as read.
///
/// \param completionHandler The handler block to execute.
///
+ (void)markAsReadWithChannelURLs:(NSArray<NSString *> * _Nonnull)channelURLs completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Marks as delivered with the payload of the remote notification.
/// since:
/// 3.0.183
/// \param remoteNotificationPayload The remote notification payload
///
/// \param completionHandler The handler block to execute
///
+ (void)markAsDeliveredWithRemoteNotificationPayload:(NSDictionary * _Nonnull)remoteNotificationPayload completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Requests updated channels and deleted channel URLs since a certain time. A certain time is decided by a token.
/// since:
/// 3.0.182
/// \param token The token used to get next pagination of changelogs.
///
/// \param params the parameter object that filters a result. See <code>GroupChannelChangeLogsParams</code> for more detail
///
/// \param completionHandler The handler type of <code>ChannelChangeLogsHandler</code> block to
/// execute. The <code>updatedChannels</code> is the channels that were updated. The <code>deletedChannelURLs</code>
/// is the list of the deleted channel URLs. If there are more changelogs that are not returned yet, the
/// <code>hasMore</code> is <code>true</code>. The <code>token</code> can be used to get more changedlogs.
///
+ (void)getMyGroupChannelChangeLogsWithToken:(NSString * _Nullable)token params:(SBDGroupChannelChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, NSArray<NSString *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Requests updated channels and deleted channel URLs since the timestamp.
/// since:
/// 3.0.182
/// \param timestamp The number of milli-seconds(msec). Requests changelogs from that time. This value must not be ///negative.
///
/// \param params the parameter object that filters a result. See <code>GroupChannelChangeLogsParams</code> for more detail
///
/// \param completionHandler The handler type of <code>ChannelChangeLogsHandler</code> block to
/// execute. The <code>updatedChannels</code> is the channels that were updated. The <code>deletedChannelURLs</code>
/// is the list of the deleted channel URLs. If there are more changelogs that are not returned yet, the
/// <code>hasMore</code> is <code>true</code>. The <code>token</code> can be used to get more changedlogs.
///
+ (void)getMyGroupChannelChangeLogsWithTimestamp:(int64_t)timestamp params:(SBDGroupChannelChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, NSArray<NSString *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Retrieves the log level.
///
/// returns:
/// Log level.
+ (SBDLogLevel * _Nonnull)getLogLevel SWIFT_WARN_UNUSED_RESULT;
/// Sets the log level. The log level is defined by <code>LogLevel</code>.
/// \param logLevel Log level.
///
+ (void)setLogLevel:(SBDLogLevel * _Nonnull)logLevel;
/// Gets mime type of file.
/// \param file File to get mime type.
///
///
/// returns:
/// Returns mime type of the file.
+ (NSString * _Nullable)getMimeType:(NSData * _Nullable)file SWIFT_WARN_UNUSED_RESULT;
/// Turns on or off the reconnection by network awareness.
/// \param isOn If <code>true</code>, the reconnection by network Awareness is turned.
///
+ (void)setNetworkAwarenessReconnection:(BOOL)isOn;
/// Sendbird user agent information getter.
+ (NSString * _Nonnull)getSBUserAgent SWIFT_WARN_UNUSED_RESULT;
/// Used to set the version information of the Sendbird SDK extension.
/// \param key Extension sdk’s hidden key
///
/// \param version Extension sdk’s version string
///
+ (void)addExtension:(NSString * _Nonnull)key version:(NSString * _Nonnull)version;
/// Initialize <code>sharedContainerIdentifier</code> of NSURLSessionConfiguration to use background
/// session.
/// important:
/// If you use <code>App Extension</code> and use upload file message in extension,
/// you <em>MUST</em> set thie field.
/// \param identifier The identifier to set background session configuraion.
///
+ (void)setSharedContainerIdentifier:(NSString * _Nonnull)identifier;
/// Sets dispatch queue for every completion handler and delegate. Default queue is the main queue.
/// \param queue Dispatch queue for every completion handler and delegate.
///
+ (void)setCompletionHandlerDelegateQueue:(dispatch_queue_t _Nonnull)queue;
/// Runs block in the dispatch queue that was set by <code>setCompletionHandlerDelegateQueue(_:)</code>.
/// \param block Block to run.
///
+ (void)performCompletionHandlerDelegateQueue:(void (^ _Nullable)(void))block;
/// Sets the app group.
/// since:
/// 3.0.183
/// \param appGroup The app group.
///
+ (void)setAppGroup:(NSString * _Nonnull)appGroup;
/// Gets the key to authenticate the file URL.
/// This has to be put into the HTTP header when the client needs to access it.
/// since:
/// 3.0.194
///
/// returns:
/// The key to authenticate the file URL
+ (NSString * _Nullable)ekey SWIFT_WARN_UNUSED_RESULT;
/// Requests a emoji container which contains hash and list of emoji category.
/// since:
/// 3.0.180
/// \param completionHandler The handler block to execute after request is completed
///
+ (void)getAllEmojis:(void (^ _Nullable)(SBDEmojiContainer * _Nullable, SBError * _Nullable))completionHandler;
/// Requests updated channels and deleted channel URLs since the timestamp.
/// since:
/// 3.0.180
/// \param emojiKey The emoji key
///
/// \param completionHandler The handler block to execute after request is completed
///
+ (void)getEmoji:(NSString * _Nonnull)emojiKey completionHandler:(void (^ _Nullable)(SBDEmoji * _Nullable, SBError * _Nullable))completionHandler;
/// Requests updated channels and deleted channel URLs since the timestamp.
/// since:
/// 3.0.180
/// \param categoryId The category id
///
/// \param completionHandler The handler block to execute after request is completed
///
+ (void)getEmojiCategory:(int64_t)categoryId completionHandler:(void (^ _Nullable)(SBDEmojiCategory * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the current user object.
/// The object is valid when the connection succeeded.
///
/// returns:
/// The current user object.
+ (SBDUser * _Nullable)getCurrentUser SWIFT_WARN_UNUSED_RESULT;
/// Gets the current user’s latest connection millisecond time(UTC).
/// If the connection state is not public, Returns 0.
/// since:
/// 3.0.117
///
/// returns:
/// latest connected millisecond time stamp.
+ (int64_t)getLastConnectedAt SWIFT_WARN_UNUSED_RESULT;
/// Updates the current user’s information
/// since:
/// 4.0.0
/// \param params <code>UserUpdateParams</code> instance
///
/// \param progressHandler The handler block to monitor progression. 
/// <code>bytesSent</code> is the number of bytes sent ///since the last time this method was called. <code>totalBytesSent</code>
/// is the total number of bytes sent so far. ///<code>totalBytesExpectedToSend</code> is the expected length of the body data.
///
+ (void)updateCurrentUserInfoWithParams:(SBDUserUpdateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Updates the current user’s preferred languages
/// \param preferredLanguages New array of preferred languages
///
/// \param completionHandler The handler block to execute.
///
+ (void)updateCurrentUserInfoWithPreferredLanguages:(NSArray<NSString *> * _Nonnull)preferredLanguages completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Blocks the specified user.
/// \param userId The user ID to be blocked.
///
/// \param completionHandler The handler block to execute. <code>blockedUser</code> is the blocked user by the current user.
///
+ (void)blockUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Blocks the specified user.
/// \param user The user to be blocked.
///
/// \param completionHandler The handler block to execute. <code>blockedUser</code> is the blocked user by the current user.
///
+ (void)blockUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Unblocks the specified user.
/// \param userId The user ID which was blocked.
///
/// \param completionHandler The handler block to execute.
///
+ (void)unblockUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Unblocks the specified user.
/// \param user The user who was blocked.
///
/// \param completionHandler The handler block to execute.
///
+ (void)unblockUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable sessionKey;)
+ (NSString * _Nullable)sessionKey SWIFT_WARN_UNUSED_RESULT;
/// Creates a group channel collection
/// \param query <code>GroupChannelListQuery</code> instance
///
///
/// returns:
/// <code>GroupChannelCollection</code> instance
+ (SBDGroupChannelCollection * _Nullable)createGroupChannelCollectionWithQuery:(SBDGroupChannelListQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Creates a message collection
/// \param channel <code>GroupChannel</code> instance
///
/// \param startingPoint Epoch timestamp that will be used as pivot point to fetch messages
///
/// \param params <code>MessageListParams</code> instance
///
+ (SBDMessageCollection * _Nullable)createMessageCollectionWithChannel:(SBDGroupChannel * _Nonnull)channel startingPoint:(int64_t)startingPoint params:(SBDMessageListParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Clears local cached data
/// \param completionHandler completion 
///
+ (void)clearCachedDataWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Returns local cached data size in byte
///
/// returns:
/// cached data size
+ (NSInteger)getCachedDataSize SWIFT_WARN_UNUSED_RESULT;
/// Checks if local caching is enabled.
/// since:
/// 3.1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLocalCachingEnabled;)
+ (BOOL)isLocalCachingEnabled SWIFT_WARN_UNUSED_RESULT;
@end


@interface SendbirdChat (SWIFT_EXTENSION(SendbirdChat))
@end


SWIFT_CLASS_NAMED("PushTemplate")
@interface SBDPushTemplate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents SendbirdChat options.
SWIFT_CLASS("_TtC12SendbirdChat19SendbirdChatOptions")
@interface SendbirdChatOptions : NSObject
/// Gets the value whether the sender information of <code>sender</code> of <code>UserMessage</code> or
/// <code>FileMessage</code> such as nickname and profile url will be returned as the latest user’s or not.
///
/// returns:
/// <code>true</code> if the sender is the latest information.
+ (BOOL)useMemberAsMessageSender SWIFT_WARN_UNUSED_RESULT;
/// Sets <code>useMemberAsMessageSender</code>
/// If set <code>true</code>, the sender information of <code>sender</code> of <code>UserMessage</code> or <code>FileMessage</code>
/// such as nickname and profile url will be returned as the latest user’s. Otherwise, the information will be
/// the value of the message creation time.
/// \param value <code>Bool</code> value
///
+ (void)setUseMemberAsMessageSender:(BOOL)value;
/// Gets connection timeout
+ (NSTimeInterval)getConnectionTimeout SWIFT_WARN_UNUSED_RESULT;
/// Sets the timeout for connection.
/// If there is a timeout error frequently, set the longer timeout than default value. The default is 10 seconds.
/// \param timeout timeout for connection.
///
+ (void)setConnectionTimeout:(NSInteger)timeout;
/// Gets typing indicator throttle
+ (NSTimeInterval)getTypingIndicatorThrottle SWIFT_WARN_UNUSED_RESULT;
/// Sets a term of typing indicator throttling in group channel.
/// After this throttling interval from typing indicator started (or ended), You can re-start (or re-end) typing indicator.
/// If you call start (or end) again in this interval, the call will be ignored.
/// since:
/// 3.0.100
/// \param interval A time interval that can renew typing indicator. can be RANGE from 1.0 to 9.0.
///
+ (void)setTypingIndicatorThrottle:(NSTimeInterval)interval;
/// Gets file trnasfer timeout
+ (NSTimeInterval)getFileTransferTimeout SWIFT_WARN_UNUSED_RESULT;
/// Sets the timeout for file transfer.
/// This value affects the methods that send a binary data including sending
/// file messages, creating and updating channels.
/// since:
/// 3.0.130
/// \param timeout Timeout in seconds. It must be greater than 0. Otherwise, the default value (60 seconds) will be set.
///
+ (void)setFileTransferTimeout:(NSInteger)timeout;
/// Gets websocket response timeout
+ (NSTimeInterval)getWebSocketResponseTimeout SWIFT_WARN_UNUSED_RESULT;
/// Sets the websocket response timeout used in sending/receiving commmands by websocket.
/// The value should be between 5 seconds and 300 seconds (5 minutes).
/// The default value is 10 seconds.
/// since:
/// 3.0.199
/// \param timeout Timeout in seconds.
///
+ (void)setWebSocketResponseTimeout:(NSInteger)timeout;
/// Gets include poll detail
/// if <code>true</code>, <code>Poll</code> contains its full representation including <code>PollDetails</code>, otherwise <code>PollDetails</code> will be <code>nil</code>
+ (BOOL)includePollDetails SWIFT_WARN_UNUSED_RESULT;
/// Sets the websocket response to include full poll representation if it exists in a message
/// since:
/// 3.0.232
/// \param value whether poll to be included in a message or not
///
+ (void)setIncludePollDetails:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents a user that typically binds with message
SWIFT_CLASS_NAMED("Sender")
@interface SBDSender : SBDUser
/// If <code>true</code>, the current user blocked the sender.
@property (nonatomic) BOOL isBlockedByMe;
/// The role of the sender in the channel.
/// since:
/// 3.0.198
@property (nonatomic) enum SBDRole role;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth isBlockedByMe:(BOOL)isBlockedByMe role:(enum SBDRole)role OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth SWIFT_UNAVAILABLE;
@end


@interface SBDSender (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>Sender</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// Represents a delegate to receive session relates events
SWIFT_PROTOCOL_NAMED("SessionDelegate")
@protocol SBDSessionDelegate
/// App needs to fetch a new token.
/// Pass on the new (retrieved) token to SDK via <code>success(NEW_TOKEN)</code> or <code>fail()</code> if fetch failed.
/// In case when app decides not to refresh the session for this user, they should call <code>success(nil)</code>.
/// since:
/// 3.0.205
/// \param success Call this block method after retrieving a new token. In case when
/// app decides not to refresh the session for this user, they should call this with <code>nil</code>.
///
/// \param fail Call this block method when failed to retrieve a new token.
///
- (void)sessionTokenDidRequireWithSuccessCompletion:(void (^ _Nonnull)(NSString * _Nullable))success failCompletion:(void (^ _Nonnull)(void))fail;
/// Called when the SDK can’t refresh the session.
/// App should force a user to a login page to connect again.
/// since:
/// 3.0.205
- (void)sessionWasClosed;
@optional
/// Called when session key is expired.
/// since:
/// 3.0.205
/// note:
/// unavailable since 3.0.236
- (void)sessionWasExpired SWIFT_UNAVAILABLE;
/// Called when SDK refreshed the session key.
/// since:
/// 3.0.205
- (void)sessionWasRefreshed;
/// Called when the SDK run into an error while refreshing the session key.
/// since:
/// 3.0.205
/// \param error Error object
///
- (void)sessionDidHaveError:(SBError * _Nonnull)error;
@end


SWIFT_CLASS("_TtC12SendbirdChat22SessionWebSocketEngine") SWIFT_AVAILABILITY(ios,introduced=13)
@interface SessionWebSocketEngine : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionWebSocketTask;

SWIFT_AVAILABILITY(ios,introduced=13)
@interface SessionWebSocketEngine (SWIFT_EXTENSION(SendbirdChat)) <NSURLSessionDataDelegate, NSURLSessionWebSocketDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didOpenWithProtocol:(NSString * _Nullable)protocol;
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didCloseWithCode:(NSURLSessionWebSocketCloseCode)closeCode reason:(NSData * _Nullable)reason;
@end



SWIFT_CLASS("_TtC12SendbirdChat16StarscreamEngine")
@interface StarscreamEngine : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// An object that represents the information about threaded messages, whose properties show how many
/// replies the thread has received, who left the replies, and when the last reply was added.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("ThreadInfo")
@interface SBDThreadInfo : NSObject
/// The total number of replies in a specific thread. A value of 0 indicates there is no reply in the thread.
@property (nonatomic, readonly) NSInteger replyCount;
/// Users who left most replies in the thread. The order of users is based on the number of replies they
/// made in the thread and the maximum size of the array can be adjusted per request.
@property (nonatomic, readonly, copy) NSArray<SBDUser *> * _Nonnull mostRepliedUsers;
/// The time that the last reply was created, in Unix milliseconds format. A value of 0 indicates there is no reply in the thread.
@property (nonatomic, readonly) int64_t lastRepliedAt;
@property (nonatomic, readonly) int64_t updatedAt;
- (nonnull instancetype)initWithReplyCount:(NSInteger)replyCount mostRepliedUsers:(NSArray<SBDUser *> * _Nonnull)mostRepliedUsers lastRepliedAt:(int64_t)lastRepliedAt updatedAt:(int64_t)updatedAt OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that is returned through the event handler when a threaded reply is added or deleted.
/// This object should be applied to the parent message.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("ThreadInfoUpdateEvent")
@interface SBDThreadInfoUpdateEvent : NSObject
/// An object that has the information about threaded messages.
@property (nonatomic, readonly, strong) SBDThreadInfo * _Nonnull threadInfo;
/// The unique ID of the message that contains thread information.
@property (nonatomic, readonly) int64_t targetMessageId;
/// The unique URL of the channel where threaded messages belong.
@property (nonatomic, readonly, copy) NSString * _Nonnull channelURL;
/// The type of the channel where threaded messages belong.
@property (nonatomic, readonly) enum SBDChannelType channelType;
- (nonnull instancetype)initWithThreadInfo:(SBDThreadInfo * _Nonnull)threadInfo targetMessageId:(int64_t)targetMessageId channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object contains set of options to retrieve threaded messages.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("ThreadedMessageListParams")
@interface SBDThreadedMessageListParams : NSObject <NSCopying>
/// The number of messages to retrieve that were sent before the specified timestamp or message ID. Default is 0
@property (nonatomic) NSInteger previousResultSize;
/// The number of messages to retrieve that were sent after the specified timestamp or message ID. Default is 0
@property (nonatomic) NSInteger nextResultSize;
/// Determines whether to include the messages with the matching timestamp or message ID in the results. Default is <code>false</code>
@property (nonatomic) BOOL isInclusive;
/// Determines whether to sort the retrieved messages in reverse order. If <code>false</code>, the results are in ascending order. Default is <code>false</code>
@property (nonatomic) BOOL reverse;
/// Restricts the search scope only to retrieve the messages with the specified message type. Default is <code>.all</code>
@property (nonatomic) enum SBDMessageTypeFilter messageType;
/// Restricts the search scope only to retrieve the messages with the specified custom message type.
/// When the custom type filtering is not needed, the value should be set to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable customType;
/// Restricts the search scope only to retrieve the messages sent by the users with the specified user
/// IDs. When the user ID filtering is not needed, the value should be set to <code>nil</code>.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable senderUserIds;
/// Determines whether to include the metaarray information of the messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeMetaArray;
/// Determines whether to include the reactions to the messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the message when it is a parent message. Default is <code>false</code>
/// <ul>
///   <li>
///     Since 3.0.236
///   </li>
/// </ul>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Restricts the search scope only to retrieve the messages with the multiple specified custom
/// message types. When the custom type filtering is not needed, the value should be set to <code>nil</code>.
/// note:
/// The default value is <code>nil</code>.
/// since:
/// 3.0.213
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypes;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Parameter constructor
- (nonnull instancetype)initWithPreviousResultSize:(NSInteger)previousResultSize nextResultSize:(NSInteger)nextResultSize isInclusive:(BOOL)isInclusive reverse:(BOOL)reverse messageType:(enum SBDMessageTypeFilter)messageType customType:(NSString * _Nullable)customType senderUserIds:(NSArray<NSString *> * _Nullable)senderUserIds includeMetaArray:(BOOL)includeMetaArray includeReactions:(BOOL)includeReactions includeParentMessageInfo:(BOOL)includeParentMessageInfo customTypes:(NSArray<NSString *> * _Nullable)customTypes OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>ThreadedMessageListParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a thumbnail information
SWIFT_CLASS_NAMED("Thumbnail")
@interface SBDThumbnail : NSObject
/// The url of the thumbnail.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The maximum size of the thumbnail.
@property (nonatomic, readonly) CGSize maxSize;
/// The real size of the thumbnail.
@property (nonatomic, readonly) CGSize realSize;
/// The file URL without the ekey.
/// since:
/// 3.0.194
@property (nonatomic, readonly, copy) NSString * _Nullable plainURL;
@property (nonatomic) BOOL requireAuth;
@property (nonatomic, copy) NSString * _Nullable ekey;
/// Parameter constructor
- (nonnull instancetype)initWithMaxSize:(CGSize)maxSize realSize:(CGSize)realSize plainURL:(NSString * _Nullable)plainURL requireAuth:(BOOL)requireAuth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDThumbnail (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDThumbnail (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>Thumbnail</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ThumbnailSize</code> class represents the thumbnail size of thumbnail.
SWIFT_CLASS_NAMED("ThumbnailSize")
@interface SBDThumbnailSize : NSObject
/// The max size of the thumbnail.
@property (nonatomic, readonly) CGSize maxSize;
/// Creates <code>ThumbnailSize</code> object with <code>CGSize</code>.
/// \param maxSize The max size of the thumbnail.
///
///
/// returns:
/// <code>ThumbnailSize</code> object.
+ (SBDThumbnailSize * _Nonnull)makeWithMaxCGSize:(CGSize)maxSize SWIFT_WARN_UNUSED_RESULT;
/// Makes <code>ThumbnailSize</code> object with width and height.
/// \param maxWidth The max width of the thumbnail.
///
/// \param maxHeight The max height of the thumbnail.
///
///
/// returns:
/// <code>ThumbnailSize</code> object.
+ (SBDThumbnailSize * _Nonnull)makeWithMaxWidth:(CGFloat)maxWidth maxHeight:(CGFloat)maxHeight SWIFT_WARN_UNUSED_RESULT;
/// Makes <code>ThumbnailSize</code> object with thumbnail
/// \param thumbnail <code>Thumbnail</code> object
///
///
/// returns:
/// <code>ThumbnailSize</code> object.
+ (SBDThumbnailSize * _Nonnull)makeWithThumbnail:(SBDThumbnail * _Nonnull)thumbnail SWIFT_WARN_UNUSED_RESULT;
/// Default constructor.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The enum type to filter my group channels.
/// since:
/// 3.0.113
typedef SWIFT_ENUM_NAMED(NSInteger, SBDUnreadChannelFilter, "UnreadChannelFilter", open) {
/// Shows all my group channels.
  SBDUnreadChannelFilterAll = 0,
/// Shows my group channels that have unread messages.
  SBDUnreadChannelFilterUnreadMessage = 1,
};


/// The <code>UnreadItemCount</code> class represents counts of messages. The instance of this class is returned
/// from completion handler in <code>getUnreadItemCountWithKey:completionHandler:]</code>.
SWIFT_CLASS_NAMED("UnreadItemCount")
@interface SBDUnreadItemCount : NSObject
/// The count of unread message in all of group channels.
/// When you requested with <code>UnreadItemKey.groupChannelUnreadMessageCount</code>, then you
/// can get unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.groupChannelUnreadMessageCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger groupChannelUnreadMessageCount;
/// The count of unread message in all of non super group channel.
/// When you requested with <code>UnreadItemKey.nonSuperUnreadMessageCount</code>, then you can
/// get unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.nonSuperUnreadMessageCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.101
@property (nonatomic) NSUInteger nonSuperUnreadMessageCount;
/// The count of unread message in all of non super group channel.
/// When you requested with <code>UnreadItemKey.superUnreadMessageCount</code>, then you can get
/// unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.superUnreadMessageCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.101
@property (nonatomic) NSUInteger superUnreadMessageCount;
/// The count of unread mention in all of group channels.
/// When you requested with <code>UnreadItemKey.groupChannelUnreadMentionCount</code>, then you
/// can get unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.groupChannelUnreadMentionCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger groupChannelUnreadMentionCount;
/// The count of unread mention in all of non super group channel.
/// When you requested with <code>UnreadItemKey.nonSuperUnreadMentionCount</code>, then you can
/// get unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.nonSuperUnreadMentionCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger nonSuperUnreadMentionCount;
/// The count of unread mention in all of non super group channel.
/// When you requested with <code>UnreadItemKey.superUnreadMentionCount</code>, then you can get
/// unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.superUnreadMentionCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger superUnreadMentionCount;
/// The count of unread message in all of group channels.
/// When you requested with <code>UnreadItemKey.superInvitationCount</code>, then you can get unsigned
/// integer count. If you DID NOT REQUEST <code>UnreadItemKey.superInvitationCount</code>, this
/// property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger groupChannelInvitationCount;
/// The count of unread message in all of non super group channel.
/// When you requested with <code>UnreadItemKey.nonSuperInvitationCount</code>, then you can get
/// unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.nonSuperInvitationCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.101
@property (nonatomic) NSUInteger nonSuperInvitationCount;
/// The count of unread message in all of non super group channel.
/// When you requested with <code>UnreadItemKey.superInvitationCount</code>, then you can get unsigned
/// integer count. If you DID NOT REQUEST <code>UnreadItemKey.superInvitationCount</code>, this
/// property will be <code>NSNotFound</code>.
/// since:
/// 3.0.101
@property (nonatomic) NSUInteger superInvitationCount;
/// Returns a Boolean value that indicates whether a count of a given key is present, not NSNotFound.
/// since:
/// 3.0.101
/// \param key An key to look for a count in the instance.
///
///
/// returns:
/// <code>true</code> if counts for key is present in the instance, otherwise <code>false</code>.
- (BOOL)has:(SBDUnreadItemKey * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns count for a given key.
/// since:
/// 3.0.101
/// \param key An key to get a count in the instance.
///
///
/// returns:
/// Unsinged integer of the count for a given key. If key is composed of
/// multiple UnreadItemKey, the return value is combined.
- (NSUInteger)unsignedIntegerForKey:(SBDUnreadItemKey * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBDUnreadItemCount (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


/// The bitmask keys of count about unread messages or invitation.
SWIFT_CLASS_NAMED("UnreadItemKey")
@interface SBDUnreadItemKey : NSObject
@property (nonatomic) NSInteger rawValue;
/// Default constructor.
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
/// The bitmask key for unread message count of non super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull nonSuperUnreadMessageCount;)
+ (SBDUnreadItemKey * _Nonnull)nonSuperUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread message count of super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull superUnreadMessageCount;)
+ (SBDUnreadItemKey * _Nonnull)superUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for invitation count of non super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull nonSuperInvitationCount;)
+ (SBDUnreadItemKey * _Nonnull)nonSuperInvitationCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for invitation count of super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull superInvitationCount;)
+ (SBDUnreadItemKey * _Nonnull)superInvitationCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread mention count of non super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull nonSuperUnreadMentionCount;)
+ (SBDUnreadItemKey * _Nonnull)nonSuperUnreadMentionCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread mention count of non super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull superUnreadMentionCount;)
+ (SBDUnreadItemKey * _Nonnull)superUnreadMentionCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread message count of group channel(super and non-super).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull groupChannelUnreadMessageCount;)
+ (SBDUnreadItemKey * _Nonnull)groupChannelUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread mention count of group channel(super and non-super).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull groupChannelUnreadMentionCount;)
+ (SBDUnreadItemKey * _Nonnull)groupChannelUnreadMentionCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for invitation count of group channel(super and non-super).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull groupChannelInvitationCount;)
+ (SBDUnreadItemKey * _Nonnull)groupChannelInvitationCount SWIFT_WARN_UNUSED_RESULT;
/// Parameter constructor
/// \param keys array of <code>UnreadItemKey</code>
///
- (nonnull instancetype)initWithKeys:(NSArray<SBDUnreadItemKey *> * _Nonnull)keys;
/// hash
@property (nonatomic, readonly) NSUInteger hash;
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Union other into this key
- (void)formUnion:(SBDUnreadItemKey * _Nonnull)other;
/// Intersects other into this key
- (void)formIntersection:(SBDUnreadItemKey * _Nonnull)other;
/// Symmetric difference from other
- (void)formSymmetricDifference:(SBDUnreadItemKey * _Nonnull)other;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object contains information about updated vote count
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("UpdatedVoteCount")
@interface SBDUpdatedVoteCount : NSObject
/// option id
@property (nonatomic, readonly) int64_t optionId;
/// updated vote count for this option id
@property (nonatomic, readonly) NSUInteger voteCount;
@end



@interface SBDUser (SWIFT_EXTENSION(SendbirdChat)) <NSCopying>
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>User</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUser (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUser (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>User</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUser (SWIFT_EXTENSION(SendbirdChat))
/// Creates the meta data for the current user.
/// \param metaData The meta data to be set.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the
/// meta data which are set on Sendbird server.
///
- (void)createMetaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Updates the meta data for the current user.
/// \param metaData The meta data to be updated.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the
/// meta counters which are updated on Sendbird server.
///
- (void)updateMetaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes meta data with key for the current user.
/// \param key The key to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMetaDataWithKey:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes all meta data for the current user.
/// \param completionHandler The handler block to execute.
///
- (void)deleteAllMetaDataWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end

/// User connection statuses for <code>User</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDUserConnectionStatus, "UserConnectionStatus", open) {
/// For unavailable user.
  SBDUserConnectionStatusNonAvailable = 0,
/// For on-line user.
  SBDUserConnectionStatusOnline = 1,
/// For off-line user.
  SBDUserConnectionStatusOffline = 2,
};


/// Represents a delegate to receive user relates events
SWIFT_PROTOCOL_NAMED("UserEventDelegate")
@protocol SBDUserEventDelegate <NSObject>
@optional
/// Invoked when list of users has been discovered
/// \param friends list of user
///
- (void)didDiscoverFriends:(NSArray<SBDUser *> * _Nullable)friends;
/// Invoked when total unread message count has been updated
/// since:
/// 3.0.154
/// \param totalCount New total unread count
///
/// \param totalCountByCustomType Dictionary with key of custom tyeps and value of unread count
///
- (void)didUpdateTotalUnreadMessageCount:(int32_t)totalCount totalCountByCustomType:(NSDictionary<NSString *, NSNumber *> * _Nullable)totalCountByCustomType;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBDUserListQueryType, "UserListQueryType", open) {
  SBDUserListQueryTypeAllUsers = 1,
  SBDUserListQueryTypeBlockedUsers = 2,
  SBDUserListQueryTypeOpenChannelParticipants = 3,
  SBDUserListQueryTypeOpenChannelMutedUsers = 4,
  SBDUserListQueryTypeOpenChannelBannedUsers = 5,
  SBDUserListQueryTypeFilteredUsers = 6,
};


/// Represents a mesage object that contains a text message. Derived from <code>BaseMessage</code>.
SWIFT_CLASS_NAMED("UserMessage")
@interface SBDUserMessage : SBDBaseMessage
/// Poll that is linked to this message
/// since:
/// 3.0.232
@property (nonatomic, strong) SBDPoll * _Nullable poll;
/// Translated message text.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable translations;
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage poll:(SBDPoll * _Nullable)poll translations:(NSDictionary<NSString *, NSString *> * _Nullable)translations OBJC_DESIGNATED_INITIALIZER;
+ (SBDUserMessage * _Nullable)pendingMessageWithParams:(SBDUserMessageCreateParams * _Nonnull)params requestId:(NSString * _Nullable)requestId channel:(SBDBaseChannel * _Nonnull)channel sender:(SBDUser * _Nullable)sender isOperatorMessage:(BOOL)isOperatorMessage SWIFT_WARN_UNUSED_RESULT;
/// Applies updated poll data to this message object.
/// This method is designed to be called when <code>didUpdatePoll(:_)</code> event passes the poll object
/// since:
/// 3.0.232
/// \param pollUpdateEvent <code>PollUpdateEvent</code> instance
///
///
/// returns:
/// <code>true</code> if event is successfuly applied
- (BOOL)applyPollUpdateEvent:(SBDPollUpdateEvent * _Nonnull)pollUpdateEvent SWIFT_WARN_UNUSED_RESULT;
/// Applies updated poll data to this message object.
/// This method is designed to be called when <code>didVotePoll(_:)</code> event passes the vote event object
/// since:
/// 3.0.232
/// \param pollVoteEvent <code>PollVoteEvent</code> instance
///
///
/// returns:
/// <code>true</code> if event is successfuly applied all
- (BOOL)applyPollVoteEvent:(SBDPollVoteEvent * _Nonnull)pollVoteEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage SWIFT_UNAVAILABLE;
@end


@interface SBDUserMessage (SWIFT_EXTENSION(SendbirdChat))
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>UserMessage</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUserMessage (SWIFT_EXTENSION(SendbirdChat))
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>UserMessage</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUserMessage (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end



/// The <code>UserMessageUpdateParams</code> class is used to send a user message in <code>BaseChannel</code>. This is a child class of <code>BaseMessageUpdateParams</code>.
/// since:
/// 4.0.0
SWIFT_CLASS_NAMED("UserMessageUpdateParams")
@interface SBDUserMessageUpdateParams : SBDBaseMessageUpdateParams
/// Message text.
@property (nonatomic, copy) NSString * _Nullable message;
/// Links a poll with message, to unlink set it -1
@property (nonatomic) int64_t pollId;
/// Initializes an user message params for update
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of a user message params with message.
/// \param message The message to text.
///
- (nonnull instancetype)initWithMessage:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>UserMessageUpdateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithData:(NSString * _Nullable)data customType:(NSString * _Nullable)customType mentionType:(enum SBDMentionType)mentionType mentionedUserIds:(NSArray<NSString *> * _Nullable)mentionedUserIds SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWith:(SBDBaseMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end


/// An object to update user information
/// since:
/// 4.0.0
SWIFT_CLASS_NAMED("UserUpdateParams")
@interface SBDUserUpdateParams : NSObject
/// User’s nickname
@property (nonatomic, copy) NSString * _Nullable nickname;
/// User’s profile image url
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
/// User’s profile image data
@property (nonatomic, copy) NSData * _Nullable profileImageData;
/// Preferred langauges for this user
@property (nonatomic, copy) NSArray<NSString *> * _Nullable preferredLanguages;
/// User’s discovery keys for friends
@property (nonatomic, copy) NSArray<NSString *> * _Nullable discoveryKeys;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12SendbirdChat9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Connection state
typedef SWIFT_ENUM_NAMED(NSInteger, SBDWebSocketConnectionState, "WebSocketConnectionState", open) {
/// Connecting
  SBDWebSocketConnectionStateConnecting = 0,
/// Open
  SBDWebSocketConnectionStateOpen = 1,
/// Closed
  SBDWebSocketConnectionStateClosed = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef SENDBIRDCHAT_SWIFT_H
#define SENDBIRDCHAT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendbirdChat",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
enum SBDMessageSendingStatus : NSInteger;
@class SBDSender;
enum SBDChannelType : NSInteger;
@class SBDUser;
enum SBDMentionType : NSInteger;
@class SBDThreadInfo;
@class SBDMessageMetaArray;
@class SBDReaction;
@class SBDOGMetaData;
@class SBDPlugin;
@class SBDBaseMessageCreateParams;

/// The <code>BaseMessage</code> class represents the base message which is generated by a user or an admin.
/// The <code>UserMessage</code>, the <code>FileMessage</code> and the <code>AdminMessage</code> are derived from this class.
SWIFT_CLASS_NAMED("BaseMessage")
@interface SBDBaseMessage : NSObject <NSCopying>
@property (nonatomic, readonly, copy) NSObject * _Nullable uniqueKey;
/// Request ID for checking ACK.
@property (nonatomic, copy) NSString * _Nullable reqId;
@property (nonatomic, copy) NSString * _Nullable requestId;
@property (nonatomic, readonly) BOOL fromCurrentDevice;
/// Unique message ID.
@property (nonatomic, readonly) int64_t messageId;
/// Message text.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Represents the dispatch state of the message.
/// If message is not dispatched completely to the Sendbird server, the value is <code>.pending</code>.
/// If failed to send the message, the value is <code>.failed</code>.
/// And if success to send the message, the value is <code>.succeeded</code>.
/// since:
/// 3.0.173
@property (nonatomic) enum SBDMessageSendingStatus sendingStatus;
/// Sender of the <em>message</em>. This is represented by <code>Sender</code> class.
@property (nonatomic, strong) SBDSender * _Nullable sender;
/// Channel URL which has this message.
@property (nonatomic, readonly, copy) NSString * _Nonnull channelURL;
/// Channel type of this message.
@property (nonatomic) enum SBDChannelType channelType;
/// The list of users who was mentioned together with the message.
/// since:
/// 3.0.90
@property (nonatomic, copy) NSArray<SBDUser *> * _Nonnull mentionedUsers;
/// since:
/// 3.0.103
@property (nonatomic) enum SBDMentionType mentionType;
/// Represents target user ids to mention when success to send the message.
/// This value is valid only when the message is a pending message or failed message.
/// If the message is a succeeded message, see <code>mentionedUserIds</code>
/// since:
/// 3.0.147
/// note:
/// see <code>mentionedUserIds</code> when the message is a succeeded message.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable requestedMentionUserIds;
/// Message created time in millisecond(UTC).
@property (nonatomic) int64_t createdAt;
/// Message updated time in millisecond(UTC).
@property (nonatomic, readonly) int64_t updatedAt;
/// The unique ID of the parent message. If the message object is a parent message or a single message
/// without any reply, the value of this property is 0. If the object is a reply, the value is the unique ID of its parent message.
/// note:
/// The default value is <code>0</code>.
/// since:
/// 3.0.181
@property (nonatomic, readonly) int64_t parentMessageId;
/// The thread info that belongs to this message object.
/// since:
/// 3.0.181
@property (nonatomic, strong) SBDThreadInfo * _Nonnull threadInfo;
/// Gets an array of meta arrays sorted by chronological order.
/// since:
/// 3.0.148
@property (nonatomic, copy) NSArray<SBDMessageMetaArray *> * _Nullable metaArrays;
/// The custom data for message.
@property (nonatomic, copy) NSString * _Nonnull data;
/// Custom message type.
@property (nonatomic, readonly, copy) NSString * _Nullable customType;
@property (nonatomic, copy) NSDictionary<NSString *, SBDReaction *> * _Nonnull reactionMap;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull reactionKeys;
/// Reaction list on this message
@property (nonatomic, readonly, copy) NSArray<SBDReaction *> * _Nonnull reactions;
/// Message survival seconds, default is -1
@property (nonatomic) NSInteger messageSurvivalSeconds;
/// Whether the message is silent or not
/// If the message is silent,  last message won’t be changed and <code>channelWasChanged(_:)</code> will not get called on receiver’s sidel
/// since:
/// 3.0.184
@property (nonatomic) BOOL silent;
/// Whether the message is silent or not
/// If the message is silent,  last message won’t be changed and <code>channelWasChanged(_:)</code> will not get called on receiver’s sidel
/// since:
/// 3.0.184
@property (nonatomic, readonly) BOOL isSilent;
/// The error code of file.
/// This value generated only when message send fails.
/// since:
/// 3.0.161
@property (nonatomic) NSUInteger errorCode;
/// Optional open graph information if the message contains links.
/// We only support first open graph tag appearance on the first link
/// since:
/// 3.0.193
@property (nonatomic, readonly, strong) SBDOGMetaData * _Nullable ogMetaData;
/// List of plugin that are corresponding to this message
/// since:
/// 3.0.207
@property (nonatomic, readonly, copy) NSArray<SBDPlugin *> * _Nullable plugins;
/// Current message’s parent message object.
/// When <code>parentMessage</code> is <code>UserMessage</code> it only has 3 properties: <code>message</code>, <code>sender</code> and <code>createdAt</code>
/// When <code>parentMessage</code> is <code>AdminMessage</code> it only has 3 properties: <code>message</code>, <code>sender</code> and <code>createdAt</code>
/// When <code>parentMessage</code> is <code>FileMessage</code> it only has 6 properties: <code>message</code>, <code>sender</code>, <code>createdAt</code>, <code>name</code>, <code>url</code>, <code>type</code>
/// <ul>
///   <li>
///     Since 3.0.236
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) SBDBaseMessage * _Nullable parentMessage;
/// Determines whether current message is also shown on channel.
/// since:
/// 3.0.236
@property (nonatomic, readonly) BOOL isReplyToChannel;
/// Represents whether this message was created by an operator.
/// since:
/// 3.0.198
@property (nonatomic) BOOL isOperatorMessage;
@property (nonatomic, readonly) BOOL forceUpdateLastMessage;
/// An object that was used to resend this message. This property is valid when the sendingStatus is <code>MessageSendingStatus.pending</code> or <code>MessageSendingStatus.failed</code>. When this message is trying to be resent, this property will be used as well. If the message object is <code>UserMessage</code> class, then the <code>messageParams</code> has to be casted to <code>UserMessageCreateParams</code> class. If the message object is <code>FileMessage</code> class, then the <code>messageParams</code> has to be casted to <code>FileMessageCreateParams</code> class.
/// <ul>
///   <li>
///     Since 3.1.0
///   </li>
/// </ul>
@property (nonatomic, strong) SBDBaseMessageCreateParams * _Nullable messageParams;
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>AdminMessage</code> class represents a <span>message</span> which is sent by an admin
/// via <a href="https://docs.sendbird.com/platform">Platform API</a>. The admin <span>message</span>
/// doesn’t have a sender. This <span>message</span> is sutable for a notice to inform the members
/// in a group channel or the participants in an open channel. If you would like to know about the Platform API
/// for the <span>message</span>, see <a href="https://docs.sendbird.com/platform#messages_3_send">Send a message</a>.
SWIFT_CLASS_NAMED("AdminMessage")
@interface SBDAdminMessage : SBDBaseMessage
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ApiRequestType, closed) {
  ApiRequestTypePassive = 0,
  ApiRequestTypeActive = 1,
};


/// An object contains application information
SWIFT_CLASS_NAMED("AppInfo")
@interface SBDAppInfo : NSObject
/// This is the latest hash value for Emoji.
/// Default value is empty string.
/// since:
/// 3.0.180
@property (nonatomic, copy) NSString * _Nonnull emojiHash;
/// This is the uploadable file size limit. (The unit is bytes.)
/// since:
/// 3.0.180
@property (nonatomic) int64_t uploadSizeLimit;
/// This is the premium feature list using on your Application ID.
/// since:
/// 3.0.180
@property (nonatomic, copy) NSArray<NSString *> * _Nullable premiumFeatureList;
/// This is the state of using the reaction feature.
/// since:
/// 3.0.180
@property (nonatomic) BOOL useReaction;
/// This is the application attributes list using on your Application ID.
/// since:
/// 3.0.198
@property (nonatomic, copy) NSArray<NSString *> * _Nullable applicationAttributes;
/// This is the application attribute to tell SDK use native websocket
/// since:
/// 3.0.222
@property (nonatomic) BOOL useNativeWS;
/// <ul>
///   <li>
///     Since 3.0.231
///   </li>
/// </ul>
@property (nonatomic) NSInteger concurrentCallLimit;
/// since:
/// 3.0.231
@property (nonatomic) NSTimeInterval backOffDelay;
/// A getter for the <code>disableSupergroupMACK</code> property.
/// since:
/// 3.0.230
@property (nonatomic) BOOL disableSuperGroupMACK;
- (nonnull instancetype)initWithEmojiHash:(NSString * _Nonnull)emojiHash uploadSizeLimit:(int64_t)uploadSizeLimit premiumFeatureList:(NSArray<NSString *> * _Nullable)premiumFeatureList useReaction:(BOOL)useReaction applicationAttributes:(NSArray<NSString *> * _Nullable)applicationAttributes concurrentCallLimit:(NSInteger)concurrentCallLimit backOffDelay:(NSTimeInterval)backOffDelay useNativeWS:(BOOL)useNativeWS disableSuperGroupMACK:(BOOL)disableSuperGroupMACK OBJC_DESIGNATED_INITIALIZER;
/// This function can check if Emoji information needs to be updated to date.
/// <ul>
///   <li>
///     Since 3.0.180
///   </li>
/// </ul>
/// \param prevEmojiHash Emoji hash value in use
///
- (BOOL)isEmojiUpdateNeededWithPrevEmojiHash:(NSString * _Nonnull)prevEmojiHash SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the options for the Apple Critical Alert.
/// The <code>BaseMessageCreateParams</code> object may have the <code>AppleCriticalAlertOptions</code> object as an <code>appleCriticalAlertOptions</code> property.
/// When the message that has this options is received by the iOS device, the message is displayed as a critical alert.
/// See the <a href="https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification"><code>Generating a Remote Notification</code></a> for the details.
/// since:
/// 3.0.221
SWIFT_CLASS_NAMED("AppleCriticalAlertOptions")
@interface SBDAppleCriticalAlertOptions : NSObject
/// The name of a sound file in the iOS app. The default value is <code>default</code>.
/// since:
/// 3.0.221
@property (nonatomic, copy) NSString * _Nonnull name;
/// The volume for the critical alert’s sound.
/// Set this to a value between 0.0 (silent) and 1.0 (full volume).
/// The default value is <code>1.0</code>.
/// since:
/// 3.0.221
@property (nonatomic) float volume;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name volume:(float)volume OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBError;

/// The <code>ApplicationUserListQuery</code> class is a query class for getting the list of all
/// users of the current application.
/// This instance is created by <code>createApplicationUserListQuery()</code> of <code>SendbirdChat</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("ApplicationUserListQuery")
@interface SBDApplicationUserListQuery : NSObject
/// Sets the user IDs filter.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIdsFilter;
/// The meta data key filter. This query will return users that has the meta data key and values.
/// This has to be set by <code>setMetaDataFilterWithKey:values:</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable metaDataKeyFilter;
/// The meta data values filter. This query will return users that has the meta data key and values.
/// This has to be set by <code>setMetaDataFilterWithKey:values:</code>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable metaDataValuesFilter;
/// Filters user’s nickname that starts with
/// since:
/// 3.0.223
@property (nonatomic, copy) NSString * _Nullable nicknameStartsWithFilter;
/// Sets meta data filter.
/// \param key The key of the meta data to use for filter.
///
/// \param values The values of the meta data to use for filter.
///
- (void)setMetaDataFilterWithKey:(NSString * _Nullable)key values:(NSArray<NSString *> * _Nullable)values;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use SendbirdChat's `createApplicationUserListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>ApplicationUserListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDApplicationUserListQuery * _Nonnull)setupFor:(SBDApplicationUserListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>BannedUserListQuery</code> class is a query class for getting the list of banned users in
/// a specific channel.
/// This instance is created by <code>createBannedUserListQuery</code> of <code>BaseChannel</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("BannedUserListQuery")
@interface SBDBannedUserListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) enum SBDChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createBannedUserListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BannedUserListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDBannedUserListQuery * _Nonnull)setupFor:(SBDBannedUserListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class NSOperationQueue;

/// An object represents base class for channel
SWIFT_CLASS_NAMED("BaseChannel")
@interface SBDBaseChannel : NSObject
/// The channel URL.
@property (nonatomic, copy) NSString * _Nonnull channelURL;
/// The name of channel.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The channel cover image URL.
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// User who creates the channel
/// since:
/// 3.0.199
@property (nonatomic, strong) SBDUser * _Nullable creator;
/// The timestamp when the channel is created.
@property (nonatomic) int64_t createdAt;
/// The custom data of the channel.
@property (nonatomic, copy) NSString * _Nullable data;
/// The custom type of the channel.
@property (nonatomic, copy) NSString * _Nullable customType;
/// The flag for a frozen channel.
/// since:
/// 3.0.89
@property (nonatomic) BOOL isFrozen;
/// Represents the channel is ephemeral or not.
/// since:
/// 3.0.90
@property (nonatomic) BOOL isEphemeral;
/// Gets the current user’s muted information in this channel.
/// since:
/// 3.0.118
/// \param completionHandler The handler block to be executed.
///
- (void)getMyMutedInfoWithCompletionHandler:(void (^ _Nullable)(BOOL, NSString * _Nonnull, int64_t, int64_t, int64_t, SBError * _Nullable))completionHandler;
/// Channel type
@property (nonatomic, readonly) enum SBDChannelType channelType;
/// Indicates possibility of outdated information
@property (nonatomic) BOOL isDirty;
@property (nonatomic) int64_t lastSyncedChangeLogsTimestamp;
/// Checks the channel type is open channel or not.
///
/// returns:
/// Returns true when this is open channel.
- (BOOL)isOpenChannel SWIFT_WARN_UNUSED_RESULT;
/// Checks the channel type is group channel or not.
///
/// returns:
/// <code>true</code> if when this is a group channel.
- (BOOL)isGroupChannel SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) NSOperationQueue * _Nonnull operationQueue;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL name:(NSString * _Nonnull)name coverURL:(NSString * _Nullable)coverURL createdAt:(int64_t)createdAt creator:(SBDUser * _Nullable)creator isCreated:(BOOL)isCreated data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType isEphemeral:(BOOL)isEphemeral isFrozen:(BOOL)isFrozen lastSyncedTs:(int64_t)lastSyncedTs OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)updateWith:(SBDBaseChannel * _Nullable)newValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDReactionEvent;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Adds a reaction to a message.
/// Messages with <code>sendingStatus</code> is not <code>.success</code> will handler to return error.
/// note:
/// This is idempotent.
/// note:
/// This feature is only available in group channels.
/// since:
/// 3.0.169
/// \param message The message object that the reaction will be added.
///
/// \param key The reaction key to be added.
///
/// \param completionHandler The handler block to be executed. If succeeded, the <code>reactionEvent</code>
/// will have the information of the reaction.
///
- (void)addReactionWithMessage:(SBDBaseMessage * _Nonnull)message key:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBDReactionEvent * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes a reaction from a message.
/// note:
/// This is idempotent.
/// note:
/// This feature is only available in group channels.
/// since:
/// 3.0.169
/// \param message The message object that has the reaction key.
///
/// \param key The reaction key to be deleted.
///
/// \param completionHandler The handler block to be executed. If succeeded, the <code>reactionEvent</code> will have the information of the reaction.
///
- (void)deleteReactionWithMessage:(SBDBaseMessage * _Nonnull)message key:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBDReactionEvent * _Nullable, SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Deletes a message. The message’s sender has to be the current user.
/// \param message The message to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMessage:(SBDBaseMessage * _Nonnull)message completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes a message. The message’s sender has to be the current user.
/// since:
/// 3.0.179
/// \param messageId The message ID to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMessageWithMessageId:(int64_t)messageId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end

@class SBDMessageListParams;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Retrieves previous or next messages based on a specified timestamp in the channel.
/// since:
/// 3.0.181
/// \param timestamp Specifies the timestamp to be the reference point for messages to retrieve, in Unix
/// milliseconds format. Messages sent before or after the timestamp can be retrieved.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to be executed. The <code>messages</code> is the messages
/// of the channel. The <code>error</code> indicates whether there is an error. If there is no error, the value is null.
///
- (void)getMessagesByTimestamp:(int64_t)timestamp params:(SBDMessageListParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Retrieves previous or next messages based on their message ID in a specific channel.
/// since:
/// 3.0.181
/// \param messageId Specifies the message ID to be the reference point for messages to retrieve.
/// Messages sent before or after the message with the matching message ID can be retrieved.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to be executed. The <code>messages</code> is the messages
/// of the channel. The <code>error</code> indicates whether there is an error. If there is no error, the value is null.
///
- (void)getMessagesByMessageId:(int64_t)messageId params:(SBDMessageListParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
@end


/// Mappable protocol to initialize sendbird object from a given dictionary.
/// note:
/// This is legacy method for objective c and recommend to use Codable protocol for swift
SWIFT_PROTOCOL("_TtP12SendbirdChat8Mappable_")
@protocol Mappable
/// Initialize an object with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@optional
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;

/// Protocol to provide serialization
SWIFT_PROTOCOL("_TtP12SendbirdChat12Serializable_")
@protocol Serializable
/// Serializes sendbird object to data
///
/// returns:
/// Data
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Builds a sendbird object from serialized data
/// \param data Data object
///
///
/// returns:
/// Sendbird object type
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>BaseChannel</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly) BOOL isCurrentUserOperator;
@end

@class SBDMessageChangeLogsParams;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Retrieves the changelogs since a specified token regarding the updated messages or the unique IDs
/// of deleted messages in the channel.
/// since:
/// 3.0.181
/// \param token Specifies the token to be the reference point for the changelogs to retrieve.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to execute. The <code>updatedMessages</code> retrieves the
/// updated messages. The <code>deletedMessageIds</code> retrieves the unique ID of deleted messages.
/// The <code>hasMore</code> indicates whether there are more changelogs to be retrieved. The <code>token</code>
/// retrieves the token of the last changelog in the results. The <code>error</code> indicates whether there is
/// an error. If there is no error, the value is <code>nil</code>.
///
- (void)getMessageChangeLogsSinceToken:(NSString * _Nullable)token params:(SBDMessageChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, NSArray<NSNumber *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Retrieves the changelogs since a specified timestamp, in Unix milliseconds format, regarding the updated
/// messages or the unique IDs of deleted messages in the channel.
/// since:
/// 3.0.181
/// \param timestamp Specifies the timestamp to be the reference point for changelogs to retrieve, in Unix milliseconds format.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to execute. The <code>updatedMessages</code> retrieves the
/// updated messages. The <code>deletedMessageIds</code> retrieves the unique ID of deleted messages. The
/// <code>hasMore</code> indicates whether there are more changelogs to be retrieved. The <code>token</code> retrieves the
/// token of the last changelog in the results. The <code>error</code> indicates whether there is an error. If there is
/// no error, the value is <code>nil</code>.
///
- (void)getMessageChangeLogsSinceTimestamp:(int64_t)timestamp params:(SBDMessageChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, NSArray<NSNumber *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
- (void)getMessageChangeLogsWithToken:(NSString * _Nullable)token timestamp:(int64_t)timestamp params:(SBDMessageChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, NSArray<NSNumber *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
@end

enum SBDReportCategory : NSInteger;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Reports a user in a channel of inappropriate activities.
/// since:
/// 3.0.154
/// \param offendingUser The user who is being reported.
///
/// \param reportCategory The category in which the report is being submitted. Valid choices are
/// <code>suspicious</code>, <code>harassing</code>, <code>spam</code>, and <code>inappropriate</code>.
///
/// \param reportDescription An open ended description for why the report is being submitted.
///
/// \param completionHandler The handler block to execute.
///
- (void)reportUser:(SBDUser * _Nonnull)offendingUser reportCategory:(enum SBDReportCategory)reportCategory reportDescription:(NSString * _Nullable)reportDescription completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Reports current channel instance of inappropriate activities.
/// since:
/// 3.0.154
/// \param category The category in which the report is being submitted. Valid choices are
/// <code>suspicious</code>, <code>harassing</code>, <code>spam</code> and <code>inappropriate</code>.
///
/// \param reportDescription An open ended description for why the report is being submitted.
///
/// \param completionHandler The handler block to execute.
///
- (void)reportChannelWithCategory:(enum SBDReportCategory)category reportDescription:(NSString * _Nullable)reportDescription completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Reports a malicious message in the channel
/// since:
/// 3.0.154
/// \param message The message object which is being reported.
///
/// \param reportCategory The category in which the report is being submitted. Valid choices are
/// <code>suspicious</code>, <code>harassing</code>, <code>spam</code> and <code>inappropriate</code>.
///
/// \param reportDescription An open ended description for why the report is being submitted.
///
/// \param completionHandler The handler block to execute.
///
- (void)reportMessage:(SBDBaseMessage * _Nonnull)message reportCategory:(enum SBDReportCategory)reportCategory reportDescription:(NSString * _Nullable)reportDescription completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Adds operators to the channel.
/// since:
/// 3.0.189
/// \param userIds The user IDs to be operators.
///
/// \param completionHandler The handler block to be executed.
///
- (void)addOperatorsWithUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Removes operators from the channel.
/// since:
/// 3.0.189
/// \param userIds The user IDs to be removed from the operators.
///
/// \param completionHandler The handler block to be executed.
///
- (void)removeOperatorsWithUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Removes all operators from the channel.
/// since:
/// 3.0.189
/// \param completionHandler The handler block to be executed.
///
- (void)removeAllOperatorsWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates keys of meta array for the message.
/// since:
/// 3.0.116
/// \param message The message object. This method creates <code>keys</code> in it.
///
/// \param keys Keys of meta array.
///
/// \param completionHandler The handler block to execute. The <code>message</code> is a base message object that has the keys for its meta array.
///
- (void)createMessageMetaArrayKeysWithMessage:(SBDBaseMessage * _Nonnull)message keys:(NSArray<NSString *> * _Nonnull)keys completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes keys from meta array of the message.
/// since:
/// 3.0.116
/// \param message The message object. This method deletes keys of meta array of it.
///
/// \param keys Keys to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMessageMetaArrayKeysWithMessage:(SBDBaseMessage * _Nonnull)message keys:(NSArray<NSString *> * _Nonnull)keys completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Adds meta array to the message.
/// since:
/// 3.0.116
/// note:
/// use <code>addMessageMetaArrayValues(message:metaArrays:completionHandler:)</code> as possible.
/// \param message The message object. This method adds pairs of key and value to this message.
///
/// \param keyValues Pairs of key-value to be added.
///
/// \param completionHandler The handler block to execute.
///
- (void)addMessageMetaArrayValuesWithMessage:(SBDBaseMessage * _Nonnull)message keyValues:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)keyValues completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Adds the array of meta array into the message.
/// note:
/// The <code>metaArrays</code> are upserted into the message. If a key in the metaArrays is new, the key will
/// be inserted with the value. If a key in the metaArrays is already created, the value of the messageMetaArray
/// will be inserted so strings in the value MUST be new one.
/// since:
/// 3.0.148
/// \param message The message instance. The metaArrays will added into the message.
///
/// \param metaArrays An array of message meta array will be added into the message. the string of the value
/// in the metaArray MUST NOT exist with same key.
///
/// \param completionHandler The handler block to execute after adding message meta arrays. The
/// <code>message</code> of the handler is updated message. If failed to add message meta arrays, the <code>error</code>
/// of the handler is not nil(null).
///
- (void)addMessageMetaArrayValuesWithMessage:(SBDBaseMessage * _Nonnull)message metaArrays:(NSArray<SBDMessageMetaArray *> * _Nonnull)metaArrays completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Removes meta array from the message.
/// since:
/// 3.0.116
/// note:
/// use <code>removeMessageMetaArrayValues(message:metaArrays:completionHandler:)</code> as possible.
/// \param message The message object. This method removes pairs of key and value from this message. 
///
/// \param keyValues Pairs of key-value to be removed. 
///
/// \param completionHandler The handler block to execute. 
///
- (void)removeMessageMetaArrayValuesWithMessage:(SBDBaseMessage * _Nonnull)message keyValues:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)keyValues completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Removes the array of meta array from the message.
/// note:
/// The <code>metaArrays</code> are removed from the message. If a key in the metaArrays has an emtpy
/// array of the value, the key will be removed. If not, the value of the messageMetaArray will be removed from the message.
/// note:
/// The order of the meta array is guaranteed.
/// since:
/// 3.0.148
/// \param message The message instance. The metaArrays will removed from the message.
///
/// \param metaArrays An array of message meta array will be removed from the message. the string of
/// the value in the metaArray MUST exist with same key.
///
/// \param completionHandler The handler block to execute after removing message meta arrays.
/// The <code>message</code> of the handler is removed message. If failed to remove message meta arrays,
/// the <code>error</code> of the handler is not nil(null).
///
- (void)removeMessageMetaArrayValuesWithMessage:(SBDBaseMessage * _Nonnull)message metaArrays:(NSArray<SBDMessageMetaArray *> * _Nonnull)metaArrays completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
@end

@class SBDUserMessage;
@class SBDUserMessageCreateParams;
@class SBDUserMessageUpdateParams;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Sends a user message.
/// \param message The message text.
///
/// \param completionHandler The handler block to execute. <code>userMessage</code> is a user
/// message which is returned from the Sendbird server. The message has a message ID.
///
///
/// returns:
/// Returns a temporary user message being sent to the Sendbird server. The message
/// has a request ID instead of a message ID. The request status of the message is pending. If you try
/// to send a message with an invalid parameter, the returned message is a user message with no properties.
/// You can perform a validation of pending message by checking for the existence of the request ID.
- (SBDUserMessage * _Nonnull)sendUserMessage:(NSString * _Nonnull)message completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Sends a string message of params.
/// \param params The instance of <code>UserMessageCreateParams</code> that can has parameters
/// related with string message.
///
/// \param completionHandler The handler block to be executed after the message was sent.
/// This block has no return value and takes two argument, one is a file message was sent and other is an
/// error made when there is something wrong to message.
///
///
/// returns:
/// Returns a temporary user message being sent to the Sendbird server. The message has
/// a request ID instead of a message ID. The request status of the message is pending. If you try to send a
/// message with an invalid parameter, the returned message is a user message with no properties. You can
/// perform a validation of pending message by checking for the existence of the request ID..
- (SBDUserMessage * _Nonnull)sendUserMessageWithParams:(SBDUserMessageCreateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
- (SBDUserMessage * _Nonnull)sendUserMessageWithParams:(SBDUserMessageCreateParams * _Nonnull)params requestId:(NSString * _Nonnull)requestId completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Attempts to resend a failed user message received by the failure callback.
/// Only failed message MUST be passed, not a succeeded message or a pending message.
/// since:
/// 3.0.141
/// \param message A message to send. A failed message is passed to the callback when fails to send a message
///
/// \param completionHandler The handler block to be executed after the message is sent.
/// This block has no return value and takes two arguments. One is a user message. If the message is
/// successfully sent, the complete message instance is delivered. If the message fails to be sent, a failed
/// message based on the pending message is delivered. Another factor is errors. If the message fails
/// to be sent, a message error is dispatched.
///
///
/// returns:
/// Returns a temporary user message being sent to the Sendbird server.
- (SBDUserMessage * _Nonnull)resendUserMessageWithMessage:(SBDUserMessage * _Nonnull)message completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Copies a user message to the target channel.
/// \param message User message object.
///
/// \param targetChannel Target channel object.
///
/// \param completionHandler The handler block to execute. The <code>userMessage</code> is a user message
/// which is returned from the Sendbird server. The message has a message ID.
///
///
/// returns:
/// Returns the temporary user message with a request ID. It doesn’t have a message ID.
- (SBDUserMessage * _Nonnull)copyUserMessage:(SBDUserMessage * _Nonnull)message toTargetChannel:(SBDBaseChannel * _Nonnull)targetChannel completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Updates a user message. The text message, data, custom type from user message params can be updated.
/// since:
/// 3.0.110
/// \param messageId The message ID of the message to be updated.
///
/// \param params <code>UserMessageUpdateParams</code> with updating fields.
///
/// \param completionHandler The handler block to be executed after update. This block has no
/// return value and takes two argument. the one is updated message type of UserMessage. the other
/// is an error made when there is something wrong to process.
///
- (void)updateUserMessageWithMessageId:(int64_t)messageId params:(SBDUserMessageUpdateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Requests to translate the text message into the target languages.
/// You can get a user message with the <code>translations</code> property after the request, but the request does
/// not trigger an update event on the message and does not get the message by
/// <code>getMessageChangeLogs(token:params:completionHandler:)</code>.
/// A translation request can affect not only your message, but also other people’s messages.
/// since:
/// 3.0.148
/// \param message The string type of the message of the user message instance will be translated.
///
/// \param targetLanguages The target languages that the message will be translated into. e.g. “en”, “es”, “ch”
///
/// \param completionHandler The handler block to be executed after translation. This block has no
/// return value and takes two arguments. One is a user message. If succeeded to translate text of
/// the message, the message instance with translations is delivered. If failed to translate, nil is delivered.
/// Another factor is an error. If failed to request, an error is dispatched.
///
- (void)translateUserMessage:(SBDUserMessage * _Nonnull)message targetLanguages:(NSArray<NSString *> * _Nonnull)targetLanguages completionHandler:(void (^ _Nullable)(SBDUserMessage * _Nullable, SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates the meta counters for the channel.
/// \param metaCounters The meta counters to be set
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the meta counters
/// which are set on Sendbird server.
///
- (void)createMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nonnull)metaCounters completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the meta counters with keys for the channel.
/// \param keys The keys to get meta counters.
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the
/// meta counters which are set on Sendbird server.
///
- (void)getMetaCountersWithKeys:(NSArray<NSString *> * _Nullable)keys completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Gets all meta counters for the channel.
/// \param completionHandler handler block to execute. <code>metaCounters</code> is the meta
/// counters which are returned from Sendbird server.
///
- (void)getAllMetaCountersWithCompletionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Updates the meta counters for the channel.
/// \param metaCounters The meta counters to be updated.
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the meta
/// counters which are updated on Sendbird server.
///
- (void)updateMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nonnull)metaCounters completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Increases the meta counters for the channel.
/// \param metaCounters The meta counters to be increased.
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the meta
/// counters which are increased on Sendbird server.
///
- (void)increaseMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nonnull)metaCounters completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Decreases the meta counters for the channel.
/// \param metaCounters The meta counters to be decreased.
///
/// \param completionHandler The handler block to execute. <code>metaCounters</code> is the meta
/// counters which are decreased on Sendbird server.
///
- (void)decreaseMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nonnull)metaCounters completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSNumber *> * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes the meta counters with key for the channel.
/// \param key The key to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMetaCountersWithKey:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes all meta counters for the channel.
/// \param completionHandler The handler block to execute.
///
- (void)deleteAllMetaCountersWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Bans a user for seconds. Let a user out and prevent to join again.
/// If the user is already banned, duration will be updated from the time that was initialized.
/// since:
/// 3.0.89
/// \param user The user to be banned.
///
/// \param seconds Seconds of ducation to be banned. Seconds should be larger than -1. If it is -1,
/// user is banned forever. If it is 0, duration is set 10 years by default.
///
/// \param description The reason why the user was banned.
///
/// \param completionHandler The handler block to be executed after the user is banned.
/// This block has no return value and takes an argument that is an error madewhen there is something wrong to ban.
///
- (void)banUser:(SBDUser * _Nonnull)user seconds:(NSInteger)seconds description:(NSString * _Nullable)description completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Bans a user for seconds. Let a user out and prevent to join again. If the user is already banned, duration
/// will be updated from the time that was initialized.
/// since:
/// 3.0.89
/// \param userId The user ID to be banned.
///
/// \param seconds Seconds of ducation to be banned. Seconds should be larger than -1. If it is -1,
/// user is banned forever. If it is 0, duration is set 10 years by default.
///
/// \param description The reason why the user was banned.
///
/// \param completionHandler The handler block to be executed after the user is banned. This
/// block has no return value and takes an argument that is an error made when there is something wrong to ban.
///
- (void)banUserWithUserId:(NSString * _Nonnull)userId seconds:(NSInteger)seconds description:(NSString * _Nullable)description completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Removes ban for a user.
/// since:
/// 3.0.89
/// \param user The user to be removed ban.
///
/// \param completionHandler The handler block to be executed after remove ban. This block has
/// no return value and takes an argument that is an error made when there is something wrong to remove ban.
///
- (void)unbanUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Removes ban for a user.
/// since:
/// 3.0.89
/// \param userId The user ID to be removed ban.
///
/// \param completionHandler The handler block to be executed after remove ban. This block has
/// no return value and takes an argument that is an error made when there is something wrong to remove ban.
///
- (void)unbanUserWithUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Mutes a user with additional options. Muted user cannot send any messages to the group channel.
/// since:
/// 3.0.118
/// \param user The user to be muted.
///
/// \param seconds The user cannot send any messages for this time.
///
/// \param description The description that explains the reason why the user is muted.
///
/// \param completionHandler The handler block to be executed after mute. This block has no return
/// value and takes an argument that is an error made when there is something wrong to mute the user.
///
- (void)muteUser:(SBDUser * _Nonnull)user seconds:(NSInteger)seconds description:(NSString * _Nullable)description completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Mutes a user with additional options. Muted user cannot send any messages to the group channel.
/// since:
/// 3.0.118
/// \param userId The user ID to be muted.
///
/// \param seconds The user cannot send any messages for this time.
///
/// \param description The description that explains the reason why the user is muted.
///
/// \param completionHandler The handler block to be executed after mute. This block has no return
/// value and takes an argument that is an error made when there is something wrong to mute the user.
///
- (void)muteUserWithUserId:(NSString * _Nonnull)userId seconds:(NSInteger)seconds description:(NSString * _Nullable)description completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Unmutes a user.
/// since:
/// 3.0.89
/// \param userId The user ID to be turned off mute.
///
/// \param completionHandler The handler block to be executed after turn off mute. This block has no
/// return value and takes an argument that is an error made when there is something wrong to turn off mute.
///
- (void)unmuteUserWithUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Unmutes a user.
/// since:
/// 3.0.89
/// \param user The user to be turned off mute.
///
/// \param completionHandler The handler block to be executed after turn off mute. This block has no
/// return value and takes an argument that is an error made when there is something wrong to turn off mute.
///
- (void)unmuteUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates the meta <em>data</em> for the channel.
/// \param metaData The meta <em>data</em> to be set.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the meta
/// <em>data</em> which are set on Sendbird server.
///
- (void)createMetaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the meta <em>data</em> for the channel.
/// \param keys The keys to get meta <em>data</em>.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the meta
/// <em>data</em> which are set on Sendbird server.
///
- (void)getMetaDataWithKeys:(NSArray<NSString *> * _Nonnull)keys completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Gets all meta <em>data</em> for the channel.
/// \param completionHandler The handler block to execute. <code>metaData</code> is the meta
/// <em>data</em> which are set on Sendbird server.
///
- (void)getAllMetaDataWithCompletionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Updates the meta <em>data</em> for the channel.
/// \param metaData The meta <em>data</em> to be updated.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the meta counters
/// which are updated on Sendbird server.
///
- (void)updateMetaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes meta <em>data</em> with key for the channel.
/// \param key The key to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMetaDataWithKey:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes all meta <em>data</em> for the channel.
/// \param completionHandler The handler block to execute.
///
- (void)deleteAllMetaDataWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Return cached channel meta data.
/// since:
/// 3.0.216
///
/// returns:
/// Dictionary meta data.
- (NSDictionary<NSString *, NSString *> * _Nonnull)getCachedMetaData SWIFT_WARN_UNUSED_RESULT;
- (void)removeAllCachedMetaData;
@end

@class SBDFileMessageCreateParams;
@class SBDFileMessage;
@class SBDFileMessageUpdateParams;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Sends a file message with file or file URL of params without progress.
/// If the params has a binary file, it will upload data to Sendbird storage. If not, the params has a file url, it will send a message with file url.
/// \param params Instance of <code>FileMessageCreateParams</code> that can has parameters related with file.
///
/// \param completionHandler handler block to be executed after the message was sent. This block has no return value
/// and takes two argument, one is a file message was sent and other is an error made when there is something wrong to message.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server. The message has a request ID instead of a message ID.
/// The request status of the message is pending. If you try to send a message with an invalid parameter, the returned message is a user
/// message with no properties. You can perform a validation of pending message by checking for the existence of the request ID.
- (SBDFileMessage * _Nullable)sendFileMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Sends a file message with file or file URL of params without progress.
/// If the params has a binary file, it will upload data to Sendbird storage. If not, the params has a file url, it will send a message with file url.
/// \param params Instance of <code>FileMessageCreateParams</code> that can has parameters related with file.
///
/// \param progressHandler progress handler
///
/// \param completionHandler handler block to be executed after the message was sent. This block has no return value and
/// takes two argument, one is a file message was sent and other is an error made when there is something wrong to message.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server. The message has a request ID instead of a message ID. The request status of the message is pending. If you try to send a message with an invalid parameter, the returned message is a user message with no properties. You can perform a validation of pending message by checking for the existence of the request ID.
- (SBDFileMessage * _Nullable)sendFileMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
- (SBDFileMessage * _Nullable)sendFileMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params requestId:(NSString * _Nullable)requestId progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (SBDFileMessage * _Nullable)sendFileMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params requestId:(NSString * _Nullable)requestId originalMessage:(SBDFileMessage * _Nullable)originalMessage progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Sends a file message with file or file URL of params with progress.
/// If the params has a binary file, it will upload data to Sendbird storage. If not, the params has a file url, it will send a message with file url.
/// since:
/// 3.0.116
/// \param params The instance of <code>FileMessageCreateParams</code> that can has parameters related with file.
///
/// \param progressHandler The handler block to be used to monitor progression. <code>requestId</code> is a unique identifier
/// for the message send request.  <code>bytesSent</code> is the number of bytes sent since this method was called. <code>totalBytesSent</code>
/// is the total number of bytes sent so far. <code>totalBytesExpectedToSend</code> is the expected length of the body data.
/// These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param sentMessageHandler The handler block to be executed after each message was sent. This block has no return value
/// and takes two argument, one is a file message was sent and other is an error made when there is something wrong to message.
///
/// \param completionHandler The handler block to be executed after every message was sent. This block has no return value and
/// takes an error. If the sending message can’t start at all because of the connection issue, the error isn’t nil.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server. The message has a request ID instead of a
/// message ID. The request status of the message is pending. If you try to send a message with an invalid parameter, the returned
/// message is a user message with no properties. You can perform a validation of pending message by checking for the existence
/// of the request ID.
- (NSArray<SBDFileMessage *> * _Nonnull)sendFileMessagesWithParams:(NSArray<SBDFileMessageCreateParams *> * _Nonnull)params progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler sentMessageHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))sentMessageHandler completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Updates a file message. The data, custom type from file message params can be updated.
/// since:
/// 3.0.110
/// \param messageId The message ID of the message to be updated.
///
/// \param FileMessageCreateParams The file message params that has updating fields.
///
/// \param completionHandler The handler block to be executed after update.
///
- (void)updateFileMessageWithMessageId:(int64_t)messageId params:(SBDFileMessageUpdateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Attempts to resend a failed file message received by the failure callback.
/// Only failed message MUST be passed, not a succeeded message or a pending message. If the failed
/// message has a file URL, it means the failed message was created after failure of sending a file message
/// command. So the method retries to send a file message command. If the failed message does not have
/// a file URL, it means the failed message was created from failure of uploading a binary data. So the method
/// retries to upload a binary data frist.
/// since:
/// 3.0.147
/// \param message A message to send. A failed message is passed to the callback when fails to send a message
///
/// \param binaryData Data to resend. If the failed message has a file URL, the method will not send binary data.
/// If the failed message does not have a file URL, the method will send binary data first and send a file message
/// command with file url.
///
/// \param completionHandler Handler block to be executed after the message is sent. This block has no
/// return value and takes two arguments. One is a file message. If the message is successfully sent, the complete
/// message instance is delivered. If the message fails to be sent, a failed message based on the pending message
/// is delivered except invalid parameter error. If failed because of invalid parameter, message is nil. Another factor
/// is errors. If the message fails to be sent, a message error is dispatched.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server.
- (SBDFileMessage * _Nullable)resendFileMessageWithMessage:(SBDFileMessage * _Nonnull)message binaryData:(NSData * _Nullable)binaryData completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Attempts to resend a failed file message received by the failure callback.
/// Only failed message MUST be passed, not a succeeded message or a pending message. If the failed
/// message has a file URL, it means the failed message was created after failure of sending a file message
/// command. So the method retries to send a file message command. If the failed message does not have
/// a file URL, it means the failed message was created from failure of uploading a binary data. So the method
/// retries to upload a binary data frist.
/// since:
/// 3.0.147
/// \param message A message to send. A failed message is passed to the callback when fails to send a message
///
/// \param binaryData Data to resend. If the failed message has a file URL, the method will not send binary data.
/// If the failed message does not have a file URL, the method will send binary data first and send a file message
/// command with file url.
///
/// \param progressHandler The handler block to be used to monitor progression. <code>requestId</code> is a unique identifier
/// for the message send request. <code>bytesSent</code> is the number of bytes sent since this method was called.
/// <code>totalBytesSent</code> is the total number of bytes sent so far. <code>totalBytesExpectedToSend</code> is the expected
/// length of the body data. These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to be executed after the message is sent. This block has no return
/// value and takes two arguments. One is a file message. If the message is successfully sent, the complete message
/// instance is delivered. If the message fails to be sent, a failed message based on the pending message is delivered
/// except invalid parameter error. If failed because of invalid parameter, message is nil. Another factor is errors. If the
/// message fails to be sent, a message error is dispatched.
///
///
/// returns:
/// Returns a temporary file message being sent to the Sendbird server.
- (SBDFileMessage * _Nullable)resendFileMessageWithMessage:(SBDFileMessage * _Nonnull)message binaryData:(NSData * _Nullable)binaryData progressHandler:(void (^ _Nullable)(NSString * _Nullable, int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Copies a file message to the target channel.
/// \param message File message object.
///
/// \param targetChannel Target channel object.
///
/// \param completionHandler The handler block to execute. The <code>fileMessage</code> is a user message
/// which is returned from the Sendbird server. The message has a message ID.
///
///
/// returns:
/// Returns the temporary file message with a request ID. It doesn’t have a message ID.
- (SBDFileMessage * _Nullable)copyFileMessage:(SBDFileMessage * _Nonnull)message toTargetChannel:(SBDBaseChannel * _Nonnull)targetChannel completionHandler:(void (^ _Nullable)(SBDFileMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Cancels the file message uploading.
/// \param requestId The request ID of the file message that is been uploading.
///
/// \param completionHandler The handler block to execute. If the <code>result</code> is <code>true</code>, then the uploading
/// task of the <code>requestId</code> has been cancelled.
///
+ (void)cancelUploadingFileMessageWithRequestId:(NSString * _Nonnull)requestId completionHandler:(void (^ _Nullable)(BOOL, SBError * _Nullable))completionHandler;
@end

@class SBDMutedUserListQuery;
@class SBDPreviousMessageListQuery;
@class SBDOperatorListQuery;
@class SBDPollListQuery;
@class SBDPollVoterListQuery;

@interface SBDBaseChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates a query instance for banned user list of the channel.
/// since:
/// 3.0.89
///
/// returns:
/// The instance for the banned user list. Query only banned user list.
- (SBDBannedUserListQuery * _Nullable)createBannedUserListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query instance for banned user list of the channel.
/// since:
/// 4.0.0
///
/// returns:
/// The instance for the banned user list. Query only banned user list.
+ (SBDBannedUserListQuery * _Nonnull)createBannedUserListQueryWithChannelType:(enum SBDChannelType)channelType channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates a query instance for getting muted user list of the channel instance.
///
/// returns:
/// UserListQuery instance for the muted user list.
- (SBDMutedUserListQuery * _Nullable)createMutedUserListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query instance for getting muted user list of the channel instance.
/// since:
/// 4.0.0
///
/// returns:
/// UserListQuery instance for the muted user list.
+ (SBDMutedUserListQuery * _Nonnull)createMutedUserListQueryWithChannelType:(enum SBDChannelType)channelType channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PreviousMessageListQuery</code> instance for getting the previous messages list of the channel.
///
/// returns:
/// Returns the message list of the channel.
- (SBDPreviousMessageListQuery * _Nullable)createPreviousMessageListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PreviousMessageListQuery</code> instance for getting the previous messages list of the channel.
/// since:
/// 4.0.0
/// \param channelType channel type
///
/// \param channelURL channel url
///
///
/// returns:
/// Returns the message list of the channel.
+ (SBDPreviousMessageListQuery * _Nonnull)createPreviousMessageListQueryWithChannelType:(enum SBDChannelType)channelType channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>OperatorListQuery</code> instance for getting operators in the channel.
/// since:
/// 3.0.94
///
/// returns:
/// The operator list in the channel.
- (SBDOperatorListQuery * _Nullable)createOperatorListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>OperatorListQuery</code> instance for getting operators in the channel.
/// since:
/// 4.0.0
///
/// returns:
/// The operator list in the channel.
+ (SBDOperatorListQuery * _Nonnull)createOperatorListQueryWithChannelType:(enum SBDChannelType)channelType channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PollListQuery</code> instance for getting poll list in this channel.
/// since:
/// 3.0.232
/// \param channelType channel type.
///
/// \param channelURL channel url.
///
///
/// returns:
/// poll list query object.
- (SBDPollListQuery * _Nullable)createPollListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PollListQuery</code> instance for getting poll list in this channel.
/// since:
/// 4.0.0
/// \param channelURL channel url that you want to query poll list.
///
///
/// returns:
/// poll list query object.
+ (SBDPollListQuery * _Nonnull)createPollListQueryWithChannelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PollVoterListQuery</code> instance for getting user list on given poll option
/// since:
/// 3.0.232
/// \param pollId poll ID.
///
/// \param optionId option ID.
///
///
/// returns:
/// poll voter list query object.
- (SBDPollVoterListQuery * _Nullable)createPollVoterListQueryWithPollId:(int64_t)pollId optionId:(int64_t)optionId SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>PollVoterListQuery</code> instance for getting user list on given poll option
/// since:
/// 4.0.0
/// \param pollId poll ID.
///
/// \param optionId option ID.
///
/// \param channelURL channel url.
///
///
/// returns:
/// poll voter list query object.
+ (SBDPollVoterListQuery * _Nonnull)createPollVoterListQueryWithPollId:(int64_t)pollId optionId:(int64_t)optionId channelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDThreadInfoUpdateEvent;
@class SBDPollUpdateEvent;
@class SBDPollVoteEvent;

/// An object that adopts the <code>BaseChannelDelegate</code> protocol is responsible for receiving the events
/// in the channel. Delegate methods in <code>BaseChannelDelegate</code> are common for the <code>BaseChannel</code>.
/// Exclusive delegate methods for <code>OpenChannel</code> and <code>GroupChannel</code> can be found in
/// <code>OpenChannelDelegate</code> and <code>GroupChannelDelegate</code>. You must use <code>OpenChannelDelegate</code>
/// and <code>GroupChannelDelegate</code> instead of using <code>BaseChannelDelegate</code> by using <code>add(_:identifier:)</code> in <code>SendbirdChat</code>.
/// warning:
/// If the object that adopts the <code>BaseChannelDelegate</code> protocol is invalid, the delegate has to
/// be removed by the identifier via <code>removeChannelDelegate(forIdentifier:)</code> in <code>SendbirdChat</code>.
/// This protocol deals with the below events.
/// <ul>
///   <li>
///     Receives a message in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a message is updated in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when the property of the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> was changed.
///   </li>
///   <li>
///     Receives an event when the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> was deleted.
///   </li>
///   <li>
///     Receives an event when a message in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> was deleted.
///   </li>
///   <li>
///     Receives an event when meta data in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> was changed.
///   </li>
///   <li>
///     Receives an event when meta counters in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a> were changed.
///   </li>
///   <li>
///     Receives an event when a group channel was hidden.
///   </li>
///   <li>
///     Receives an event when a user was muted or unmuted in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a user was banned or unbanned in the <a href="../Classes/BaseChannel.html"><code>BaseChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when operators are updated.
///   </li>
///   <li>
///     Receives an event when a reaction of message in a channel was updated.
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("BaseChannelDelegate")
@protocol SBDBaseChannelDelegate <NSObject>
@optional
/// A callback when a message is received.
/// \param channel The channel where the message is received.
///
/// \param message The received message.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel didReceiveMessage:(SBDBaseMessage * _Nonnull)message;
/// A callback when a message is updated.
/// \param channel The channel where the message is updated.
///
/// \param message The updated message.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel didUpdateMessage:(SBDBaseMessage * _Nonnull)message;
/// A delegate is called when someone mentioned the user.
/// \param channel The channel mention was occured in.
///
/// \param message The message mention was occured about.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel didReceiveMention:(SBDBaseMessage * _Nonnull)message;
/// A callback when a user was muted in the channel.
/// \param channel The channel.
///
/// \param user The user who was muted.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel userWasMuted:(SBDUser * _Nonnull)user;
/// A callback when a user was unmuted in the channel.
/// \param channel The channel.
///
/// \param user The user who was unmuted.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel userWasUnmuted:(SBDUser * _Nonnull)user;
/// A callback when a user was banned in the channel.
/// \param channel The channel.
///
/// \param user The user who was banned.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel userWasBanned:(SBDUser * _Nonnull)user;
/// A callback when a user was unbanned in the channel.
/// \param channel The channel.
///
/// \param user The user who was unbanned.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel userWasUnbanned:(SBDUser * _Nonnull)user;
/// A callback when an channel was frozen.
/// \param channel The channel.
///
- (void)channelWasFrozen:(SBDBaseChannel * _Nonnull)channel;
/// A callback when an channel was unfrozen.
/// \param channel The channel
///
- (void)channelWasUnfrozen:(SBDBaseChannel * _Nonnull)channel;
/// A callback when an open channel was changed.
/// \param channel The open channel.
///
- (void)channelWasChanged:(SBDBaseChannel * _Nonnull)channel;
/// A callback when an open channel was deleted.
/// \param channelURL The channel url.
///
/// \param channelType The Type of channel, types of open channel or group channel.
///
- (void)channelWasDeleted:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType;
/// A callback when a message was removed in the channel.
/// \param channel The base channel.
///
/// \param messageId The message ID which was removed.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel messageWasDeleted:(int64_t)messageId;
/// A callback when meta data was created in the channel.
/// \param channel The channel that the meta data was created.
///
/// \param createdMetaData The created meta data.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel createdMetaData:(NSDictionary<NSString *, NSString *> * _Nullable)createdMetaData;
/// A callback when meta data was updated in the channel.
/// \param channel The channel that the meta data was updated.
///
/// \param updatedMetaData The updated meta data.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel updatedMetaData:(NSDictionary<NSString *, NSString *> * _Nullable)updatedMetaData;
/// A callback when meta data was deleted in the channel.
/// \param channel The channel that the meta data was deleted.
///
/// \param deletedMetaDataKeys The keys of the deleted meta data.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel deletedMetaDataKeys:(NSArray<NSString *> * _Nullable)deletedMetaDataKeys;
/// A callback when meta counters were created in the channel.
/// \param channel The channel that the meta counters were created.
///
/// \param createdMetaCounters The created meta counters.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel createdMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nullable)createdMetaCounters;
/// A callback when meta counters were updated in the channel.
/// \param channel The channel that the meta counters were updated.
///
/// \param updatedMetaCounters The updated meta counters.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel updatedMetaCounters:(NSDictionary<NSString *, NSNumber *> * _Nullable)updatedMetaCounters;
/// A callback when meta counters were deleted in the channel.
/// \param channel The channel that the meta counters were deleted.
///
/// \param deletedMetaCountersKeys The keys of the deleted meta counters.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel deletedMetaCountersKeys:(NSArray<NSString *> * _Nullable)deletedMetaCountersKeys;
/// A callback when a reaction was updated.
/// \param channel The channel that the reaction was updated.
///
/// \param reactionEvent The updated reaction event.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel updatedReaction:(SBDReactionEvent * _Nonnull)reactionEvent;
/// A callback when operators were updated in the channel.
/// since:
/// 3.0.174
/// \param channel The channel that the operators was updated.
///
- (void)channelDidUpdateOperators:(SBDBaseChannel * _Nonnull)channel;
/// Invoked when the thread information is updated.
/// since:
/// 3.0.181
/// \param channel The channel that has the message thread.
///
/// \param threadInfoUpdateEvent <code>ThreadInfoUpdateEvent</code> object that has the latest information about the thread.
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel didUpdateThreadInfo:(SBDThreadInfoUpdateEvent * _Nonnull)threadInfoUpdateEvent;
/// A callback when the poll has been updated.
/// since:
/// 3.0.232
/// \param event event object contains updated poll information.
///
- (void)didUpdatePoll:(SBDPollUpdateEvent * _Nonnull)event;
/// A callback when vote has been occurred.
/// since:
/// 3.0.232
/// \param event event object that contains voting information.
///
- (void)didVotePoll:(SBDPollVoteEvent * _Nonnull)event;
@end


/// An base object for collection
SWIFT_CLASS_NAMED("BaseCollection")
@interface SBDBaseCollection : NSObject
/// Identifier for the connection delegates of a collection object.
/// <ul>
///   <li>
///     Since 3.0.227
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull connectionDelegateId;
/// Identifier for the internal channel delegates of a collection object.
/// <ul>
///   <li>
///     Since 3.0.227
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull channelDelegateId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBDGroupChannel;

/// An object that adopts the <code>GroupChannelDelegate</code> protocol is responsible for receiving the events in the channel.
/// This protocol deals with the below events.
/// <ul>
///   <li>
///     Receives an event when a member read a message in the <a href="../Classes/GroupChannel.html"><code>GroupChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a member typed something in the <a href="../Classes/GroupChannel.html"><code>GroupChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a new member joined the <a href="../Classes/GroupChannel.html"><code>GroupChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a member left from the <a href="../Classes/GroupChannel.html"><code>GroupChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a group channel was hidden.
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("GroupChannelDelegate")
@protocol SBDGroupChannelDelegate <SBDBaseChannelDelegate>
@optional
/// A callback when read receipts updated.
/// \param channel The group channel where the read status updated.
///
- (void)channelDidUpdateReadStatus:(SBDGroupChannel * _Nonnull)channel;
/// A callback when delivery receipts updated.
/// since:
/// 3.0.162
/// \param channel The group channel where the delivery status updated.
///
- (void)channelDidUpdateDeliveryStatus:(SBDGroupChannel * _Nonnull)channel;
/// A callback when user sends typing status.
/// \param channel The group channel where the typing status updated.
///
- (void)channelDidUpdateTypingStatus:(SBDGroupChannel * _Nonnull)channel;
/// A callback when member count has been changed for broadcast channel
/// since:
/// 3.0.219
/// \param channels The group channel that member count has been updated
///
- (void)channelDidChangeMemberCount:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
/// A callback when users are invited by inviter.
/// \param channel The group channel where the invitation is occured.
///
/// \param invitees Invitees.
///
/// \param inviter Inviter.
///
- (void)channel:(SBDGroupChannel * _Nonnull)channel didReceiveInvitation:(NSArray<SBDUser *> * _Nullable)invitees inviter:(SBDUser * _Nullable)inviter;
/// A callback when user declined the invitation.
/// \param channel The group channel where the invitation is occured.
///
/// \param inviter Invitee.
///
/// \param invitee Inviter.
///
- (void)channel:(SBDGroupChannel * _Nonnull)channel didDeclineInvitation:(SBDUser * _Nonnull)invitee inviter:(SBDUser * _Nullable)inviter;
/// A callback when new member joined to the group channel.
/// \param channel The group channel.
///
/// \param user The new user joined to the channel.
///
- (void)channel:(SBDGroupChannel * _Nonnull)channel userDidJoin:(SBDUser * _Nonnull)user;
/// A callback when current member left from the group channel.
/// \param channel The group channel.
///
/// \param user The member left from the channel.
///
- (void)channel:(SBDGroupChannel * _Nonnull)channel userDidLeave:(SBDUser * _Nonnull)user;
/// A callback when the channel was hidden on the other device or by Platform API.
/// \param channel The channel that was hidden on the other device or by Platform API.
///
- (void)channelWasHidden:(SBDGroupChannel * _Nonnull)channel;
@end

enum SBDCollectionEventSource : NSInteger;

/// The method that is invoked when an event occurs in the channel.
/// since:
/// 3.1.0
SWIFT_PROTOCOL("_TtP12SendbirdChat20ChannelEventDelegate_")
@protocol ChannelEventDelegate <SBDGroupChannelDelegate>
@optional
/// Invoked when the message has been sent on the current device.
/// \param channel The channel that has the message. 
///
/// \param newMessage Message object. 
///
/// \param deletedMessage Message object to be deleted. 
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel new:(SBDBaseMessage * _Nullable)new_ deleted:(SBDBaseMessage * _Nullable)deleted;
/// Invoked when sending message or resending message is failed.
/// \param channel The channel that has the failed message. 
///
/// \param message Failed message object. 
///
/// \param source The reason why the sending or resending message is failed. 
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel failed:(SBDBaseMessage * _Nonnull)failed source:(enum SBDCollectionEventSource)source;
/// Invoked when sending message is canceled.
/// \param channel The channel that has the message. 
///
/// \param message Canceled message object. 
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel canceled:(SBDBaseMessage * _Nonnull)canceled;
/// Invoked when the pending message is created.
/// \param channel The channel that has the message. 
///
/// \param message Pending message object. 
///
- (void)channel:(SBDBaseChannel * _Nonnull)channel pending:(SBDBaseMessage * _Nonnull)pending;
@end


/// Represents a delegate to receive connection relates events
SWIFT_PROTOCOL_NAMED("ConnectionDelegate")
@protocol SBDConnectionDelegate
@optional
/// Invoked when reconnection starts.
- (void)didStartReconnection;
/// Invoked when reconnection is succeeded.
- (void)didSucceedReconnection;
/// Invoked when reconnection is failed.
- (void)didFailReconnection;
/// Invoked when connected.
- (void)didConnectWithUserId:(NSString * _Nonnull)userId;
/// Invoked when disconnected.
- (void)didDisconnectWithUserId:(NSString * _Nonnull)userId;
@end


@interface SBDBaseCollection (SWIFT_EXTENSION(SendbirdChat)) <ChannelEventDelegate, SBDConnectionDelegate>
@end



@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BaseMessage</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
- (NSComparisonResult (^ _Nonnull)(id _Nullable, id _Nullable))comparator SWIFT_WARN_UNUSED_RESULT;
- (NSComparisonResult)orderBetweenObjectWithObj1:(id _Nullable)obj1 obj2:(id _Nullable)obj2 SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>BaseMessage</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// since:
/// 3.0.203
/// \param data <code>Data</code> instance
///
/// \param desiredState The sending status that a message object will have. 
///
///
/// returns:
/// <code>BaseMessage</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data desiredState:(enum SBDMessageSendingStatus)desiredState SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
- (BOOL)contains:(SBDUser * _Nullable)mentionedUser SWIFT_WARN_UNUSED_RESULT;
- (BOOL)wasMentionedBy:(SBDUser * _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasUpdatedLaterThanWithTimestamp:(int64_t)timestamp SWIFT_WARN_UNUSED_RESULT;
- (void)addReaction:(SBDReaction * _Nonnull)reaction;
- (void)removeReaction:(SBDReaction * _Nonnull)reaction;
@end

@class SBDMessageRetrievalParams;
@class SBDThreadedMessageListParams;

@interface SBDBaseMessage (SWIFT_EXTENSION(SendbirdChat))
/// Checks the channel type is open channel or not.
///
/// returns:
/// <code>true</code> when this message is in open channel.
- (BOOL)isOpenChannel SWIFT_WARN_UNUSED_RESULT;
/// Checks the channel type is group channel or not.
///
/// returns:
/// <code>true</code>, when this message is in group channel.
- (BOOL)isGroupChannel SWIFT_WARN_UNUSED_RESULT;
/// Checks message can resend.
/// The message can only resend if the problem is due to network related error.
/// since:
/// 3.0.161
///
/// returns:
/// <code>true</code> if this message can resend.
- (BOOL)isResendable SWIFT_WARN_UNUSED_RESULT;
/// Represents that the SDK is able to resend this message object automatically.
/// When it is <code>true</code> and this message object is put into the auto resend queue by the <code>registerAutoResend(message:)</code>
/// method of the <code>MessageCollection</code>, the message object will be sent when the connection is established.
/// When it is <code>false</code>, the SDK won’t resend the message automatically.
/// since:
/// 3.1.0
///
/// returns:
/// <code>true</code> if the SDK can resend this message object automatically.
@property (nonatomic, readonly) BOOL isAutoResendable;
/// Returns an array of meta arrays for keys.
/// since:
/// 3.0.148
/// \param keys Keys of the meta array.
///
///
/// returns:
/// An Array of meta array with keys.
- (NSArray<SBDMessageMetaArray *> * _Nonnull)metaArraysWithKeys:(NSArray<NSString *> * _Nonnull)keys SWIFT_WARN_UNUSED_RESULT;
/// Applies reaction event to this message
/// \param reactionEvent <code>ReactionEvent</code> instance
///
///
/// returns:
/// <code>true</code> if the given event was applied successfully
- (BOOL)applyReactionEvent:(SBDReactionEvent * _Nonnull)reactionEvent;
/// Applies the update of the thread information to the message object.
/// since:
/// 3.0.181
/// \param threadInfoUpdateEvent The event object that is applied to.
///
///
/// returns:
/// <code>true</code> if <code>threadInfoUpdateEvent</code>was applied successfully otherwise <code>false</code>
- (BOOL)applyThreadInfoUpdateEvent:(SBDThreadInfoUpdateEvent * _Nonnull)threadInfoUpdateEvent;
/// Retrieves a message with a specified message ID.
/// since:
/// 3.0.181
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to be executed. The <code>message</code>
/// retrieves the message with the matching message ID. A value of <code>nil</code> indicates that there is no
/// message with the specified message ID. The <code>error</code> Indicates whether there is an error. If there
/// is no error, the value is <code>nil</code>.
///
+ (void)getMessageWithParams:(SBDMessageRetrievalParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Retrieves the threaded replies of the current message depending on the timestamp. If the current message doesn’t have replies, the result is <code>nil</code>.
/// since:
/// 3.0.181
/// \param timestamp Specifies the timestamp to be the reference point of the retrieval, in Unix milliseconds format.
///
/// \param params Contains a set of parameters you can set regarding the messages in the results.
///
/// \param completionHandler The handler block to be executed. The <code>parentMessage</code> retrieves
/// the parent message of the thread. The <code>threadedReplies</code> retrieves the threaded replies in the thread.
/// The <code>error</code> indicates whether there is an error. If there is no error, the value is <code>nil</code>.
///
- (void)getThreadedMessagesWithTimestamp:(int64_t)timestamp params:(SBDThreadedMessageListParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDBaseMessage * _Nullable, NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
@end

enum SBDPushNotificationDeliveryOption : NSInteger;

/// Represents the base class which has parameters to create a channel.
/// The <code>UserMessageCreateParams</code>, the <code>FileMessageCreateParams</code> are derived from this class.
SWIFT_CLASS_NAMED("BaseMessageCreateParams")
@interface SBDBaseMessageCreateParams : NSObject
/// Message data. The default value is nil.
/// since:
/// 3.0.90
@property (nonatomic, copy) NSString * _Nullable data;
/// Customize message’s type to filter. The default value is nil.
/// since:
/// 3.0.90
@property (nonatomic, copy) NSString * _Nullable customType;
/// The push notification delivery option that determines how to deliver the push notification when sending
/// a user or a file message. The default value is <code>.default</code>.
@property (nonatomic) enum SBDPushNotificationDeliveryOption pushNotificationDeliveryOption;
/// Meta array with keys and values
/// since:
/// 3.0.179
@property (nonatomic, copy) NSArray<SBDMessageMetaArray *> * _Nullable metaArrays;
/// Mention type
/// since:
/// 3.0.103
@property (nonatomic) enum SBDMentionType mentionType;
@property (nonatomic) BOOL didSetMentionType;
/// Mention to specific users.
/// If sends a message with this field, the message will be arrived to mentioned users.
/// since:
/// 3.0.90
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mentionedUserIds;
@property (nonatomic) BOOL didSetMentionedUsers;
/// Sets the <code>mentionedUserIds</code> by this method either.
/// since:
/// 3.0.90
/// \param mentionedUsers The list of users will be receive mention.
///
- (void)setMentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers;
/// Adds user IDs for mention
/// \param userIds list of user IDs
///
- (void)addMentionedUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// The unique ID of a parent message. The default value is <code>0</code>.
/// since:
/// 3.0.181
@property (nonatomic) int64_t parentMessageId;
@property (nonatomic) BOOL didSetParentMessageId;
/// Determines if a threaded message is also replied to the channel. Default is <code>false</code>
/// since:
/// 3.0.236
@property (nonatomic) BOOL isReplyToChannel;
/// Push notification options for the Apple critical alert. The default value is <code>nil</code>.
/// since:
/// 3.0.221
@property (nonatomic, strong) SBDAppleCriticalAlertOptions * _Nullable appleCriticalAlertOptions;
@property (nonatomic, copy) NSString * _Nullable channelURL;
@property (nonatomic, copy) NSString * _Nullable requestId;
/// Custom payload
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull payload;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BaseMessageCreateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents the base class which has parameters to update a channel.
/// The <code>UserMessageUpdateParams</code>, the <code>FileMessageUpdateParams</code> are derived from this class.
SWIFT_CLASS_NAMED("BaseMessageUpdateParams")
@interface SBDBaseMessageUpdateParams : NSObject
/// Message data. The default value is nil.
@property (nonatomic, copy) NSString * _Nullable data;
/// Customize message’s type to filter. The default value is nil.
@property (nonatomic, copy) NSString * _Nullable customType;
/// Mention type
@property (nonatomic) enum SBDMentionType mentionType;
/// Mention to specific users.
/// If sends a message with this field, the message will be arrived to mentioned users.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mentionedUserIds;
/// Sets the <code>mentionedUserIds</code> by this method either.
/// \param mentionedUsers The list of users will be receive mention.
///
- (void)setMentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers;
/// Adds user IDs for mention
/// \param userIds list of user IDs
///
- (void)addMentionedUserIds:(NSArray<NSString *> * _Nonnull)users;
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BaseMessageUpdateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12SendbirdChat10BinaryData")
@interface BinaryData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>BlockedUserListQuery</code> class is a query class for getting the list of blocked users
/// by the current user.
/// This instance is created by <code>createBlockedUserListQuery()</code> of <code>SendbirdChat</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("BlockedUserListQuery")
@interface SBDBlockedUserListQuery : NSObject
/// Sets the user IDs filter.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull userIdsFilter;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use SendbirdChat's `createBlockedUserListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>BlockedUserListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDBlockedUserListQuery * _Nonnull)setupFor:(SBDBlockedUserListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// Operation object that is used to sequentialize asynchronous tasks in a blocking manner.
/// No two tasks are run at the same time, and the order of tasks inserted to a <code>OperationQueue</code> is guaranteed.
SWIFT_CLASS("_TtC12SendbirdChat17BlockingOperation")
@interface BlockingOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Channel context
/// since:
/// 3.1.0
SWIFT_CLASS_NAMED("ChannelContext")
@interface SBDChannelContext : NSObject
/// Event source
@property (nonatomic) enum SBDCollectionEventSource source;
/// Initializes with the channel source.
/// <ul>
///   <li>
///     Returns ChannelContext object.
///   </li>
/// </ul>
/// \param source Channel source.
///
- (nonnull instancetype)initWithSource:(enum SBDCollectionEventSource)source OBJC_DESIGNATED_INITIALIZER;
/// Checks whether the context is from an event or not.
///
/// returns:
/// <code>true</code> if the context is from an event.
@property (nonatomic, readonly) BOOL fromEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The enum type to filter my group channels with the hidden state.
/// since:
/// 3.0.122
typedef SWIFT_ENUM_NAMED(NSInteger, SBDChannelHiddenStateFilter, "ChannelHiddenStateFilter", open) {
/// Shows the unhidden channels only.
  SBDChannelHiddenStateFilterUnhiddenOnly = 0,
/// Shows the hidden channels only.
  SBDChannelHiddenStateFilterHiddenOnly = 1,
/// Shows the channels will be unhidden automatically when there is a new message in the channel.
  SBDChannelHiddenStateFilterHiddenAllowAutoUnhide = 2,
/// Shows the channels will not be unhidden automatically.
  SBDChannelHiddenStateFilterHiddenPreventAutoUnhide = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SBDChannelMetaCountersUpdateMode, "ChannelMetaCountersUpdateMode", open) {
  SBDChannelMetaCountersUpdateModeSet = 0,
  SBDChannelMetaCountersUpdateModeIncrease = 1,
  SBDChannelMetaCountersUpdateModeDecrease = 2,
};


/// An object to handle the cached channels.
/// <ul>
///   <li>
///     Since 3.0.227
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12SendbirdChat17ChannelRepository")
@interface ChannelRepository : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Channel types.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDChannelType, "ChannelType", open) {
/// Open channel.
  SBDChannelTypeOpen = 0,
/// Group channel.
  SBDChannelTypeGroup = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SBChatError, "ChatError", open) {
  SBChatErrorInvalidParameterValueString = 400100,
  SBChatErrorInvalidParameterValueNumber = 400101,
  SBChatErrorInvalidParameterValueList = 400102,
  SBChatErrorInvalidParameterValueJson = 400103,
  SBChatErrorInvalidParameterValueBoolean = 400104,
  SBChatErrorInvalidParameterValueRequired = 400105,
  SBChatErrorInvalidParameterValuePositive = 400106,
  SBChatErrorInvalidParameterValueNegative = 400107,
  SBChatErrorNonAuthorized = 400108,
  SBChatErrorTokenExpired = 400109,
  SBChatErrorInvalidChannelURL = 400110,
  SBChatErrorInvalidParameterValue = 400111,
  SBChatErrorUnusableCharacterIncluded = 400151,
  SBChatErrorNotFoundInDatabase = 400201,
  SBChatErrorDuplicatedData = 400202,
  SBChatErrorReachedMaxCount = 400203,
  SBChatErrorUserDeactivated = 400300,
  SBChatErrorUserNotExist = 400301,
  SBChatErrorAccessTokenNotValid = 400302,
  SBChatErrorAuthUnknownError = 400303,
  SBChatErrorAppIdNotValid = 400304,
  SBChatErrorAuthUserIdTooLong = 400305,
  SBChatErrorAuthPlanQuotaExceeded = 400306,
  SBChatErrorSessionKeyExpired = 400309,
  SBChatErrorSessionTokenRevoked = 400310,
  SBChatErrorInvalidApiToken = 400401,
  SBChatErrorParameterMissing = 400402,
  SBChatErrorInvalidJsonBody = 400403,
  SBChatErrorConflict = 409000,
  SBChatErrorInternalServerError = 500901,
  SBChatErrorRateLimitExceeded = 500910,
  SBChatErrorUnknownError = 800000,
  SBChatErrorInvalidInitialization = 800100,
  SBChatErrorConnectionRequired = 800101,
  SBChatErrorConnectionCanceled = 800102,
  SBChatErrorInvalidParameter = 800110,
  SBChatErrorWrongChannelType = 800150,
  SBChatErrorMarkAsReadRateLimitExceeded = 800160,
  SBChatErrorQueryInProgress = 800170,
  SBChatErrorAckTimeout = 800180,
  SBChatErrorLoginTimeout = 800190,
  SBChatErrorWebSocketConnectionClosed = 800200,
  SBChatErrorWebSocketConnectionFailed = 800210,
  SBChatErrorTimerWasExpired = 800301,
  SBChatErrorTimerWasAlreadyDone = 800302,
  SBChatErrorPendingError = 800400,
  SBChatErrorPassedInvalidAccessToken = 800500,
  SBChatErrorSessionKeyRefreshSucceeded = 800501,
  SBChatErrorSessionKeyRefreshFailed = 800502,
  SBChatErrorCollectionDisposed = 800600,
  SBChatErrorLocalDatabaseError = 800700,
  SBChatErrorNetworkError = 800120,
  SBChatErrorNetworkRoutingError = 800121,
  SBChatErrorMalformedData = 800130,
  SBChatErrorMalformedErrorData = 800140,
  SBChatErrorRequestFailed = 800220,
  SBChatErrorFileUploadCancelFailed = 800230,
  SBChatErrorFileUploadCanceled = 800240,
  SBChatErrorFileUploadTimeout = 800250,
  SBChatErrorFileSizeLimitExceeded = 800260,
  SBChatErrorSocketLoginRequired = 900010,
  SBChatErrorSocketUserNotMember = 900020,
  SBChatErrorSocketUserDeactivated = 900021,
  SBChatErrorSocketUserNotOwnerOfMessage = 900022,
  SBChatErrorSocketUserSendMessageNotAllowed = 900023,
  SBChatErrorSocketInvalidMentionForMessage = 900025,
  SBChatErrorSocketInvalidPushOptionForMessage = 900026,
  SBChatErrorSocketTooManyMetaKeyForMessage = 900027,
  SBChatErrorSocketTooManyMetaValueForMessage = 900028,
  SBChatErrorSocketTooManyMetaArrayForMessage = 900029,
  SBChatErrorSocketGuestNotAllowed = 900030,
  SBChatErrorSocketMutedUserInApplicationSendMessageNotAllowed = 900040,
  SBChatErrorSocketMutedUserInChannelSendMessageNotAllowed = 900041,
  SBChatErrorSocketChannelFrozen = 900050,
  SBChatErrorSocketProfanityMessageBlocked = 900060,
  SBChatErrorSocketBannedUrlsBlocked = 900061,
  SBChatErrorSocketRestrictedDomainBlocked = 900065,
  SBChatErrorSocketModeratedFileBlocked = 900066,
  SBChatErrorSocketEnterDeletedChannel = 900070,
  SBChatErrorSocketBlockedUserReceiveMessageNotAllowed = 900080,
  SBChatErrorSocketDeactivatedUserReceiveMessageNotAllowed = 900081,
  SBChatErrorSocketWrongChannelType = 900090,
  SBChatErrorSocketBannedUserSendMessageNotAllowed = 900100,
  SBChatErrorSocketTooManyMessages = 900200,
  SBChatErrorSocketMessageNotFound = 900300,
  SBChatErrorSocketTooManyParticipants = 900400,
  SBChatErrorSocketChannelNotFound = 900500,
  SBChatErrorSocketPollNotFound = 901200,
};
static NSString * _Nonnull const SBChatErrorDomain = @"SendbirdChat.ChatError";


SWIFT_CLASS("_TtC12SendbirdChat10ChatLogger")
@interface ChatLogger : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Channel sources that represents where the channel object comes from.
/// <ul>
///   <li>
///     Since 3.0.227
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SBDCollectionEventSource, "CollectionEventSource", open) {
/// Message change log
  SBDCollectionEventSourceMessageChangelog = 0,
/// Message gap has been filled
  SBDCollectionEventSourceMessageFill = 1,
/// Channel change log
  SBDCollectionEventSourceChannelChangelog = 2,
/// Pending message has been created
  SBDCollectionEventSourceLocalMessagePendingCreated = 3,
/// Message has been failed
  SBDCollectionEventSourceLocalMessageFailed = 4,
/// Message has been canceled
  SBDCollectionEventSourceLocalMessageCanceled = 5,
/// Message has been resent
  SBDCollectionEventSourceLocalMessageResendStarted = 6,
/// Message has been sent
  SBDCollectionEventSourceEventMessageSent = 100,
/// Message has been received
  SBDCollectionEventSourceEventMessageReceived = 101,
/// Message has been updated
  SBDCollectionEventSourceEventMessageUpdated = 102,
/// Message has been deleted
  SBDCollectionEventSourceEventMessageDeleted = 103,
/// Reaction has been updated
  SBDCollectionEventSourceEventReactionUpdated = 104,
/// Message thread info has been updated
  SBDCollectionEventSourceEventThreadInfoUpdated = 105,
/// Message mention has been received
  SBDCollectionEventSourceEventMention = 106,
/// Channel has been changed
  SBDCollectionEventSourceEventChannelChanged = 107,
/// Channel member count has been changed
  SBDCollectionEventSourceEventChannelMemberCountChanged = 108,
/// Channel has been frozen
  SBDCollectionEventSourceEventChannelFrozen = 109,
/// Channel has been unfrozen
  SBDCollectionEventSourceEventChannelUnfrozen = 110,
/// Channel has been hidden
  SBDCollectionEventSourceEventChannelHidden = 111,
/// Channel has been deleted
  SBDCollectionEventSourceEventChannelDeleted = 112,
/// Channel’s operators have been updated
  SBDCollectionEventSourceEventOperatorUpdated = 113,
/// Typing status has been udpated
  SBDCollectionEventSourceEventTypingStatusUpdated = 114,
/// Channel delivery status has been updated
  SBDCollectionEventSourceEventDeliveryStatusUpdated = 115,
/// Channel read status has been updated
  SBDCollectionEventSourceEventReadStatusUpdated = 116,
/// User receives group channel invitation
  SBDCollectionEventSourceEventUserReceivedInvitation = 117,
/// User declines group channel invitation
  SBDCollectionEventSourceEventUserDeclinedInvitation = 118,
/// User joins group channel
  SBDCollectionEventSourceEventUserJoined = 119,
/// User has been muted
  SBDCollectionEventSourceEventUserMuted = 120,
/// User has been umuted
  SBDCollectionEventSourceEventUserUnmuted = 121,
/// User leave group channel
  SBDCollectionEventSourceEventUserLeft = 122,
/// User has been banned
  SBDCollectionEventSourceEventUserBanned = 123,
/// User has been unbanned
  SBDCollectionEventSourceEventUserUnbanned = 124,
};


/// Core error code
typedef SWIFT_ENUM_NAMED(NSInteger, SBCoreError, "CoreError", open) {
  SBCoreErrorUnknownError = 800000,
  SBCoreErrorNetworkError = 800120,
  SBCoreErrorNetworkRoutingError = 800121,
  SBCoreErrorMalformedData = 800130,
  SBCoreErrorRequestFailed = 800220,
  SBCoreErrorFileUploadCancelFailed = 800230,
  SBCoreErrorFileUploadCanceled = 800240,
  SBCoreErrorFileUploadTimeout = 800250,
  SBCoreErrorFileSizeLimitExceeded = 800260,
  SBCoreErrorInternalServerError = 500901,
};
static NSString * _Nonnull const SBCoreErrorDomain = @"SendbirdChat.CoreError";

/// The enum type to represent various kinds of counts.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDCountPreference, "CountPreference", open) {
/// The channel of this preference has all of count.
  SBDCountPreferenceAll = 0,
/// The channel of this preference has only unread message count.
  SBDCountPreferenceUnreadMessageCountOnly = 1,
/// The channel of this preference has only unread mention count.
  SBDCountPreferenceUnreadMentionCountOnly = 2,
/// The channel of this preference does not get any count.
  SBDCountPreferenceOff = 3,
};


/// An object represets delivery status of a channel
SWIFT_CLASS_NAMED("DeliveryStatus")
@interface SBDDeliveryStatus : NSObject
@property (nonatomic, copy) NSString * _Nullable channelURL;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nullable updatedDeliveryReceipt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class to represent emoji
/// since:
/// 3.0.180
SWIFT_CLASS_NAMED("Emoji")
@interface SBDEmoji : NSObject
/// Emoji’s key
@property (nonatomic, copy) NSString * _Nonnull key;
/// Emoji’s url
@property (nonatomic, copy) NSString * _Nonnull url;
@end


@interface SBDEmoji (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>Emoji</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// Class to represent emoji cateogry
/// since:
/// 3.0.180
SWIFT_CLASS_NAMED("EmojiCategory")
@interface SBDEmojiCategory : NSObject
/// Emoji category’s key
@property (nonatomic) int64_t cid;
/// Emoji category’s name
@property (nonatomic, copy) NSString * _Nonnull name;
/// Emoji category’s url
@property (nonatomic, copy) NSString * _Nonnull url;
/// Emoji list
@property (nonatomic, copy) NSArray<SBDEmoji *> * _Nonnull emojis;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDEmojiCategory (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDEmojiCategory (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>EmojiCategory</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains list of <code>EmojiCategory</code> and hash
SWIFT_CLASS_NAMED("EmojiContainer")
@interface SBDEmojiContainer : NSObject
/// A hash value that represnts any changes on emojis
@property (nonatomic, copy) NSString * _Nonnull emojiHash;
/// Emoji category list
@property (nonatomic, copy) NSArray<SBDEmojiCategory *> * _Nonnull categories;
@end


@interface SBDEmojiContainer (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>EmojiContainer</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDThumbnail;

/// Represents a mesage object that contains a file. Derived from <code>BaseMessage</code>
/// note:
/// This class doesn’t include a binary <em>data</em> for the file. It is just a URL.
SWIFT_CLASS_NAMED("FileMessage")
@interface SBDFileMessage : SBDBaseMessage
/// The file URL.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The file URL without the ekey.
/// since:
/// 3.0.194
@property (nonatomic, readonly, copy) NSString * _Nullable plainURL;
/// The name of file.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The size of file.
@property (nonatomic, readonly) NSUInteger size;
/// The type of file.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Image thumbnails.
@property (nonatomic, copy) NSArray<SBDThumbnail *> * _Nullable thumbnails;
@property (nonatomic) BOOL requireAuth;
@property (nonatomic, copy) NSString * _Nullable eKey;
+ (SBDFileMessage * _Nullable)pendingMessageWithParams:(SBDFileMessageCreateParams * _Nonnull)params requestId:(NSString * _Nullable)requestId channel:(SBDBaseChannel * _Nonnull)channel sender:(SBDUser * _Nullable)sender isOperatorMessage:(BOOL)isOperatorMessage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage SWIFT_UNAVAILABLE;
@end


@interface SBDFileMessage (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDFileMessage (SWIFT_EXTENSION(SendbirdChat))
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>FileMessage</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDThumbnailSize;

/// An object contains set of options to create <code>FileMessage</code>
/// since:
/// 3.0.90
SWIFT_CLASS_NAMED("FileMessageCreateParams")
@interface SBDFileMessageCreateParams : SBDBaseMessageCreateParams
/// Binary file data. <code>file</code> and <code>fileURL</code> cannot be set together.
@property (nonatomic, copy) NSData * _Nullable file;
@property (nonatomic, copy) NSData * _Nullable internalFile;
@property (nonatomic, copy) NSString * _Nullable base64File;
/// File URL. <code>file</code> and <code>fileURL</code> cannot be set together.
@property (nonatomic, copy) NSString * _Nullable fileURL;
@property (nonatomic, copy) NSString * _Nullable internalFileURL;
/// Thumbnail sizes. This parameter is the array of <code>ThumbnailSize</code> instance and works for image file only.
@property (nonatomic, copy) NSArray<SBDThumbnailSize *> * _Nullable thumbnailSizes;
/// File name.
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable internalFileName;
/// File MIME type.
@property (nonatomic, copy) NSString * _Nullable mimeType;
@property (nonatomic, copy) NSString * _Nullable internalMimeType;
/// File size.
@property (nonatomic) NSUInteger fileSize;
/// Initializes an instance of a file message params with binary file.
/// \param file A Biniary file to be sent.
///
///
/// returns:
/// An initialized file message params
- (nonnull instancetype)initWithFile:(NSData * _Nonnull)file OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of a file message params with file url.
/// \param fileURL File url to be sent.
///
///
/// returns:
/// An initialized file message params
- (nonnull instancetype)initWithFileURL:(NSString * _Nonnull)fileURL OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) BinaryData * _Nullable binaryData;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>FileMessageCreateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithData:(NSString * _Nullable)data customType:(NSString * _Nullable)customType pushNotificationDeliveryOption:(enum SBDPushNotificationDeliveryOption)pushNotificationDeliveryOption metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays mentionType:(enum SBDMentionType)mentionType mentionedUserIds:(NSArray<NSString *> * _Nullable)mentionedUserIds parentMessageId:(int64_t)parentMessageId isReplyToChannel:(BOOL)isReplyToChannel appleCriticalAlertOptions:(SBDAppleCriticalAlertOptions * _Nullable)appleCriticalAlertOptions SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWith:(SBDBaseMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end


/// The <code>FileMessageCreateParams</code> class is used to send a file message in <code>BaseChannel</code>. This is a child class of <code>BaseMessageCreateParams</code>.
SWIFT_CLASS_NAMED("FileMessageUpdateParams")
@interface SBDFileMessageUpdateParams : SBDBaseMessageUpdateParams
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>FileMessage</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithData:(NSString * _Nullable)data customType:(NSString * _Nullable)customType mentionType:(enum SBDMentionType)mentionType mentionedUserIds:(NSArray<NSString *> * _Nullable)mentionedUserIds SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWith:(SBDBaseMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end

@class NSStream;

SWIFT_CLASS("_TtC12SendbirdChat16FoundationStream")
@interface FoundationStream : NSObject <NSStreamDelegate>
/// Delegate for the stream methods. Processes incoming bytes
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A object to retrieve friend list
SWIFT_CLASS_NAMED("FriendListQuery")
@interface SBDFriendListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use SendbirdChat's `createFriendListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>FriendListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDFriendListQuery * _Nonnull)setupFor:(SBDFriendListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDMember;
enum SBDGroupChannelPushTriggerOption : NSInteger;
enum SBDMemberState : NSInteger;
enum SBDRole : NSInteger;
enum SBDMutedState : NSInteger;
enum SBDGroupChannelHiddenState : NSInteger;
enum SBDGroupChannelListOrder : NSInteger;

/// The <code>GroupChannel</code> class represents a group channel which is a private chat.
/// The user who wants to join the group channel has to be invited by another user who is already joined
/// the channel. This class is derived from <code>BaseChannel</code>. If the <code>BaseChannelDelegate</code> is added,
/// the user will automatically receive all messages from the group channels where the user belongs after
/// connection. The <code>GroupChannel</code> provides the features of general messaging apps.
/// <ul>
///   <li>
///     Typing indicator.
///   </li>
///   <li>
///     Read status for each message.
///   </li>
///   <li>
///     Unread message count in the channel.
///   </li>
///   <li>
///     Lastest message in the channel.
///   </li>
/// </ul>
/// The <code>GroupChannel</code> has a special property, <code>isDistinct</code>. The distinct property enabled group
/// channel is always reuesd for same channel <em>members</em>. If a new member gets invited or the member
/// left from the channel, then the distinct property disabled automatically. If you don’t set distinct property
/// on the channel, it always create new channel for the same <em>members</em>.
/// For more information, see <a href="https://docs.sendbird.com/ios#group_channel">Group Channel</a>.
SWIFT_CLASS_NAMED("GroupChannel")
@interface SBDGroupChannel : SBDBaseChannel
/// Last message of the channel.
@property (nonatomic, strong) SBDBaseMessage * _Nullable lastMessage;
/// Represents the channel is super channel or not.
@property (nonatomic) BOOL isSuper;
/// Represents the channel is broadcast channel or not.
/// since:
/// 3.0.171
@property (nonatomic) BOOL isBroadcast;
/// Represents the channel is public channel or private one.
@property (nonatomic) BOOL isPublic;
/// Represents that the channel has access code to enter.
/// since:
/// 3.0.116
@property (nonatomic) BOOL isAccessCodeRequired;
/// Represents the channel is distinct or not.
@property (nonatomic) BOOL isDistinct;
/// Represents a boolean whether the public group channel is discoverable.
/// It is only for a public group channel.
/// The default value is <code>true</code> if the channel is a public group channel.
/// If the channel is not a public group channel, the default value is <code>false</code>.
/// since:
/// 3.0.136
@property (nonatomic) BOOL isDiscoverable;
/// Unread message count of the channel.
@property (nonatomic) NSUInteger unreadMessageCount;
/// The number of mentions that user does not read yet in the channel.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger unreadMentionCount;
/// Channel members
/// note:
/// Number of member for Super GroupChannel is limited to 10
@property (nonatomic, readonly, copy) NSArray<SBDMember *> * _Nonnull members;
@property (nonatomic, copy) NSDictionary<NSString *, SBDMember *> * _Nonnull memberMap;
/// The number of members.
@property (nonatomic) NSUInteger memberCount;
/// The number of joined members.
@property (nonatomic) NSUInteger joinedMemberCount;
/// Timestamp when current user joined
/// since:
/// 3.0.224
@property (nonatomic) int64_t joinedAt;
/// Represents which push notification for the current user to receive in a group channel.
/// since:
/// 3.0.128
@property (nonatomic) enum SBDGroupChannelPushTriggerOption myPushTriggerOption;
/// Represents this channel is hidden or not.
@property (nonatomic) BOOL isHidden;
/// Current member’s state in the channel.
@property (nonatomic) enum SBDMemberState myMemberState;
/// The role of current user in the channel.
@property (nonatomic) enum SBDRole myRole;
/// The muted state of the current user in the channel.
@property (nonatomic) enum SBDMutedState myMutedState;
/// The preference lets to know counts in the channel. The default value is <code>.all</code>.
/// since:
/// 3.0.102
@property (nonatomic) enum SBDCountPreference myCountPreference;
/// The time stamp when the current user got a invitation from other user in the channel.
/// since:
/// 3.0.107
@property (nonatomic) int64_t invitedAt;
/// The hidden state of the channel.
/// since:
/// 3.0.122
@property (nonatomic) enum SBDGroupChannelHiddenState hiddenState;
/// A last read information for the current user.
/// since:
/// 3.0.138
@property (nonatomic) int64_t myLastRead;
/// Message offset of a channel. User can only see messages after this offset.
/// since:
/// 3.0.157
@property (nonatomic) int64_t messageOffsetTimestamp;
/// A value that sets the message survival time in seconds. In the channel that is created or updated
/// with this option, the read messages are automatically deleted after a determined amount of time.
/// The default value is <code>-1</code> that represents the disappearing message is disabled.
/// note:
/// This feature is available in a 1-on-1 group channel.
/// since:
/// 3.0.172
@property (nonatomic) NSInteger messageSurvivalSeconds;
@property (nonatomic) int64_t memberCountUpdatedAt;
@property (nonatomic) BOOL isCreated;
/// Checks if the channel has a member that has <code>userId</code>.
/// \param userId User ID.
///
///
/// returns:
/// If <code>true</code>, the channel has the member.
- (BOOL)hasMember:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Gets member in the channel.
/// \param userId User ID.
///
///
/// returns:
/// <code>Member</code> object as a member. If there is a member who has the <code>userId</code>, Returns nil.
- (SBDMember * _Nullable)getMember:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSTimeInterval typingIndicatorThrottlingInterval;
@property (nonatomic) NSTimeInterval lastStartTypingTimestamp;
@property (nonatomic) NSTimeInterval lastEndTypingTimestamp;
@property (nonatomic) NSTimeInterval lastManualMarkAsReadTimestamp;
@property (nonatomic, strong) SBDUser * _Nullable inviter;
/// Gets a user who invites current user to this channel
///
/// returns:
/// optional `User
- (SBDUser * _Nullable)getInviter SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull readReceipts;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull deliveryReceipts;
/// Gets my delivery status in UTC timestamp
- (int64_t)myDeliveryStatus SWIFT_WARN_UNUSED_RESULT;
/// Compares two channel objects with the channel list order.
/// since:
/// 3.0.227
/// \param channelA First channel object.
///
/// \param channelB Second channel obejct.
///
/// \param order Order.
///
+ (BOOL)compareWithChannelA:(SBDGroupChannel * _Nonnull)channelA channelB:(SBDGroupChannel * _Nonnull)channelB order:(enum SBDGroupChannelListOrder)order SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL name:(NSString * _Nonnull)name coverURL:(NSString * _Nullable)coverURL createdAt:(int64_t)createdAt creator:(SBDUser * _Nullable)creator isCreated:(BOOL)isCreated data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType isEphemeral:(BOOL)isEphemeral isFrozen:(BOOL)isFrozen lastSyncedTs:(int64_t)lastSyncedTs isSuper:(BOOL)isSuper isBroadcast:(BOOL)isBroadcast isPublic:(BOOL)isPublic isDiscoverable:(BOOL)isDiscoverable isDistinct:(BOOL)isDistinct unreadMentionCount:(NSUInteger)unreadMentionCount unreadMessageCount:(NSUInteger)unreadMessageCount lastMessage:(SBDBaseMessage * _Nullable)lastMessage members:(NSArray<SBDMember *> * _Nonnull)members memberCount:(NSUInteger)memberCount memberCountUpdatedAt:(int64_t)memberCountUpdatedAt joinedMemberCount:(NSUInteger)joinedMemberCount readReceipts:(NSDictionary<NSString *, NSNumber *> * _Nonnull)readReceipts deliveryReceipts:(NSDictionary<NSString *, NSNumber *> * _Nonnull)deliveryReceipts inviter:(SBDUser * _Nullable)inviter invitedAt:(int64_t)invitedAt myMemberState:(enum SBDMemberState)myMemberState isHidden:(BOOL)isHidden joinedAt:(int64_t)joinedAt myRole:(enum SBDRole)myRole myMuteState:(enum SBDMutedState)myMuteState myCountPreference:(enum SBDCountPreference)myCountPreference isAccessCodeRequired:(BOOL)isAccessCodeRequired myLastRead:(int64_t)myLastRead messageOffset:(int64_t)messageOffset messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSObject * _Nullable uniqueKey;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL name:(NSString * _Nonnull)name coverURL:(NSString * _Nullable)coverURL createdAt:(int64_t)createdAt creator:(SBDUser * _Nullable)creator isCreated:(BOOL)isCreated data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType isEphemeral:(BOOL)isEphemeral isFrozen:(BOOL)isFrozen lastSyncedTs:(int64_t)lastSyncedTs SWIFT_UNAVAILABLE;
@end



@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)updateTypingStatusWith:(SBDUser * _Nullable)user didStart:(BOOL)didStart;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Freeze the channel. If channel is frozen, only operators can send messages to the channel.
/// since:
/// 3.0.89
/// \param completionHandler The handler block to be executed after freeze.
///
- (void)freezeWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Stop to freeze the channel. If It is not frozen channel, this will be ignored.
/// since:
/// 3.0.89
/// \param completionHandler The handler block to be executed after stop to freeze.
///
- (void)unfreezeWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly) BOOL shouldSendMACK;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>GroupChannel</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)internalBuildFromSerializedData:(NSData * _Nullable)data fromDB:(BOOL)isFromDB SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)updateMyReadReceiptWithTimestamp:(int64_t)timestamp;
- (void)updateReadReceiptWith:(NSString * _Nullable)userId timestamp:(int64_t)timestamp;
- (void)removeReadReceiptWith:(NSString * _Nullable)userId;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)updateDeliveryReceiptWith:(NSString * _Nullable)userId timestamp:(int64_t)timestamp;
- (void)updateDeliveryReceipts:(NSDictionary<NSString *, NSNumber *> * _Nullable)deliveryReceipts;
- (void)removeDeliveryReceiptWith:(NSString * _Nullable)userId;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (NSComparisonResult (^ _Nonnull)(id _Nullable, id _Nullable))comparator SWIFT_WARN_UNUSED_RESULT;
- (NSComparisonResult)orderBetweenObjectWithObj1:(id _Nullable)obj1 obj2:(id _Nullable)obj2 SWIFT_WARN_UNUSED_RESULT;
+ (NSComparisonResult)orderBetweenObjectsWithObj1:(id _Nullable)obj1 obj2:(id _Nullable)obj2 order:(enum SBDGroupChannelListOrder)order SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)addMember:(SBDMember * _Nullable)member timestamp:(int64_t)timestamp;
- (SBDMember * _Nullable)removeMember:(SBDMember * _Nullable)member;
- (SBDMember * _Nullable)removeMemberWith:(NSString * _Nullable)userId;
- (void)updateJoinedMemberCount;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (BOOL)shouldUpdateLastMessage:(SBDBaseMessage * _Nonnull)message sender:(SBDSender * _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
- (void)updateMember:(SBDUser * _Nullable)sender;
- (BOOL)updateUnreadCountWithMessage:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDGroupChannelListQuery;
@class SBDPublicGroupChannelListQuery;
@class SBDGroupChannelMemberListQuery;

@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates a query for my group channel list.
///
/// returns:
/// GroupChannelListQuery instance for the current user.
+ (SBDGroupChannelListQuery * _Nonnull)createMyGroupChannelListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query for public group channel list.
///
/// returns:
/// The instance to query public group channels.
+ (SBDPublicGroupChannelListQuery * _Nonnull)createPublicGroupChannelListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query for members in group channel.
/// \param channelURL channel url
///
///
/// returns:
/// The instance to query the members in group channel.
+ (SBDGroupChannelMemberListQuery * _Nonnull)createMemberListQueryWithChannelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates a query for members in group channel.
///
/// returns:
/// The instance to query the members in group channel.
- (SBDGroupChannelMemberListQuery * _Nullable)createMemberListQuery SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Resets the history in this channel.
/// \param completionHandler The handler block to execute.
///
- (void)resetMyHistoryWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Changes a setting that decides which push notification for the current user to receive in the group channel.
/// If a value of option is <code>.default</code>, a push trigger option in this group channel follows a push trigger option
/// of the current user. It is related with <code>SendbirdChat setPushTriggerOption(_:completionHandler:)</code>.
/// since:
/// 3.0.128
/// \param option options to choose which push notification for the current user to receive.
///
/// \param completionHandler handler block to execute when setting a push trigger option of the current user is completed.
///
- (void)setMyPushTriggerOption:(enum SBDGroupChannelPushTriggerOption)option completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Requests a setting that decides which push notification for the current user to receive in the group channel.
/// since:
/// 3.0.128
/// \param completionHandler The handler block to execute when getting a push trigger option of the current user is completed.
///
- (void)getMyPushTriggerOptionWithCompletionHandler:(void (^ _Nonnull)(enum SBDGroupChannelPushTriggerOption, SBError * _Nullable))completionHandler;
/// Sets count preference of current user.
/// since:
/// 3.0.102
/// \param myCountPreference Preference is type of <code>CountPreference</code>. The default value is <code>.all</code>.
///
- (void)setMyCountPreference:(enum SBDCountPreference)myCountPreference completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Starts typing. The other <em>members</em> in the channel will receive an event.
/// The event will be received in <code>channelDidUpdateTypingStatus(_:)</code> of <code>GroupChannelDelegate</code>.
- (void)startTyping;
/// Ends typing. The other <em>members</em> in the channel will receive an event.
/// The event will be received in <code>channelDidUpdateTypingStatus(_:)</code> of <code>GroupChannelDelegate</code>.
- (void)endTyping;
/// Checks any members in the channel has been typing
///
/// returns:
/// <code>true</code> when other users are typing in this channel.
- (BOOL)isTyping SWIFT_WARN_UNUSED_RESULT;
/// Returns the users who are typing now.
/// since:
/// 3.0.202
///
/// returns:
/// The users who are typing now.
- (NSArray<SBDUser *> * _Nullable)getTypingUsers SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Returns how many <em>members</em> haven’t been read the given message yet.
/// since:
/// 3.0.185
/// \param message The message.
///
///
/// returns:
/// Number of unread member count. Zero if all <em>members</em> read the message.
- (NSInteger)getUnreadMemberCount:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Returns the <em>members</em> who read the given message.
/// since:
/// 3.0.115
/// \param message The message.
///
/// \param includeAllMembers If <code>true</code>, the return value includes the current user and the sender of the message.
///
///
/// returns:
/// Members who read the message.
- (NSArray<SBDMember *> * _Nonnull)getReadMembersWithMessage:(SBDBaseMessage * _Nonnull)message includeAllMembers:(BOOL)includeAllMembers SWIFT_WARN_UNUSED_RESULT;
/// Returns the <em>members</em> who didn’t read the given message.
/// since:
/// 3.0.115
/// \param message The message.
///
/// \param includeAllMembers If <code>true</code>, the return value includes the current user and the sender of the message.
///
///
/// returns:
/// Members who don’t read the message.
- (NSArray<SBDMember *> * _Nonnull)getUnreadMembersWithMessage:(SBDBaseMessage * _Nonnull)message includeAllMembers:(BOOL)includeAllMembers SWIFT_WARN_UNUSED_RESULT;
/// Returns how many <em>members</em> haven’t been delivery the given message yet.
/// since:
/// 3.0.185
/// \param message The message.
///
///
/// returns:
/// Number of undelivered member count. Zero if all <em>members</em> delivered the message.
- (NSInteger)getUndeliveredMemberCount:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Returns the read status.
/// since:
/// 3.0.115
/// [
/// USER_ID: [
/// “user”: <em>User</em> object,
/// “last_seen_at”: <em>Int64</em>,
/// ]
/// ]
/// <code>USER_ID</code> is the user ID as a key. Each <code>USER_ID</code> has a <code>Dictionary</code> which includes
/// <code>User</code> object and <code>Int64</code>. The “user” is a key of <code>User</code> object and the
/// “last_seen_at” is a key of <code>Int64</code> object.
/// \param includeAllMembers If true, the return value includes the current user and the sender of the message.
///
///
/// returns:
/// The read status. If there’s no data, it will be an empty dictionary.
- (NSDictionary<NSString *, NSDictionary<NSString *, id> *> * _Nonnull)getReadStatusIncludingAllMembers:(BOOL)includeAllMembers SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDGroupChannelCreateParams;
@class SBDGroupChannelUpdateParams;

@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Refreshes this channel instance.
/// \param completionHandler The handler block to execute.
///
- (void)refreshWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Creates a group channel with <code>GroupChannelCreateParams</code> class.
/// \param params The parameter instance of GroupChannelCreateParams what has properties
/// to create group channel.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel
/// instance which has the <code>userIds</code> as <em>members</em>.
///
+ (void)createChannelWithParams:(SBDGroupChannelCreateParams * _Nonnull)params completionHandler:(void (^ _Nullable)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a group channel with <code>GroupChannelCreateParams</code> class.
/// since:
/// 3.0.215
/// \param params The parameter instance of GroupChannelCreateParams what has properties to create group channel.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of bytes sent
/// since the last time this method was called. <code>totalBytesSent</code> is the total number of bytes sent so far.
/// <code>totalBytesExpectedToSend</code> is the expected length of the body <em>data</em>. These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel instance which
/// has the <code>userIds</code> as <em>members</em>.
///
+ (void)createChannelWithParams:(SBDGroupChannelCreateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a group channel with <code>GroupChannelCreateParams</code> class.
/// The <code>completionHandler</code> Returns <code>isCreated</code>, which notifies the <code>channel</code> instance is created now.
/// since:
/// 3.0.122
/// \param params The parameter instance of <code>GroupChannelCreateParams</code> what has properties
/// to create group channel. The channel that is created by this method is always a distinct channel regardless of
/// the <code>isDistinct</code> value of the <code>params</code>.
///
/// \param completionHandler The handler block to be executed. If the <code>channel</code> instance is new,
/// then <code>isCreated</code> is <code>true</code>.
///
+ (void)createDistinctChannelIfNotExistWithParams:(SBDGroupChannelCreateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDGroupChannel * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Creates a group channel with <code>GroupChannelCreateParams</code> class.
/// The <code>completionHandler</code> Returns <code>isCreated</code>, which notifies the <code>channel</code> instance is created now.
/// since:
/// 3.0.215
/// \param params The parameter instance of GroupChannelCreateParams what has properties to create
/// group channel. The channel that is created by this method is always a distinct channel regardless
/// of the <code>isDistinct</code> value of the <code>params</code>.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of
/// bytes sent since the last time this method was called. <code>totalBytesSent</code> is the total number of
/// bytes sent so far. <code>totalBytesExpectedToSend</code> is the expected length of the body <em>data</em>.
/// These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to be executed. If the <code>channel</code> instance is new, then <code>isCreated</code> is <code>true</code>.
///
+ (void)createDistinctChannelIfNotExistWithParams:(SBDGroupChannelCreateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nonnull)(SBDGroupChannel * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Update a group channel with <code>GroupChannelUpdateParams</code> class.
/// \param params instance of <code>GroupChannelUpdateParams</code> contains what to update for group channel.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel
/// instance which has the <code>userIds</code> as <em>members</em>.
///
- (void)updateChannelWithParams:(SBDGroupChannelUpdateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Update a group channel with <code>GroupChannelUpdateParams</code> class.
/// since:
/// 3.0.215
/// <ul>
///   <li>
///     <h2>parameter d</h2>
///   </li>
/// </ul>
/// \param params instance of <code>GroupChannelUpdateParams</code> contains what to update for group channel.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of bytes
/// sent since the last time this method was called. <code>totalBytesSent</code> is the total number of bytes sent so far.
/// <code>totalBytesExpectedToSend</code> is the expected length of the body <em>data</em>. These parameters are
/// the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel instance which
/// has the <code>userIds</code> as <em>members</em>.
///
- (void)updateChannelWithParams:(SBDGroupChannelUpdateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nonnull)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Gets a group channel instance from channel URL asynchronously.
/// \param url The channel URL.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the group channel
/// instance which has the <code>channelURL</code>.
///
+ (void)getChannelWithURL:(NSString * _Nonnull)url completionHandler:(void (^ _Nullable)(SBDGroupChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes the group channel. The user has to be an operator of the channel.
/// since:
/// 3.0.137
/// \param completionHandler The handler block to execute.
///
- (void)deleteChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
- (void)clearAllUnreadCount;
@property (nonatomic, readonly) BOOL isMyUnreadMessageCountEnabled;
- (void)increaseUnreadMessageCount;
- (void)clearUnreadMessageCount;
@property (nonatomic, readonly) BOOL isMyUnreadMentionCountEnabled;
- (void)increaseUnreadMentionCount;
- (void)decreaseUnreadMentionCount;
- (void)clearUnreadMentionCount;
@end

@class SBDScheduledUserMessageCreateParams;
@class SBDScheduledUserMessage;

@interface SBDGroupChannel (SWIFT_EXTENSION(SendbirdChat))
/// Invites a single user to the group channel.
/// \param user The user to be invited.
///
/// \param completionHandler The handler block to execute.
///
- (void)inviteUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Invites a single user to the group channel.
/// \param userId The user ID to be invited.
///
/// \param completionHandler The handler block to execute.
///
- (void)inviteUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Invites multiple users to the group channel.
/// \param users The user array to be invited.
///
/// \param completionHandler The handler block to execute.
///
- (void)inviteUsers:(NSArray<SBDUser *> * _Nonnull)users completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Invites multiple users to the group channel.
/// \param userIds The IDs of users array to be invited.
///
/// \param completionHandler The handler block to execute.
///
- (void)inviteUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Accpets the invitation.
/// \param completionHandler The handler block to execute.
///
- (void)acceptInvitationWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Accpets the invitation from a public group channel that has access code.
/// since:
/// 3.0.116
/// \param accessCode The string code is used to accept invitation from a public group channel.
///
/// \param completionHandler The handler block to be executed after accepting. This block
/// has no return value and takes an argument that is an error made when there is something wrong to accept.
///
- (void)acceptInvitationWithAccessCode:(NSString * _Nullable)accessCode completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Declines the invitation.
/// \param completionHandler The handler block to execute.
///
- (void)declineInvitationWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Join a group channel
/// \param completionHandler The handler block to execute.
///
- (void)joinWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Join a public group channel that has access code.
/// since:
/// 3.0.116
/// \param accessCode The string code is used to join a public group channel.
///
/// \param completionHandler The handler block to be executed after joining. This block
/// has no return value and takes an argument that is an error made when there is something wrong to join.
///
- (void)joinWithAccessCode:(NSString * _Nullable)accessCode completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Leaves the group channel. The channel will be disappeared from the channel list. If join the channel,
/// the invitation is required.
/// \param completionHandler The handler block to execute.
///
- (void)leaveChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Hides the group channel. The channel will be hid from the channel list, but it will be appeared again
/// when the other user send a message in the channel.
/// \param hidePreviousMessages The option to hide the previous message of this channel when the channel will be appeared again.
///
/// \param completionHandler The handler block to execute.
///
- (void)hideChannelWithHidePreviousMessages:(BOOL)hidePreviousMessages completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Hides the group channel with the auto unhide option. The channel will be hid from the channel list.
/// If the <code>allowAutoUnhide</code> is <code>true</code>, the channel will be appeared again when the other user send a
/// message in the channel. However, if the <code>allowAutoUnhide</code> is <code>false</code>, the channel will be appeared
/// by <code>unhideChannel(completionHandler:)</code> method.
/// since:
/// 3.0.122
/// \param hidePreviousMessages The option to hide the previous message of this channel when the channel will be appeared again.
///
/// \param allowAutoUnhide The auto unhide option.
///
/// \param completionHandler THe handle block to be executed.
///
- (void)hideChannelWithHidePreviousMessages:(BOOL)hidePreviousMessages allowAutoUnhide:(BOOL)allowAutoUnhide completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Unhides the group channel.
/// since:
/// 3.0.122
/// \param completionHandler THe handle block to be executed.
///
- (void)unhideChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Sends mark as read. The other <em>members</em> in the channel will receive an event. The event will be received in
/// <code>channelDidUpdateReadStatus:</code> of <code>GroupChannelDelegate</code>.
/// \param completionHandler completion handler 
///
- (void)markAsReadWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Registers a scheduled user message. The message will be sent at the specified time in <code>params</code>.
/// since:
/// 3.0.119
/// \param params The instance of <code>ScheduledUserMessageCreateParams</code> that can has
/// parameters related with a text message. It has also the specified time to send a user message.
///
/// \param completionHandler The handler block to be executed.
///
- (void)registerScheduledUserMessageWithParams:(SBDScheduledUserMessageCreateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDScheduledUserMessage * _Nullable, SBError * _Nullable))completionHandler;
/// Notifies the current user took a screenshot in this channel. The server is going to send an admin
/// message to notify this in the group channel.
/// since:
/// 3.0.172
/// \param completionHandler The handler block to be executed.
///
- (void)notifyScreenshotWasTakenWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


/// An object that represents the parameters for the The method returns channels according to the properties in this object.
/// since:
/// 3.0.182
SWIFT_CLASS_NAMED("GroupChannelChangeLogsParams")
@interface SBDGroupChannelChangeLogsParams : NSObject
/// Sets the custom types filter.
/// The property filters channels which have one of custom types.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull customTypes;
/// Determines whether to include the empty channels in the results.
/// note:
/// The default value is <code>true</code>.
@property (nonatomic) BOOL includeEmptyChannel;
/// Determines whether to include the frozen channels in the results.
/// note:
/// The default value is <code>true</code>.
@property (nonatomic) BOOL includeFrozenChannel;
/// Create <code>GroupChannelChangeLogsParams</code> from a given GroupChannelListQuery instance.
/// since:
/// 3.0.185
/// \param query group channel list query
///
///
/// returns:
/// A created instance of <code>GroupChannelChangeLogsParams</code>
+ (SBDGroupChannelChangeLogsParams * _Nonnull)createWithGroupChannelListQuery:(SBDGroupChannelListQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBDGroupChannelCollectionDelegate;

/// An object that accesses the cache for the group channels.
/// since:
/// 3.1.0
SWIFT_CLASS_NAMED("GroupChannelCollection")
@interface SBDGroupChannelCollection : SBDBaseCollection
/// The channels that the collection has fetched.
@property (nonatomic, readonly, copy) NSArray<SBDGroupChannel *> * _Nonnull channelList;
/// If <code>true</code>, the next page might exist.
@property (nonatomic) BOOL hasNext;
/// Group channel list query
@property (nonatomic, strong) SBDGroupChannelListQuery * _Nonnull query;
/// Collection delegate.
@property (nonatomic, weak) id <SBDGroupChannelCollectionDelegate> _Nullable delegate;
/// Represents that the collection is going to display the real-time messages.
@property (nonatomic, readonly) BOOL isLive;
/// Token for channel change log.
@property (nonatomic, readonly, copy) NSString * _Nullable changelogsToken;
/// Default timestamp for group channel change logs.
@property (nonatomic, readonly) int64_t defaultTs;
/// Represents the collection needs to fetch more data to satisfy query limit
@property (nonatomic, readonly) BOOL needMoreData;
/// Channel repository to access the memory cache and the DB.
@property (nonatomic, strong) ChannelRepository * _Nonnull repository;
/// Comparator for channel list.
@property (nonatomic, readonly, copy) BOOL (^ _Nonnull comparator)(SBDGroupChannel * _Nonnull, SBDGroupChannel * _Nonnull);
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull queue;
@property (nonatomic, readonly, copy) NSString * _Nonnull delegateKey;
/// Loads next page.
/// \param completionHandler The completion handler to be executed.
///
- (void)loadMoreWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, SBError * _Nullable))completionHandler;
/// Invalidates the object.
- (void)dispose;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)didSucceedReconnection;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly, copy) NSString * _Nullable token;
@property (nonatomic, readonly) int64_t timestamp;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChangeNotification;)
+ (NSNotificationName _Nonnull)ChangeNotification SWIFT_WARN_UNUSED_RESULT;
/// Notifies that data set has been changed.
- (void)notifyDataSetChanged;
/// Notifies that channels have been deleted.
/// \param context Channel context.
///
/// \param deletedChannelURLs Deleted channels’ URLs.
///
- (void)notifyChannelDeletedWithContext:(SBDChannelContext * _Nonnull)context channelURLs:(NSArray<NSString *> * _Nonnull)channelURLs;
/// Notifies that channels have been updated.
/// \param context Channel context.
///
/// \param updatedChannels Updated channels.
///
- (void)notifyChannelUpdatedWithContext:(SBDChannelContext * _Nonnull)context channels:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
/// Notifies that channels have been added.
/// \param context Channel context.
///
/// \param addedChannels Added channels.
///
- (void)notifyChannelAddedWithContext:(SBDChannelContext * _Nonnull)context channels:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
/// Requests channel change logs.
- (void)requestChangelogs;
/// Sets the default timestamp for getting the channel change logs.
/// \param channels Array of channel objects
///
- (void)setDefaultChangelogsTimestampsWithChannel:(SBDGroupChannel * _Nullable)channel;
/// Checks the <code>channel</code> should be displayed above the <code>baseChannel</code>.
- (BOOL)shouldAddToViewWithChannel:(SBDGroupChannel * _Nonnull)channel baseChannel:(SBDGroupChannel * _Nullable)baseChannel SWIFT_WARN_UNUSED_RESULT;
/// Gets the oldest channel from the cache that the collection has.
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nullable oldestChannel;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)updateWithChannel:(SBDGroupChannel * _Nonnull)channel source:(enum SBDCollectionEventSource)source;
/// Updates all channels if they exist and invokes the channel collection delegates.
/// \param source Channel source. 
///
/// \param channels Channels to be updated. 
///
- (void)updateIfExistsWithChannels:(NSArray<SBDGroupChannel *> * _Nonnull)channels source:(enum SBDCollectionEventSource)source;
/// Updates a channel if it exists and invokes the channel collection delegates.
/// \param source Channel source. 
///
/// \param channel Channel to be updated. 
///
- (void)updateIfExistWithChannel:(SBDGroupChannel * _Nonnull)channel source:(enum SBDCollectionEventSource)source;
/// Updates or inserts a channel and invokes the channel collection delegates.
/// \param source Channel source. 
///
/// \param channel Channel to be updated or inserted. 
///
- (void)upsertWithChannel:(SBDGroupChannel * _Nonnull)channel source:(enum SBDCollectionEventSource)source;
/// Updates channels.
/// \param channels Channels to be updated. 
///
- (void)updateWithChannels:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
/// Updates channels with the channel change logs.
- (void)updateChangelogsWithAdded:(NSArray<SBDGroupChannel *> * _Nonnull)added updated:(NSArray<SBDGroupChannel *> * _Nonnull)updated deleted:(NSArray<NSString *> * _Nonnull)deleted;
/// Deletes a channel and invokes the channel collection delegates.
/// \param channel Deleted channel. 
///
/// \param source Channel source. 
///
///
/// returns:
/// <code>true</code> If there is a deleted channel.
- (BOOL)deleteWithChannel:(SBDGroupChannel * _Nonnull)channel source:(enum SBDCollectionEventSource)source;
@end


@interface SBDGroupChannelCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)channel:(SBDBaseChannel * _Nonnull)channel new:(SBDBaseMessage * _Nonnull)new_ deleted:(SBDBaseMessage * _Nullable)deleted;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMention:(SBDBaseMessage * _Nonnull)message;
- (void)channelWasChanged:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDGroupChannel * _Nonnull)sender didReceiveInvitation:(NSArray<SBDUser *> * _Nullable)invitees inviter:(SBDUser * _Nullable)inviter;
- (void)channel:(SBDGroupChannel * _Nonnull)sender didDeclineInvitation:(SBDUser * _Nonnull)invitee inviter:(SBDUser * _Nullable)inviter;
- (void)channelDidUpdateDeliveryReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateReadReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidChangeMemberCount:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasMuted:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasUnmuted:(SBDUser * _Nonnull)user;
- (void)channelWasFrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasUnfrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasHidden:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateOperators:(SBDBaseChannel * _Nonnull)sender;
- (void)channelDidUpdateTypingStatus:(SBDGroupChannel * _Nonnull)sender;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidLeave:(SBDUser * _Nonnull)user;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidJoin:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasBanned:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasUnbanned:(SBDUser * _Nonnull)user;
- (void)channelWasDeleted:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType;
@end


/// Methods that are invoked when the event of the channel collection occurs.
/// since:
/// 3.0.227
SWIFT_PROTOCOL_NAMED("GroupChannelCollectionDelegate")
@protocol SBDGroupChannelCollectionDelegate
@optional
/// A callback when the channels are added.
/// \param collection The collection object.
///
/// \param context The context that represents the reason why the delegate is invoked.
///
/// \param addedChannels The channels that are added.
///
- (void)channelCollection:(SBDGroupChannelCollection * _Nonnull)collection context:(SBDChannelContext * _Nonnull)context addedChannels:(NSArray<SBDGroupChannel *> * _Nonnull)addedChannels;
/// A callback when the channels are updated.
/// \param collection The collection object.
///
/// \param context The context that represents the reason why the delegate is invoked.
///
/// \param updatedChannels The channels that are updated.
///
- (void)channelCollection:(SBDGroupChannelCollection * _Nonnull)collection context:(SBDChannelContext * _Nonnull)context updatedChannels:(NSArray<SBDGroupChannel *> * _Nonnull)updatedChannels;
/// A callback when the channels are deleted.
/// \param collection The collection object.
///
/// \param context The context that represents the reason why the delegate is invoked.
///
/// \param deletedChannelURLs list of channel url that are deleted.
///
- (void)channelCollection:(SBDGroupChannelCollection * _Nonnull)collection context:(SBDChannelContext * _Nonnull)context deletedChannelURLs:(NSArray<NSString *> * _Nonnull)deletedChannelURLs;
@end


/// An object contains set of options to create a group channel
SWIFT_CLASS_NAMED("GroupChannelCreateParams")
@interface SBDGroupChannelCreateParams : NSObject
/// Represents the channel is to be updated.
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Determines the channel is super channel or not. Default is <code>false</code>
@property (nonatomic) BOOL isSuper;
/// Determines the channel is broadcast channel or not. Default is <code>false</code>
/// since:
/// 3.0.171
@property (nonatomic) BOOL isBroadcast;
/// Determines the channel is public channel or not. Default is <code>false</code>
@property (nonatomic) BOOL isPublic;
/// Determines the channel is distinct or not.
/// If <code>true</code>, the channel which has the same users is returned. Default is <code>false</code>
@property (nonatomic) BOOL isDistinct;
/// Determines the channel is ephemeral or not. Default is <code>false</code>
/// since:
/// 3.0.90
@property (nonatomic) BOOL isEphemeral;
/// Determines whether the public group channel is discoverable.
/// It is only for creating or updating a public group channel. If the value is <code>true</code> and <code>isPublic</code> is <code>false</code>, you will get an error from call-back of creating/updateing channel.
/// The default is <code>true</code>.
/// since:
/// 3.0.136
@property (nonatomic) BOOL isDiscoverable;
/// The boolean that can cause an error if any of the users is not valid when creating the channel.
/// If you have two valid users and <code>strict</code> is true, the channel is created successfully when you create
/// a channel with users. If one valid user, one invalid user, and <code>strict</code> are true, you will get an error
/// creating the channel. However, if you have one valid user, one invalid user, and <code>strict</code> is false,
/// you can create a channel without errors without a user.
/// since:
/// 3.0.148
@property (nonatomic) BOOL isStrict;
/// Custom type of group channel.
@property (nonatomic, copy) NSString * _Nullable customType;
/// Custom data of group channel.
@property (nonatomic, copy) NSString * _Nullable data;
/// Cover image url of group channel.
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// Cover image data of group channel.
@property (nonatomic, copy) NSData * _Nullable coverImage;
/// Name of group channel.
@property (nonatomic, copy) NSString * _Nullable name;
/// Channel’s operators’s user id.
/// since:
/// 3.0.89
@property (nonatomic, copy) NSArray<NSString *> * _Nullable operatorUserIds;
@property (nonatomic, copy) NSSet<NSString *> * _Nullable operatorUserIdSet;
/// User ids who will be invited to the channel
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIds;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull userIdSet;
/// A string that allows access to the public group channel. ONLY use for public group channel.
/// since:
/// 3.0.116
@property (nonatomic, copy) NSString * _Nullable accessCode;
/// A value that sets the message survival time in seconds. In the channel that is created or updated
/// with this option, the read messages are automatically deleted after a determined amount of time.
/// The default value is <code>-1</code> that represents the disappearing message is disabled.
/// note:
/// This feature is available in a 1-on-1 group channel.
/// since:
/// 3.0.172
@property (nonatomic) NSInteger messageSurvivalSeconds;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add user with User class to be member of the group channel.
/// \param user The user to be member of a group channel.
///
- (void)addUser:(SBDUser * _Nonnull)user;
/// Add user with user ID to be member of the group channel.
/// \param userId The user ID to be member of a group channel.
///
- (void)addUserId:(NSString * _Nonnull)userId;
/// Add users with User class array to be member of the group channel.
/// \param users The users to be member of a group channel.
///
- (void)addUsers:(NSArray<SBDUser *> * _Nonnull)users;
/// Add users with user ids to be member of the group channel.
/// \param userIds The user ids to be member of a group channel.
///
- (void)addUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Set operators with list of user instance.
/// since:
/// 3.0.89
/// \param operators The list of operators.
///
- (void)setOperators:(NSArray<SBDUser *> * _Nonnull)operators;
@property (nonatomic, readonly) BOOL hasCoverImageBinary;
@end


@interface SBDGroupChannelCreateParams (SWIFT_EXTENSION(SendbirdChat)) <NSCopying>
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>GroupChannelParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// The enum type for the hidden state of a group channel.
/// since:
/// 3.0.122
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelHiddenState, "GroupChannelHiddenState", open) {
/// Shows the channel is unhidden.
  SBDGroupChannelHiddenStateUnhidden = 0,
/// Shows the channel will be unhidden automatically when there is a new message in the channel.
  SBDGroupChannelHiddenStateHiddenAllowAutoUnhide = 1,
/// Shows the channel will not be unhidden automatically.
  SBDGroupChannelHiddenStateHiddenPreventAutoUnhide = 2,
};

/// The order type for <code>GroupChannelListQuery</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelListOrder, "GroupChannelListOrder", open) {
/// Chronological order for group channel.
  SBDGroupChannelListOrderChronological = 0,
/// Lastest last message order for group channel.
  SBDGroupChannelListOrderLatestLastMessage = 1,
/// Alphabetical name order for group channel.
  SBDGroupChannelListOrderChannelNameAlphabetical = 2,
/// Alphabetical value order of a selected key in meta data for group channel.
  SBDGroupChannelListOrderChannelMetaDataValueAlphabetical = 3,
};

enum SBDGroupChannelListQueryType : NSInteger;
enum SBDMemberStateFilter : NSInteger;
enum SBDGroupChannelSuperChannelFilter : NSInteger;
enum SBDGroupChannelPublicChannelFilter : NSInteger;
enum SBDUnreadChannelFilter : NSInteger;
@class SBDGroupChannelListQuerySearchField;

/// The <code>GroupChannelListQuery</code> class is a query class for getting the list of group channels.
/// The instance of this class is created by <code>createMyGroupChannelListQuery()</code> in <code>GroupChannel</code> class.
SWIFT_CLASS_NAMED("GroupChannelListQuery")
@interface SBDGroupChannelListQuery : NSObject
/// Determines channel list includes empty channel. Default is <code>true</code>
@property (nonatomic) BOOL includeEmptyChannel;
/// Determines channel list includes frozen channel. Default is <code>true</code>
/// since:
/// 3.0.182
@property (nonatomic) BOOL includeFrozenChannel;
/// Determines channel object of the list includes members list.
@property (nonatomic) BOOL includeMemberList;
/// Determines channel object of the list includes meta data property.
/// since:
/// 3.0.216
@property (nonatomic) BOOL includeMetaData;
/// Sets the order of the list. The order is defined in <code>GroupChannelListOrder</code>.
@property (nonatomic) enum SBDGroupChannelListOrder order;
/// Sets query type for <code>includeMemberList</code>.
@property (nonatomic) enum SBDGroupChannelListQueryType queryType;
/// Sets the member state filter.
@property (nonatomic) enum SBDMemberStateFilter memberStateFilter;
/// Sets <code>GroupChannel</code> URLs filter. <code>GroupChannel</code> list containing
/// only and exactly the passed <code>GroupChannel</code> URLs will be returned.
/// This does not cooperate with other filters.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable channelURLsFilter;
/// Sets to filter super channel. Default is <code>.all</code>
@property (nonatomic) enum SBDGroupChannelSuperChannelFilter superChannelFilter;
/// Sets to filter public channel.Default is <code>.all</code>
@property (nonatomic) enum SBDGroupChannelPublicChannelFilter publicChannelFilter;
/// Sets to filter channels by custom type that starts with.
@property (nonatomic, copy) NSString * _Nullable customTypeStartsWithFilter;
/// Sets the custom types filter. The custom types to search.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypesFilter;
/// Sets the filter with nickname. The group channels which have the member that has nickname
/// are returned by <code>loadNextPage:</code>(LIKE search).
@property (nonatomic, copy) NSString * _Nullable nicknameContainsFilter;
/// Sets the filter with user IDs. The group channels which have the members that contain user
/// IDs are returned by <code>loadNextPage:</code>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable userIdsIncludeFilter;
/// Sets the filter with user IDs. The group channels which have the members that have user
/// IDs are returned by <code>loadNextPage:</code>. The channels have the <code>userIds</code> members only.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIdsExactFilter;
/// Sets a filter to return only channels that contains the specified group channel name.
/// The channel name to search. The query will return the channels include <code>channelName</code>.
@property (nonatomic, copy) NSString * _Nullable channelNameContainsFilter;
/// Sets to filter channels by the unread messages. The default value is <code>.all</code>.
/// since:
/// 3.0.113
@property (nonatomic) enum SBDUnreadChannelFilter unreadChannelFilter;
/// Sets a key for ordering by value in the metadata. This is valid when the <code>order</code>
/// is <code>GroupChannelListOrder.channelMetaDataValueAlphabetical</code> only.
/// since:
/// 3.0.118
@property (nonatomic, copy) NSString * _Nullable metaDataOrderKeyFilter;
/// Searches for group channels with metadata containing an item with the specified value as its key
/// since:
/// 3.0.232
@property (nonatomic, copy) NSString * _Nullable metaDataKeyFilter;
/// Searches for group channels with metadata containing an item with the key specified by the metaDataKey
/// since:
/// 3.0.232
@property (nonatomic, copy) NSArray<NSString *> * _Nullable metaDataValuesFilter;
/// Searches for group channels with metadata containing an item with the key specified by the metaDataKey
/// and the values of that item start with the specified value
/// since:
/// 3.0.232
@property (nonatomic, copy) NSString * _Nullable metaDataValueStartsWithFilter;
/// Sets to filter channels by the hidden state. The default value is <code>ChannelHiddenStateFilter.unhiddenOnly</code>.
/// since:
/// 3.0.122
@property (nonatomic) enum SBDChannelHiddenStateFilter channelHiddenStateFilter;
/// The query property of the query specified by <code>setSearchFilterQuery:fields:</code>
/// since:
/// 3.0.144
@property (nonatomic, readonly, copy) NSString * _Nullable searchQuery;
/// The fields properties of the query specified by <code>setSearchFilterQuery:fields:</code>
/// since:
/// 3.0.144
@property (nonatomic, readonly, strong) SBDGroupChannelListQuerySearchField * _Nonnull searchFields;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use GroupChannel's `createMyGroupChannelListQuery`");
/// Sets the filter with user IDs.
/// The group channels which have the members that contain user IDs are returned by <code>loadNext:</code>.
/// \param userIds User IDs to search.
///
/// \param queryType Logical condition applied to filter. If you pass <code>GroupChannelListQueryTypeAnd</code>
/// to <code>queryType</code> and A, B to <code>userIds</code>, the channels whose members containing A and B will be returned.
/// If <code>GroupChannelListQueryTypeOr</code> is set, the members of the queried channels will be A or B.
///
- (void)setUserIdsIncludeFilter:(NSArray<NSString *> * _Nonnull)userIds queryType:(enum SBDGroupChannelListQueryType)queryType;
/// Sets the search query and search fields of the query specified a given query and a given fields.
/// note:
/// fields MUST be an array with <code>GroupChannelListQuerySearchField</code>.
/// since:
/// 3.0.144
/// \param query The query to request for <code>searchFields</code>.
///
/// \param fields The fields to request query for <code>searchQuery</code> that MUST be <code>GroupChannelListQuerySearchField</code>.
///
- (void)setSearchFilter:(NSString * _Nonnull)query fields:(SBDGroupChannelListQuerySearchField * _Nonnull)fields;
/// Sets meta data filter
/// note:
/// Using this method will reset <code>metaDataValueStartsWithFilter</code> property
/// \param key meta data key
///
/// \param values meta data values
///
- (void)setMetaDataFilterWithKey:(NSString * _Nonnull)key values:(NSArray<NSString *> * _Nonnull)values;
/// Sets meta data filter
/// note:
/// Using this method will reset <code>metaDataValuesFilter</code> property
/// \param key meta data key
///
/// \param value meta data values that starts with
///
- (void)setMetaDataFilterWithKey:(NSString * _Nonnull)key valueStartsWith:(NSString * _Nonnull)value;
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, SBError * _Nullable))completionHandler;
@end


@interface SBDGroupChannelListQuery (SWIFT_EXTENSION(SendbirdChat))
/// Validates the given channel object is belonged to this query object
/// \param channel a group channel
///
///
/// returns:
/// <code>true</code> if its belonged, otherwise <code>false</code>
- (BOOL)belongsToChannel:(SBDGroupChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannelListQuery (SWIFT_EXTENSION(SendbirdChat))
/// Gets comparator
///
/// returns:
/// <code>SBObjectComparator</code> object
- (NSComparisonResult (^ _Nonnull)(id _Nullable, id _Nullable))comparator SWIFT_WARN_UNUSED_RESULT;
/// Compares two channels
/// \param objc1 First channel
///
/// \param objc2 Second channel
///
///
/// returns:
/// <code>ComparisonResult</code> value
- (NSComparisonResult)orderBetweenObjectWithObj1:(id _Nullable)obj1 obj2:(id _Nullable)obj2 SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannelListQuery (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>GroupChannelListQuery</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDGroupChannelListQuery (SWIFT_EXTENSION(SendbirdChat))
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>GroupChannelListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDGroupChannelListQuery * _Nonnull)setupFor:(SBDGroupChannelListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// Filter types to query with <code>GroupChannelListQuery</code>. You can combine search fields to query.
/// used for <code>setSearchFilter(_:fields:)</code> of <code>GroupChannelListQuery</code>
/// since:
/// 3.0.144
SWIFT_CLASS_NAMED("GroupChannelListQuerySearchField")
@interface SBDGroupChannelListQuerySearchField : NSObject
@property (nonatomic) NSUInteger rawValue;
- (nonnull instancetype)initWithRawValue:(NSUInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
/// filter type to query for member nickname
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDGroupChannelListQuerySearchField * _Nonnull memberNickname;)
+ (SBDGroupChannelListQuerySearchField * _Nonnull)memberNickname SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDGroupChannelListQuerySearchField * _Nonnull channelName;)
+ (SBDGroupChannelListQuerySearchField * _Nonnull)channelName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFields:(NSArray<SBDGroupChannelListQuerySearchField *> * _Nonnull)fields;
@property (nonatomic, readonly) NSUInteger hash;
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(SBDGroupChannelListQuerySearchField * _Nonnull)other;
- (void)formIntersection:(SBDGroupChannelListQuerySearchField * _Nonnull)other;
- (void)formSymmetricDifference:(SBDGroupChannelListQuerySearchField * _Nonnull)other;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelListQueryType, "GroupChannelListQueryType", open) {
  SBDGroupChannelListQueryTypeAnd = 0,
  SBDGroupChannelListQueryTypeOr = 1,
};

enum SBDGroupChannelOperatorFilter : NSInteger;
enum SBDGroupChannelMutedMemberFilter : NSInteger;
enum SBDMemberListOrder : NSInteger;

/// The <code>GroupChannelMemberListQuery</code> class is a query class for getting the list member in group channels.
/// The instance of this class is created by <code>createMemberListQuery()</code> in <code>GroupChannel</code> class.
SWIFT_CLASS_NAMED("GroupChannelMemberListQuery")
@interface SBDGroupChannelMemberListQuery : NSObject
/// Filters members of nickname that starts with.
/// since:
/// 3.0.102
@property (nonatomic, copy) NSString * _Nullable nicknameStartsWithFilter;
/// Sets a filter to query operators.
/// since:
/// 3.0.89
@property (nonatomic) enum SBDGroupChannelOperatorFilter operatorFilter;
/// Sets a filter to query muted member list.
/// since:
/// 3.0.89
@property (nonatomic) enum SBDGroupChannelMutedMemberFilter mutedMemberFilter;
/// Sets a filter to query member list with member state.
@property (nonatomic) enum SBDMemberStateFilter memberStateFilter;
/// Sets how the query result should be ordered.
/// If the <code>order</code> is <code>.nicknameAlphabetical</code>, the result will be ordered by the nickname in
/// alphabetical order. If the <code>order</code> is <code>.operatorThenMemberNicknameAlphabetical</code>,
/// then the result will contain the operators first, and then the members. The two groups (operators
/// and members) will be ordered by the nickname in alphabetical order. The default value is <code>.nicknameAlphabetical</code>.
/// since:
/// 3.0.198
@property (nonatomic) enum SBDMemberListOrder order;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use GroupChannel's `createMemberListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDMember *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>GroupChannelMemberListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDGroupChannelMemberListQuery * _Nonnull)setupFor:(SBDGroupChannelMemberListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

/// Filter operators in group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelMutedMemberFilter, "GroupChannelMutedMemberFilter", open) {
/// Without filter.
  SBDGroupChannelMutedMemberFilterAll = 0,
/// Filter muted members.
  SBDGroupChannelMutedMemberFilterMuted = 1,
/// Filter members not muted.
  SBDGroupChannelMutedMemberFilterUnmuted = 2,
};

/// Filter operators in group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelOperatorFilter, "GroupChannelOperatorFilter", open) {
/// Without filter.
  SBDGroupChannelOperatorFilterAll = 0,
/// Filter operators.
  SBDGroupChannelOperatorFilterOperator = 1,
/// Filter members except operators.
  SBDGroupChannelOperatorFilterNonOperator = 2,
};

/// Filter public group channel or private one in group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelPublicChannelFilter, "GroupChannelPublicChannelFilter", open) {
/// Without filter
  SBDGroupChannelPublicChannelFilterAll = 0,
/// Filter public group channel.
  SBDGroupChannelPublicChannelFilterPublic = 1,
/// Filter private group channel.
  SBDGroupChannelPublicChannelFilterPrivate = 2,
};

/// The options to choose which push notification for the current user to receive in a group channel.
/// since:
/// 3.0.128
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelPushTriggerOption, "GroupChannelPushTriggerOption", open) {
/// Follow the push trigger of current user. See <code>PushTriggerOption</code>.
  SBDGroupChannelPushTriggerOptionDefault = 0,
/// Receive all of remote push notification.
  SBDGroupChannelPushTriggerOptionAll = 1,
/// Do NOT receive any remote push notification.
  SBDGroupChannelPushTriggerOptionOff = 2,
/// Receive only mentioned messages’s notification.
  SBDGroupChannelPushTriggerOptionMentionOnly = 3,
};

/// Channel filter for super mode in group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDGroupChannelSuperChannelFilter, "GroupChannelSuperChannelFilter", open) {
/// Without filter
  SBDGroupChannelSuperChannelFilterAll = 0,
/// Filter super group channel.
  SBDGroupChannelSuperChannelFilterSuper = 1,
/// Filter non-super group channel.
  SBDGroupChannelSuperChannelFilterNonSuper = 2,
  SBDGroupChannelSuperChannelFilterBroadcastOnly = 3,
};


/// An object contains set of options to retrieve total unread channel count
SWIFT_CLASS_NAMED("GroupChannelTotalUnreadChannelCountParams")
@interface SBDGroupChannelTotalUnreadChannelCountParams : NSObject
/// Array filter of channel custom types.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypesFilter;
/// The enumerator filter of super channel.
@property (nonatomic) enum SBDGroupChannelSuperChannelFilter superChannelFilter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object contains a set of options to get total unread message count from a group channel
SWIFT_CLASS_NAMED("GroupChannelTotalUnreadMessageCountParams")
@interface SBDGroupChannelTotalUnreadMessageCountParams : NSObject
/// The array filter of channel custom types.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable channelCustomTypesFilter;
/// The enumerator filter of super channel.
@property (nonatomic) enum SBDGroupChannelSuperChannelFilter superChannelFilter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object contains a set of options to update a group channel
SWIFT_CLASS_NAMED("GroupChannelUpdateParams")
@interface SBDGroupChannelUpdateParams : NSObject
/// Channel name
@property (nonatomic, copy) NSString * _Nullable name;
/// Channel cover image url
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// Channel cover image data
@property (nonatomic, copy) NSData * _Nullable coverImage;
/// Channel data
@property (nonatomic, copy) NSString * _Nullable data;
/// Channel custom type
@property (nonatomic, copy) NSString * _Nullable customType;
/// Determines whether the channel is public or not
@property (nonatomic) BOOL isPublic;
/// set true if channel need to be updated as distinct
@property (nonatomic) BOOL isDistinct;
/// set true if this channel is discoverable
@property (nonatomic) BOOL isDiscoverable;
/// A string that allows access to the public group channel. ONLY use for public group channel.
@property (nonatomic, copy) NSString * _Nullable accessCode;
/// channel’s operator user ids
@property (nonatomic, copy) NSArray<NSString *> * _Nullable operatorUserIds;
@property (nonatomic, copy) NSSet<NSString *> * _Nullable operatorUserIdSet;
/// A value that sets the message survival time in seconds.
@property (nonatomic) NSInteger messageSurvivalSeconds;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Set operators with list of user instance.
/// \param operators The list of operators.
///
- (void)setOperators:(NSArray<SBDUser *> * _Nonnull)operators;
@end


SWIFT_CLASS("_TtC12SendbirdChat10HTTPClient")
@interface HTTPClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLSession;
@class NSURLSessionDataTask;
@class NSURLSessionTask;

@interface HTTPClient (SWIFT_EXTENSION(SendbirdChat)) <NSURLSessionDataDelegate>
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
@end


/// Represents the parameters to check the gap.
/// <ul>
///   <li>
///     Since 3.1.0
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("HugeGapParams")
@interface SBDHugeGapParams : NSObject
/// Channel URL.
@property (nonatomic, readonly, copy) NSString * _Nonnull channelURL;
/// Message list params object.
@property (nonatomic, readonly, strong) SBDMessageListParams * _Nonnull params;
/// The start timestamp for the previous direction.
@property (nonatomic, readonly) int64_t prevStartTs;
/// The end timestamp for the previous direction.
@property (nonatomic, readonly) int64_t prevEndTs;
/// The count of the previous messages.
@property (nonatomic, readonly) NSInteger prevCount;
/// The start timestamp for the next direction.
@property (nonatomic, readonly) int64_t nextStartTs;
/// The end timestamp for the next direction.
@property (nonatomic, readonly) int64_t nextEndTs;
/// The count of the next messages.
@property (nonatomic, readonly) NSInteger nextCount;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL params:(SBDMessageListParams * _Nonnull)params prevStartTs:(int64_t)prevStartTs prevEndTs:(int64_t)prevEndTs prevCount:(NSInteger)prevCount nextStartTs:(int64_t)nextStartTs nextEndTs:(int64_t)nextEndTs nextCount:(NSInteger)nextCount OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDLogLevel;

/// An object to initialize SendbirdChat
/// since:
/// 4.0.0
SWIFT_CLASS_NAMED("InitParams")
@interface SBDInitParams : NSObject
/// Application id
@property (nonatomic, copy) NSString * _Nonnull applicationId;
/// Determines to use local caching
@property (nonatomic) BOOL isLocalCachingEnabled;
/// Loglevel
@property (nonatomic, strong) SBDLogLevel * _Nonnull logLevel;
/// Host app version
@property (nonatomic, copy) NSString * _Nullable appVersion;
/// Parameter constructor
/// \param applicationId Sendbird Application ID
///
/// \param isLocalCachingEnabled <code>true</code> if using local caching
///
/// \param logLevel log level
///
/// \param appVersion host app version
///
- (nonnull instancetype)initWithApplicationId:(NSString * _Nonnull)applicationId isLocalCachingEnabled:(BOOL)isLocalCachingEnabled logLevel:(SBDLogLevel * _Nonnull)logLevel appVersion:(NSString * _Nullable)appVersion OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Log level
SWIFT_CLASS_NAMED("LogLevel")
@interface SBDLogLevel : NSObject
@property (nonatomic) NSUInteger rawValue;
- (nonnull instancetype)initWithRawValue:(NSUInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDLogLevel * _Nonnull none;)
+ (SBDLogLevel * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDLogLevel * _Nonnull error;)
+ (SBDLogLevel * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDLogLevel * _Nonnull warning;)
+ (SBDLogLevel * _Nonnull)warning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDLogLevel * _Nonnull info;)
+ (SBDLogLevel * _Nonnull)info SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Parameter constructor
/// \param levels set of <code>LogLevel</code>
///
- (nonnull instancetype)initWithLevels:(NSArray<SBDLogLevel *> * _Nonnull)levels;
/// Union current value with given other <code>LogLevel</code>
/// \param other <code>LogLevel</code> object
///
- (void)formUnion:(SBDLogLevel * _Nonnull)other;
/// Intersect current value with given other <code>LogLevel</code>
/// \param other <code>LogLevel</code> object
///
- (void)formIntersection:(SBDLogLevel * _Nonnull)other;
/// Symmetric difference on current value with given other <code>LogLevel</code>
/// \param other <code>LogLevel</code> object
///
- (void)formSymmetricDifference:(SBDLogLevel * _Nonnull)other;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum SBDUserConnectionStatus : NSInteger;

/// The <code>User</code> class represents a user. The user is identified by the <code>userId</code>, so the <code>userId</code> has
/// to be unique. The <code>userId</code>, <code>nickname</code> and <code>profileURL</code> are valid in every <code>User</code>
/// instance, however the <code>connectionStatus</code> and <code>lastSeenAt</code> is valid in <code>User</code> instance
/// from <code>UserListQuery</code>.
SWIFT_CLASS_NAMED("User")
@interface SBDUser : NSObject
/// User ID. This has to be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// User nickname.
@property (nonatomic, copy) NSString * _Nullable nickname;
/// Profile image url.
@property (nonatomic, readonly, copy) NSString * _Nullable profileURL;
/// Original profile image url.
@property (nonatomic, readonly, copy) NSString * _Nullable originalProfileURL;
/// The profile image URL without the <code>ekey</code>.
/// since:
/// 3.0.194
@property (nonatomic, copy) NSString * _Nullable plainProfileImageURL;
/// User connection status. This is defined in <code>UserConnectionStatus</code>.
@property (nonatomic) enum SBDUserConnectionStatus connectionStatus;
/// The lastest time when the user became offline.
@property (nonatomic) int64_t lastSeenAt;
/// Represents the user is activated. This property is changed by the <a href="https://docs.sendbird.com/platform#user_3_update_a_user">Platform API</a>
@property (nonatomic, readonly) BOOL isActive;
/// Discovery key for friend
@property (nonatomic, readonly, copy) NSString * _Nullable friendDiscoveryKey;
/// User name for friend
@property (nonatomic, readonly, copy) NSString * _Nullable friendName;
/// User’s preferred language. Used for translating messages.
/// since:
/// 3.0.159
@property (nonatomic, copy) NSArray<NSString *> * _Nullable preferredLanguages;
/// Meta data.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metaData;
@property (nonatomic) BOOL requireAuth;
@property (nonatomic, copy) NSString * _Nullable eKey;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth OBJC_DESIGNATED_INITIALIZER;
- (void)updateWith:(SBDUser * _Nonnull)user;
- (void)updateUserInfoWith:(NSDictionary<NSString *, id> * _Nullable)dictionary;
@property (nonatomic, readonly) BOOL isCurrentUser;
- (SBDSender * _Nullable)asSenderWithChannel:(SBDBaseChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDRestrictionInfo;

/// Represents a member in <code>GroupChannel</code>
SWIFT_CLASS_NAMED("Member")
@interface SBDMember : SBDUser
/// The state for invitation. The values of the property are <code>invited</code> and <code>joined</code>.
/// The <code>invited</code> means that the user doesn’t accept the invitation yet and the <code>joined</code>
/// means that the user accepted the invitation manually or automatically.
@property (nonatomic) enum SBDMemberState state;
/// Whether this member has been blocked by me
@property (nonatomic) BOOL isBlockedByMe;
/// Whether this member has blocked me
@property (nonatomic) BOOL isBlockingMe;
/// The muted state of the member in the channel.
/// since:
/// 3.0.198
@property (nonatomic) BOOL isMuted;
/// The role of current user in the channel.
/// since:
/// 3.0.174
@property (nonatomic) enum SBDRole role;
/// Restriction information of a muted member.
/// This property is nil for an unmuted member.
/// <ul>
///   <li>
///     Since 3.0.236
///   </li>
/// </ul>
@property (nonatomic, strong) SBDRestrictionInfo * _Nullable restrictionInfo;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth SWIFT_UNAVAILABLE;
@end


@interface SBDMember (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>Member</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDMember (SWIFT_EXTENSION(SendbirdChat))
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>Member</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end

/// The order type for member list query.
/// since:
/// 3.0.198
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMemberListOrder, "MemberListOrder", open) {
  SBDMemberListOrderNicknameAlphabetical = 0,
  SBDMemberListOrderOperatorThenMemberNicknameAlphabetical = 1,
};

/// Member state in group channel.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMemberState, "MemberState", open) {
/// Filter of joined members in a group channel.
  SBDMemberStateJoined = 0,
/// Filter of invited members in a group channel.
  SBDMemberStateInvited = 1,
/// Filter of members neither joined or invited in a group channel.
  SBDMemberStateNone = 2,
};

/// Member state filter for group channel list query and group channel count
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMemberStateFilter, "MemberStateFilter", open) {
/// Filter of all member states.
  SBDMemberStateFilterAll = 0,
/// Filter of joined state only.
  SBDMemberStateFilterJoinedOnly = 1,
/// Filter of invited state only. This contains <code>.invitedByFriend</code>and <code>invitedByNonFriend</code>.
  SBDMemberStateFilterInvitedOnly = 2,
/// Filter of invited by friend state only.
  SBDMemberStateFilterInvitedByFriend = 3,
/// Filter of invited by non-friend state only.
  SBDMemberStateFilterInvitedByNonFriend = 4,
};

/// The enum type to represent target type of mention.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMentionType, "MentionType", open) {
  SBDMentionTypeUsers = 0,
  SBDMentionTypeChannel = 1,
};

enum SBDReplyType : NSInteger;

/// An object contains set of options for message change logs.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("MessageChangeLogsParams")
@interface SBDMessageChangeLogsParams : NSObject <NSCopying>
/// Determines whether to include the metaarray information of the updated messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeMetaArray;
/// Determines whether to include the reactions of the updated messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the updated messages in the results when the results contain parent messages.
/// note:
/// The default value is <code>false</code>.
@property (nonatomic) BOOL includeThreadInfo;
/// Determines whether to include poll information of the message in the results. Default is <code>false</code>
@property (nonatomic) BOOL includePollDetails;
/// Determines wheter to include information on parent message. Default is <code>false</code>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Determines which reply types to include in the results. Default is <code>.none</code>
@property (nonatomic) enum SBDReplyType replyType;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Default parameter constructor
- (nonnull instancetype)initWithIncludeMetaArray:(BOOL)includeMetaArray includeReactions:(BOOL)includeReactions includeThreadInfo:(BOOL)includeThreadInfo includePollDetails:(BOOL)includePollDetails includeParentMessageInfo:(BOOL)includeParentMessageInfo replyType:(enum SBDReplyType)replyType OBJC_DESIGNATED_INITIALIZER;
/// Creates <code>PreviousMessageListQuery</code> from a given <code>PreviousMessageListQuery</code> instance.
/// since:
/// 3.0.185
/// \param query previous message list query
///
///
/// returns:
/// A created instance of <code>MessageChangeLogsParams</code>
+ (SBDMessageChangeLogsParams * _Nonnull)createWithPreviousMessageListQuery:(SBDPreviousMessageListQuery * _Nullable)query SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>MessageChangeLogParams</code> from a given <code>MessageListParams</code> instance.
/// since:
/// 3.0.185
/// \param params previous message list query
///
///
/// returns:
/// A created instance of <code>MessageChangeLogsParams</code>
+ (SBDMessageChangeLogsParams * _Nonnull)createWithMessageListParams:(SBDMessageListParams * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageChangeLogsParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@protocol SBDMessageCollectionDelegate;
enum SBDMessageCollectionInitPolicy : NSInteger;

/// An object that accesses the cache for the messages.
/// since:
/// 3.1.0
SWIFT_CLASS_NAMED("MessageCollection")
@interface SBDMessageCollection : SBDBaseCollection
@property (nonatomic, weak) id <SBDMessageCollectionDelegate> _Nullable delegate;
/// Message collection delegate.
@property (nonatomic) int64_t startingPoint;
/// If <code>true</code>, there may be the messages on the next page.
@property (nonatomic) BOOL hasNext;
/// If <code>true</code>, there may be the messages on the previous page.
@property (nonatomic) BOOL hasPrevious;
/// If <code>true</code>, the message collection hasn’t been invalidated by the <code>dispose</code> method.
@property (nonatomic) BOOL isLive;
/// Message list params object for the message collection.
@property (nonatomic, strong) SBDMessageListParams * _Nonnull params;
/// The timestamp of the oldest synced message in the message collection.
@property (nonatomic) int64_t oldestSyncedTs;
/// The timestamp of the latest synced message in the message collection.
@property (nonatomic) int64_t latestSyncedTs;
/// Returns the succeeded messages that are already loaded in memory.
@property (nonatomic, readonly, copy) NSArray<SBDBaseMessage *> * _Nonnull succeededMessages;
/// The channel object that the message collection has.
/// since:
/// 3.0.227
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nonnull channel;
/// The token that the method of the message changelogs Returns.
@property (nonatomic, copy) NSString * _Nullable lastSyncedToken;
/// <code>true</code> if starting message collection is completed.
@property (nonatomic) BOOL initCompleted;
- (BOOL)initCompleted SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Returns the pending messages that are already loaded in memory.
@property (nonatomic, readonly, copy) NSArray<SBDBaseMessage *> * _Nonnull pendingMessages;
/// Returns the failed messages that are already loaded in memory.
@property (nonatomic, readonly, copy) NSArray<SBDBaseMessage *> * _Nonnull failedMessages;
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull queue;
@property (nonatomic, readonly, copy) NSString * _Nonnull delegateKey;
/// Starts the message collection with the policy. The result of the
/// \param initPolicy The policy for the message collection.
///
/// \param cacheResultHandler The callback to call when the messages are loaded from the cache.
/// The <code>messages</code> is the messages that are loaded from the cache. The <code>error</code> will be returned when the loading message failed.
///
/// \param apiResultHandler The callback to call when the messages are loaded from the server.
/// The <code>messages</code> is the messages that are loaded from the server. The <code>error</code> will be returned when the loading message failed.
///
- (void)startCollectionWithInitPolicy:(enum SBDMessageCollectionInitPolicy)initPolicy cacheResultHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))cacheResultHandler apiResultHandler:(void (^ _Nullable)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))apiResultHandler;
/// Invalidates the object.
- (void)dispose;
/// Loads messages of the next page.
/// \param completionHandler The callback to call when the load is complete. The <code>error</code> will be
/// returned when the loading message failed.
///
- (void)loadNextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Loads messages of the previous page.
/// \param completionHandler The callback to call when the load is complete. 
/// The <code>error</code> will be returned when the loading message failed.
///
- (void)loadPreviousWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Removes failed messages from DB.
/// <ul>
///   <li>
///     Parameters messages The failed messages to be removed from DB.
///   </li>
/// </ul>
/// \param completionHandler The callback to call when the method is complete. 
/// The <code>error</code> will be returned when the removing failed messages failed.
///
- (void)removeFailedWithMessages:(NSArray<SBDBaseMessage *> * _Nonnull)messages completionHandler:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Removes all failed messages.
/// \param completionHandler The callback to call when the method is complete. 
/// The <code>error</code> will be returned when the removing failed messages failed.
///
- (void)removeAllFailedWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)didSucceedReconnection;
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChangeNotification;)
+ (NSNotificationName _Nonnull)ChangeNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)notifyDataSetChanged;
- (void)notifyEventForUpdateWithSource:(enum SBDCollectionEventSource)source messages:(NSArray<SBDBaseMessage *> * _Nonnull)messages;
- (void)notifyEventForAddWithSource:(enum SBDCollectionEventSource)source messages:(NSArray<SBDBaseMessage *> * _Nonnull)messages;
- (void)notifyEventForDeleteWithSource:(enum SBDCollectionEventSource)source messages:(NSArray<SBDBaseMessage *> * _Nonnull)messages;
- (void)notifyEventForChannelChangedWithSource:(enum SBDCollectionEventSource)source channel:(SBDGroupChannel * _Nonnull)channel;
- (void)notifyEventForChannelChangedWithSource:(enum SBDCollectionEventSource)source channelURL:(NSString * _Nonnull)channelURL;
- (void)notifyEventForHugeGap;
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
- (NSError * _Nullable)fetchMessagesFromCached SWIFT_WARN_UNUSED_RESULT;
- (void)requestChangeLogs;
- (void)checkHugeGapAndFill;
- (BOOL)isCurrentChannelWithChannel:(SBDBaseChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
- (BOOL)upsertSucceeded:(SBDBaseMessage * _Nonnull)message;
- (BOOL)upsertPending:(SBDBaseMessage * _Nonnull)message;
- (BOOL)upsertFailed:(SBDBaseMessage * _Nonnull)message;
@end


@interface SBDMessageCollection (SWIFT_EXTENSION(SendbirdChat))
- (void)channel:(SBDBaseChannel * _Nonnull)channel new:(SBDBaseMessage * _Nullable)new_ deleted:(SBDBaseMessage * _Nullable)deleted;
- (void)channel:(SBDBaseChannel * _Nonnull)channel failed:(SBDBaseMessage * _Nonnull)failed source:(enum SBDCollectionEventSource)source;
- (void)channel:(SBDBaseChannel * _Nonnull)channel canceled:(SBDBaseMessage * _Nonnull)canceled;
- (void)channel:(SBDBaseChannel * _Nonnull)channel pending:(SBDBaseMessage * _Nonnull)pending;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didUpdateMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender messageWasDeleted:(int64_t)messageId;
- (void)channel:(SBDBaseChannel * _Nonnull)sender updatedReaction:(SBDReactionEvent * _Nonnull)reactionEvent;
- (void)channel:(SBDBaseChannel * _Nonnull)channel didUpdateThreadInfo:(SBDThreadInfoUpdateEvent * _Nonnull)threadInfoUpdateEvent;
- (void)channelWasChanged:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDGroupChannel * _Nonnull)sender didReceiveInvitation:(NSArray<SBDUser *> * _Nullable)invitees inviter:(SBDUser * _Nullable)inviter;
- (void)channelDidUpdateDeliveryReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateReadReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidChangeMemberCount:(NSArray<SBDGroupChannel *> * _Nonnull)channels;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasMuted:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasUnmuted:(SBDUser * _Nonnull)user;
- (void)channelWasFrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasUnfrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasHidden:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateOperators:(SBDBaseChannel * _Nonnull)sender;
- (void)channelDidUpdateTypingStatus:(SBDGroupChannel * _Nonnull)sender;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidLeave:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasBanned:(SBDUser * _Nonnull)user;
- (void)channel:(SBDGroupChannel * _Nonnull)sender didDeclineInvitation:(SBDUser * _Nonnull)invitee inviter:(SBDUser * _Nullable)inviter;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidJoin:(SBDUser * _Nonnull)user;
- (void)channelWasDeleted:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMention:(SBDBaseMessage * _Nonnull)message;
@end

@class SBDMessageContext;

/// Methods that are invoked when the event of the message collection occurs.
/// since:
/// 3.1.0
SWIFT_PROTOCOL_NAMED("MessageCollectionDelegate")
@protocol SBDMessageCollectionDelegate
@optional
/// Invoked when the messages are added.
/// \param collection Message collection object.
///
/// \param context The reason why the messages are added.
///
/// \param channel The channel that has the messages.
///
/// \param addedMessages Messages to be added.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context channel:(SBDGroupChannel * _Nonnull)channel addedMessages:(NSArray<SBDBaseMessage *> * _Nonnull)addedMessages;
/// Invoked when the message are updated.
/// \param collection Message collection object.
///
/// \param context The reason why the messages are updated.
///
/// \param channel The channel that has the messages.
///
/// \param updatedMessages Messages to be updated.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context channel:(SBDGroupChannel * _Nonnull)channel updatedMessages:(NSArray<SBDBaseMessage *> * _Nonnull)updatedMessages;
/// Invoked when the message are deleted.
/// \param collection Message collection object.
///
/// \param context The reason why the messages are deleted.
///
/// \param channel The channel that has the messages.
///
/// \param deletedMessages Messages to be deleted.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context channel:(SBDGroupChannel * _Nonnull)channel deletedMessages:(NSArray<SBDBaseMessage *> * _Nonnull)deletedMessages;
/// Invoked when the channel that has the message collection is changed.
/// \param collection Message collection object.
///
/// \param context The reason why the channel are changed.
///
/// \param updatedChannel The channel that has the message collection has.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context updatedChannel:(SBDGroupChannel * _Nonnull)updatedChannel;
/// Invoked when the channel that has the message collection is deleted.
/// \param collection Message collection object.
///
/// \param context The reason why the channel are deleted.
///
/// \param channelURL Channel URL that has been deleted.
///
- (void)messageCollection:(SBDMessageCollection * _Nonnull)collection context:(SBDMessageContext * _Nonnull)context deletedChannel:(NSString * _Nonnull)channelURL;
/// Invoked when the huge gap has been detected.
/// \param collection Message collection object.
///
- (void)didDetectHugeGap:(SBDMessageCollection * _Nonnull)collection;
@end

/// The policy for the message collection initialization.
/// since:
/// 3.0.227
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMessageCollectionInitPolicy, "MessageCollectionInitPolicy", open) {
/// Caches will be replaced by api result
  SBDMessageCollectionInitPolicyCacheAndReplaceByApi = 0,
};


/// Represents what happened to the messages.
/// since:
/// 3.1.0
SWIFT_CLASS_NAMED("MessageContext")
@interface SBDMessageContext : NSObject
/// Event source
@property (nonatomic, readonly) enum SBDCollectionEventSource source;
/// Message sending status
@property (nonatomic, readonly) enum SBDMessageSendingStatus sendingStatus;
/// Initializes with the message source.
/// <ul>
///   <li>
///     Returns CollectionEventSource object.
///   </li>
/// </ul>
/// \param source Message source.
///
/// \param sendingStatus Message sending status.
///
- (nonnull instancetype)initWithSource:(enum SBDCollectionEventSource)source sendingStatus:(enum SBDMessageSendingStatus)sendingStatus OBJC_DESIGNATED_INITIALIZER;
/// Checks whether the context is from an event or not.
///
/// returns:
/// <code>true</code> if the context is from an event.
@property (nonatomic, readonly) BOOL fromEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SBDMessageTypeFilter : NSInteger;

/// An object contains set of options for get message methods
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("MessageListParams")
@interface SBDMessageListParams : NSObject <NSCopying>
/// The number of messages to retrieve that were sent before the specified timestamp or message ID. Default is 20
@property (nonatomic) NSInteger previousResultSize;
/// The number of messages to retrieve that were sent after the specified timestamp or message ID. Default is 0
@property (nonatomic) NSInteger nextResultSize;
/// Determines whether to include the messages with the matching timestamp or message ID in the results. Default is <code>false</code>
@property (nonatomic) BOOL isInclusive;
/// Determines whether to sort the retrieved messages in reverse order. If <code>false</code>, the results are in ascending order.  Default is <code>false</code>
@property (nonatomic) BOOL reverse;
/// Restricts the search scope only to retrieve the messages with the specified message type. Default is <code>.all</code>
@property (nonatomic) enum SBDMessageTypeFilter messageType;
/// Restricts the search scope only to retrieve the messages with the specified custom message type.
/// When the custom type filtering is not needed, the value should be set to <code>nil</code>.
/// If the <code>customTypes</code> is set, this property is ignored.
@property (nonatomic, copy) NSString * _Nullable customType;
/// Restricts the search scope only to retrieve the messages sent by the users with the specified user IDs.
/// When the user ID filtering is not needed, the value should be set to <code>nil</code>.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable senderUserIds;
/// Determines whether to include the metaarray information of the messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeMetaArray;
/// Determines whether to include the reactions to the messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the messages in the results when the results contain root messages.
/// note:
/// The default value is <code>false</code>.
@property (nonatomic) BOOL includeThreadInfo;
/// Determines whether to include poll information in the message. Default is <code>false</code>
@property (nonatomic) BOOL includePollDetails;
/// Determines whether to include parent message info. Default is <code>false</code>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Determines which reply types to include. Default is <code>.none</code>
@property (nonatomic) enum SBDReplyType replyType;
/// Determines whether to include only messages from the subChannel to which you belong in the results. Default is <code>false</code>
/// warning:
/// This value is only used in open channels.
/// since:
/// 3.0.204
@property (nonatomic) BOOL showSubChannelMessagesOnly;
/// Restricts the search scope only to retrieve the messages with the multiple specified custom message
/// types. When the custom type filtering is not needed, the value should be set to <code>nil</code>.
/// since:
/// 3.0.213
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypes;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Parameter constructor
- (nonnull instancetype)initWithPreviousResultSize:(NSInteger)previousResultSize nextResultSize:(NSInteger)nextResultSize isInclusive:(BOOL)isInclusive reverse:(BOOL)reverse messageType:(enum SBDMessageTypeFilter)messageType customType:(NSString * _Nullable)customType senderUserIds:(NSArray<NSString *> * _Nullable)senderUserIds includeMetaArray:(BOOL)includeMetaArray includeReactions:(BOOL)includeReactions includeThreadInfo:(BOOL)includeThreadInfo includePollDetails:(BOOL)includePollDetails includeParentMessageInfo:(BOOL)includeParentMessageInfo replyType:(enum SBDReplyType)replyType showSubChannelMessagesOnly:(BOOL)showSubChannelMessagesOnly customTypes:(NSArray<NSString *> * _Nullable)customTypes OBJC_DESIGNATED_INITIALIZER;
/// Checks whether given message is belonged to this params
/// \param message <code>BaseMessage</code> instance
///
///
/// returns:
/// <code>true</code> if it is belonged, otherwise <code>false</code>
- (BOOL)belongsTo:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Checks whether the given params is belonged to this object
/// \param params <code>BaseMessageCreateParams</code> (either user or file) instance
///
///
/// returns:
/// <code>true</code> if the given params is belonged to this object, otherwise <code>false</code>
- (BOOL)belongsToMessageParams:(SBDBaseMessageCreateParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageListParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// The <code>MessageMetaArray</code> instance has a string type of key and an array type of value.
/// The value consists of a string.
/// It usually can be used for ‘vote’ or ‘reaction’ for the message.
SWIFT_CLASS_NAMED("MessageMetaArray")
@interface SBDMessageMetaArray : NSObject <NSCopying>
/// A string type of key.
/// since:
/// 3.0.148
@property (nonatomic, copy) NSString * _Nonnull key;
/// The value consists of a string.
/// The value guarantees de-duplicated string.
/// since:
/// 3.0.148
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull value;
/// Initializes an message meta array with the given key and an empty array of the value.
/// since:
/// 3.0.148
/// \param key A string type of key.
///
///
/// returns:
/// Message meta array instance.
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key;
/// Initializes an message meta array with the given key and the given value.
/// since:
/// 3.0.148
/// \param key A string type of key.
///
/// \param value The value consists of a string.
///
///
/// returns:
/// Message meta array instance.
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSArray<NSString *> * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
/// Adds an set type of the value to the receiver’s value field.
/// since:
/// 3.0.148
/// \param value String set.
///
- (void)addValue:(NSSet<NSString *> * _Nonnull)value;
/// Adds an array type of the value to the receiver’s value field.
/// since:
/// 3.0.148
/// \param array String array.
///
- (void)addValueWithArray:(NSArray<NSString *> * _Nonnull)array;
/// Removes an set type of the value from the receiver’s value field.
/// note:
/// Nonexistent string value are not ignored.
/// since:
/// 3.0.148
/// \param value String set.
///
- (void)removeValue:(NSSet<NSString *> * _Nonnull)value;
/// Removes an array type of the value from the receiver’s value field.
/// note:
/// Nonexistent string value are not ignored.
/// since:
/// 3.0.148
/// \param array String array.
///
- (void)removeValueWithArray:(NSArray<NSString *> * _Nonnull)array;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDMessageMetaArray (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageMetaArray</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDMessageMetaArray (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>MessageMetaArray</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains set of options to retrieve a message.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("MessageRetrievalParams")
@interface SBDMessageRetrievalParams : NSObject <NSCopying>
/// Specifies the URL of the channel to retrieve the message.
@property (nonatomic, copy) NSString * _Nonnull channelURL;
/// Specifies the type of the channel.
@property (nonatomic) enum SBDChannelType channelType;
/// Specifies the unique ID of the message to retrieve.
@property (nonatomic) int64_t messageId;
/// Determines whether the metaarray of the message is included in the results.
@property (nonatomic) BOOL includeMetaArray;
/// Determines wheter to include reactions in the results. Default is <code>false</code>
/// since:
/// 3.0.237
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the message when it is a parent message. Default is <code>false</code>
@property (nonatomic) BOOL includeThreadInfo;
/// Determines whether to include poll information of the message in the results. Default is <code>false</code>
/// <ul>
///   <li>
///     Since 3.0.232
///   </li>
/// </ul>
@property (nonatomic) BOOL includePollDetails;
/// Determines wheter to include information on parent message. Default is <code>false</code>
/// <ul>
///   <li>
///     Since 3.0.236
///   </li>
/// </ul>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Parameter constructor
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType messageId:(int64_t)messageId includeMetaArray:(BOOL)includeMetaArray includeReactions:(BOOL)includeReactions includeThreadInfo:(BOOL)includeThreadInfo includeParentMessageInfo:(BOOL)includeParentMessageInfo OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageRetrievalParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

enum SBDMessageSearchQueryOrder : NSInteger;

/// A class representing query to retrieve list of <code>BaseMessage</code>s that matches a given
/// query with given filters. <code>MessageSearchQuery</code> can be generated by using
/// <code>MessageSearchQueryBuilder</code>
/// since:
/// 3.0.162
SWIFT_CLASS_NAMED("MessageSearchQuery")
@interface SBDMessageSearchQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
/// Keyword to search for.
@property (nonatomic, copy) NSString * _Nullable keyword;
/// Channel url of the channel you want to set as a scope for the search.
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Channel custom type you want to set as a scope for the search.
@property (nonatomic, copy) NSString * _Nullable channelCustomType;
/// Should reverse the queried result list. Default is <code>false</code>
@property (nonatomic) BOOL reverse;
/// Should search as a complete, exact phrase. Default is <code>false</code>
@property (nonatomic) BOOL exactMatch;
/// Starting timestamp to search from. Default is 0
@property (nonatomic) int64_t messageTimestampFrom;
/// Ending timestamp to search to. Default is 0
@property (nonatomic) int64_t messageTimestampTo;
/// The order method for the search. Default is <code>.score</code>
@property (nonatomic) enum SBDMessageSearchQueryOrder order;
/// Whether treat keyword field as advanced query or not
/// since:
/// 3.0.222
@property (nonatomic) BOOL advancedQuery;
/// Array of target fields in message’s data that will be searched with keyword
/// since:
/// 3.0.222
@property (nonatomic, copy) NSArray<NSString *> * _Nullable targetFields;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic) BOOL includeNotJoinedPublicChannel;
@property (nonatomic) BOOL includeOpenChannel;
@property (nonatomic) NSUInteger totalCount;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use SendbirdChat's `createMessageSearchQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MessageListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDMessageSearchQuery * _Nonnull)setupFor:(SBDMessageSearchQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDMessageSearchQuery (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>MessageSearchQuery</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// Message ssearch query builder
SWIFT_CLASS_NAMED("MessageSearchQueryBuilder")
@interface SBDMessageSearchQueryBuilder : NSObject
/// Keyword to search for.
@property (nonatomic, copy) NSString * _Nullable keyword;
/// Channel url of the channel you want to set as a scope for the search.
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Channel custom type you want to set as a scope for the search.
@property (nonatomic, copy) NSString * _Nullable channelCustomType;
/// Should reverse the queried result list. Default is <code>false</code>
@property (nonatomic) BOOL reverse;
/// Should search as a complete, exact phrase. Default is <code>false</code>
@property (nonatomic) BOOL exactMatch;
/// Starting timestamp to search from. Default is 0
@property (nonatomic) int64_t messageTimestampFrom;
/// Ending timestamp to search to. Default is 0
@property (nonatomic) int64_t messageTimestampTo;
/// The order method for the search. Default is <code>.score</code>
@property (nonatomic) enum SBDMessageSearchQueryOrder order;
/// The maximum number of <code>SBDBaseMessage</code>s per queried page.
/// Default is 20, maximum is 999 (<1000)
@property (nonatomic) NSUInteger limit;
/// Whether treat keyword field as advanced query or not
/// since:
/// 3.0.222
@property (nonatomic) BOOL advancedQuery;
/// Array of target fields in message’s data that will be searched with keyword
/// since:
/// 3.0.222
@property (nonatomic, copy) NSArray<NSString *> * _Nullable targetFields;
@property (nonatomic) BOOL includeNotJoinedPublicChannel;
@property (nonatomic) BOOL includeOpenChannel;
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The order type for <code>MessageSearchQuery</code>.
/// since:
/// 3.0.162
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMessageSearchQueryOrder, "MessageSearchQueryOrder", open) {
/// Score type Returns the result as by their matching score.
  SBDMessageSearchQueryOrderScore = 0,
/// Timestamp type Returns the result as by <code>BaseMessage</code>’s timestamp.
  SBDMessageSearchQueryOrderTimeStamp = 1,
};

/// Constants of type to describe message’s sending status.
/// since:
/// 3.0.173
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMessageSendingStatus, "MessageSendingStatus", open) {
/// MUST NOT BE. If you got a message instance from SDK, the message can’t have this value.
  SBDMessageSendingStatusNone = 0,
/// Indicates the status of the message returned when trying to send a message.
/// The message with the pending status means that is not dispatched completely to the Sendbird
/// server. The pending message should be replaced with a message (failed or succeeded)
/// from the callback.
  SBDMessageSendingStatusPending = 1,
/// Indicates the status of the message that failed to send the message.
  SBDMessageSendingStatusFailed = 2,
/// Indicates the status of the message that success to send the message.
  SBDMessageSendingStatusSucceeded = 3,
/// Indicates the status of the message that is canceled.
  SBDMessageSendingStatusCanceled = 4,
};


/// An object that synchronizes messages for a specific group <span>channel</span>.
/// <h3>MessageSyncManager</h3>
/// The `MessageSyncManager` class creates an `MessageSync` object for a group channel,
/// inserts the `MessageSync` object into the waiting queue, and runs the object in the running queue.
/// <h3>Message synchronization</h3>
/// An `MessageSync` object is for a specific group <span>channel</span>. The object sends a request
/// for the messages to the server repeatedly. The method that the request uses is the
/// `getMessages(timestamp:params:completionHandler:)` of `BaseChannel` class.
/// The `params` for the method makes the synchronizer get the all messages without any filters. The synchronization
/// starts from the edge of the chunk of the channel. If the edge of the chunk hasn't been set yet, it starts from
/// `Int64.max`. Whenever the synchronizer receives the response from the server, it updates the chunk with
/// the oldest and the newest `createdAt` timestamp of the messages that the server Returns. When the
/// synchronizer resumes later, the updated chunk will be used as the `timestamp` of the method of
/// `BaseChannel` class. If there isn't any message in the previous direction, the synchronizer sets that
/// the previous messages synchronization for the channel is completed. And then, the synchronizer for the
/// channel never tries to get the previous messages again.
/// since:
/// 3.1.0
SWIFT_CLASS("_TtC12SendbirdChat11MessageSync")
@interface MessageSync : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Message type for filtering
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMessageTypeFilter, "MessageTypeFilter", open) {
/// Filter of all messages.
  SBDMessageTypeFilterAll = 0,
/// Filter of user message.
  SBDMessageTypeFilterUser = 1,
/// Filter of file message.
  SBDMessageTypeFilterFile = 2,
/// Filter of admin message.
  SBDMessageTypeFilterAdmin = 3,
};

/// The current user’s muted state type.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDMutedState, "MutedState", open) {
/// The current user is unmuted in the group channel.
  SBDMutedStateUnmuted = 0,
/// The current user is muted in the group channel.
  SBDMutedStateMuted = 1,
};


/// The <code>MutedUserListQuery</code> class is a query class for getting the list of muted users in
/// a specific channel.
/// This instance is created by <code>createMutedUserListQuery</code> of <code>BaseChannel</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("MutedUserListQuery")
@interface SBDMutedUserListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) enum SBDChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createMutedUserListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>MutedUserListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// Represents a delegate to receive network event
SWIFT_PROTOCOL_NAMED("NetworkDelegate")
@protocol SBDNetworkDelegate
/// Call when reconnection succeeds
- (void)didReconnect;
@end


/// Represents OpenGraph Image information
/// since:
/// 3.0.193
SWIFT_CLASS_NAMED("OGImage")
@interface SBDOGImage : NSObject
/// An image url
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// An alternate url to use if the webpage requires HTTPS
@property (nonatomic, readonly, copy) NSString * _Nullable secureURL;
/// A MIME type for this image
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// A description of what is in the image (not a caption). If the page specifies an og:image it should specify this property
@property (nonatomic, readonly, copy) NSString * _Nullable alt;
/// The number of pixels wide
@property (nonatomic, readonly) NSInteger width;
/// The number of pixels high
@property (nonatomic, readonly) NSInteger height;
@end


/// Represents OpenGraph information
/// since:
/// 3.0.193
SWIFT_CLASS_NAMED("OGMetaData")
@interface SBDOGMetaData : NSObject
/// The title of object as it should appear within the graph
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The canonical URL of object that will be used as its permanent ID in the graph
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// A one to two sentence description of object.
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
/// An image object which should represent the object within the graph
@property (nonatomic, readonly, strong) SBDOGImage * _Nullable defaultImage;
@end


/// The <code>OpenChannel</code> class represents a open channel which is a public chat.
/// Any users who wants to enter the channel can join freely. This class is derived from <code>BaseChannel</code>.
/// If the <code>OpenChannelDelegate</code> is added, the user will automatically receive all messages from the
/// channels where the user belongs after connection. The <code>OpenChannel</code> does not provide the features that
/// <code>GroupChannel</code> does, but it can handle much more users.
/// For more information, see <a href="https://docs.sendbird.com/ios#open_channel">Group Channel</a>.
SWIFT_CLASS_NAMED("OpenChannel")
@interface SBDOpenChannel : SBDBaseChannel
/// The number of participants in this channel.
@property (nonatomic) NSInteger participantCount;
/// The operators of this channel.
@property (nonatomic, copy) NSArray<SBDUser *> * _Nullable operators;
/// Returns the user is an operator or not.
/// \param user The user object.
///
///
/// returns:
/// If <code>true</code>, the user is an operator.
- (BOOL)isOperatorWithUser:(SBDUser * _Nonnull)user SWIFT_WARN_UNUSED_RESULT;
/// Returns the user ID is an operator or not.
/// \param userId The user ID.
///
///
/// returns:
/// If <code>true</code>, the user ID is an operator.
- (BOOL)isOperatorWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL name:(NSString * _Nonnull)name coverURL:(NSString * _Nullable)coverURL createdAt:(int64_t)createdAt creator:(SBDUser * _Nullable)creator isCreated:(BOOL)isCreated data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType isEphemeral:(BOOL)isEphemeral isFrozen:(BOOL)isFrozen lastSyncedTs:(int64_t)lastSyncedTs SWIFT_UNAVAILABLE;
@end


@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>OpenChannel</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Bans a user with the user object.
/// \param user The user object.
///
/// \param seconds Duration for ban in seconds.
///
/// \param completionHandler The handler block to execute.
///
- (void)banUser:(SBDUser * _Nonnull)user seconds:(NSInteger)seconds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("Use `ban(_:seconds:description:completionHandler:)` instead");
/// Bans a user with the user ID.
/// \param userId The user ID.
///
/// \param seconds Duration for ban in seconds.
///
/// \param completionHandler The handler block to execute.
///
- (void)banUserWithUserId:(NSString * _Nonnull)userId seconds:(NSInteger)seconds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("Use `ban(userId:seconds:description:completionHandler:)` instead");
@end


@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Enters this channel.
/// \param completionHandler The handler block to execute.
///
- (void)enterChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Exits this channel.
/// \param completionHandler The handler block to execute.
///
- (void)exitChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end

@class SBDOpenChannelListQuery;
@class SBDParticipantListQuery;

@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates a query instance for open channel list.
///
/// returns:
/// The query instance for open channel list.
+ (SBDOpenChannelListQuery * _Nonnull)createOpenChannelListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates a query instance for getting participant list of the channel with the given channel URL.
/// \param channelURL URL of the channel to create the query with.
///
///
/// returns:
/// ParticipantListQuery instance for the participant list of the channel instance.
+ (SBDParticipantListQuery * _Nonnull)createParticipantListQueryWithChannelURL:(NSString * _Nonnull)channelURL SWIFT_WARN_UNUSED_RESULT;
/// Creates a participant list query for this channel.
///
/// returns:
/// <code>UserListQuery</code> instance for the participant list of the channel instance.
- (SBDParticipantListQuery * _Nullable)createParticipantListQuery SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDOpenChannelCreateParams;
@class SBDOpenChannelUpdateParams;

@interface SBDOpenChannel (SWIFT_EXTENSION(SendbirdChat))
/// Creates an open channel.
/// note:
/// The name and cover URL of the channel are generated in Sendbird server.
/// \param completionHandler The handler block to execute.
///
+ (void)createChannelWithCompletionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a open channel with <code>OpenChannelCreateParams</code> class.
/// since:
/// 3.0.206
/// \param params Instance of <code>OpenChannelCreateParams</code> what has properties to create open channel.
///
/// \param completionHandler Handler block to execute. <code>channel</code> is the open channel instance.
///
+ (void)createChannelWithParams:(SBDOpenChannelCreateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a open channel with <code>OpenChannelCreateParams</code> class.
/// since:
/// 3.0.206
/// \param params The parameter instance of <code>OpenChannelCreateParams</code> what has properties to create open channel.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of bytes sent since
/// the last time this method was called. <code>totalBytesSent</code> is the total number of bytes sent so far. <code>totalBytesExpectedToSend</code>
/// is the expected length of the body <em>data</em>. These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance.
///
+ (void)createChannelWithParams:(SBDOpenChannelCreateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Updates this channel with <code>OpenChannelUpdateParams</code> class.
/// since:
/// 3.0.206
/// \param params The parameter instance of OpenChannelCreateParams what has properties to update open channel.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance.
///
- (void)updateChannelWithParams:(SBDOpenChannelUpdateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Updates this channel with <code>OpenChannelUpdateParams</code> class.
/// since:
/// 3.0.206
/// \param params The parameter instance of OpenChannelCreateParams what has properties to update open channel.
///
/// \param progressHandler The handler block to monitor progression. <code>bytesSent</code> is the number of bytes sent since
/// the last time this method was called. <code>totalBytesSent</code> is the total number of bytes sent so far. <code>totalBytesExpectedToSend</code>
/// is the expected length of the body <em>data</em>. These parameters are the same to the declaration of <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1408299-urlsession"><code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code></a>.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance.
///
- (void)updateChannelWithParams:(SBDOpenChannelUpdateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nonnull)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes this channel
/// since:
/// 3.0.180
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance which is deleted.
///
- (void)deleteChannelWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets an open channel instance from channel URL.
/// \param channelURL The channel URL.
///
/// \param completionHandler The handler block to execute. <code>channel</code> is the open channel instance which has the <code>channelURL</code>.
///
+ (void)getChannelWithURL:(NSString * _Nonnull)url completionHandler:(void (^ _Nullable)(SBDOpenChannel * _Nullable, SBError * _Nullable))completionHandler;
/// Refreshes the channel information.
/// \param completionHandler The handler block to execute.
///
- (void)refreshWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end


/// The <code>OpenChannelCreateParams</code> class contain parameters for <code>open channel</code>.
/// When you want to create a open channel or update a open channel, use this class. Add what you want
/// to create with, add which properties you want to update, and pass this class to <code>OpenChannel</code>. You
/// can use this class with apis that are <code>OpenChannel.createChannel(params::completionHandler:)</code> or
/// <code>OpenChannel,update(params:completionHandler:)</code>.
/// For more information, see <a href="https://sendbird.com/docs/chat/v4/ios/guides/open-channel">Open Channel</a>.
/// since:
/// 3.0.206
SWIFT_CLASS_NAMED("OpenChannelCreateParams")
@interface SBDOpenChannelCreateParams : NSObject <NSCopying>
/// Channel name
@property (nonatomic, copy) NSString * _Nullable name;
/// Channel URL. If nil, channel url will be determined randomly.
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Channel cover image url
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// Channel cocer image data
@property (nonatomic, copy) NSData * _Nullable coverImage;
/// Channel cover image name
@property (nonatomic, copy) NSString * _Nullable coverImageName;
/// Channel data
@property (nonatomic, copy) NSString * _Nullable data;
/// Channel’s operator user ids
@property (nonatomic, copy) NSArray<NSString *> * _Nullable operatorUserIds;
/// Channel custom type
@property (nonatomic, copy) NSString * _Nullable customType;
- (nonnull instancetype)init;
/// Parameter constructor
- (nonnull instancetype)initWithName:(NSString * _Nullable)name channelURL:(NSString * _Nullable)channelURL coverURL:(NSString * _Nullable)coverURL coverImage:(NSData * _Nullable)coverImage coverImageName:(NSString * _Nullable)coverImageName data:(NSString * _Nullable)data operatorUserIds:(NSArray<NSString *> * _Nullable)operatorUserIds customType:(NSString * _Nullable)customType OBJC_DESIGNATED_INITIALIZER;
/// Set operators with list of user instance.
/// since:
/// 3.0.206
/// \param operators The list of operators.
///
- (void)setOperators:(NSArray<SBDUser *> * _Nonnull)operators;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>OpenChannelParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// An object that adopts the <code>OpenChannelDelegate</code> protocol is responsible for receiving the events in the channel.
/// This protocol deals with the below events.
/// <ul>
///   <li>
///     Receives an event when a participant entered the <a href="../Classes/OpenChannel.html"><code>OpenChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when a participant exited the <a href="../Classes/OpenChannel.html"><code>OpenChannel</code></a>.
///   </li>
///   <li>
///     Receives an event when the <a href="../Classes/OpenChannel.html"><code>OpenChannel</code></a> was frozen or unfrozen.
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("OpenChannelDelegate")
@protocol SBDOpenChannelDelegate <SBDBaseChannelDelegate>
@optional
/// A callback when participant count has been changed for open channel
/// since:
/// 3.0.219
/// \param channels The open channel that member count has been updated
///
- (void)channelDidChangeParticipantCount:(NSArray<SBDOpenChannel *> * _Nonnull)channels;
/// A callback when a user enter an open channel.
/// \param channel The open channel.
///
/// \param user A user who enters the channel
///
- (void)channel:(SBDOpenChannel * _Nonnull)channel userDidEnter:(SBDUser * _Nonnull)user;
/// A callback when a user exit an open channel.
/// \param channel The open channel.
///
/// \param user A user who exits the channel.
///
- (void)channel:(SBDOpenChannel * _Nonnull)channel userDidExit:(SBDUser * _Nonnull)user;
@end


/// The <code>OpenChannelListQuery</code> class is a query class for getting the list of open channels.
/// The instance of this class is created by <code>createOpenChannelListQuery()</code> in <code>OpenChannel</code> class.
SWIFT_CLASS_NAMED("OpenChannelListQuery")
@interface SBDOpenChannelListQuery : NSObject <NSCopying>
/// Whether the result contains frozen channel or not. Default is <code>true</code>
/// since:
/// 3.0.182
@property (nonatomic) BOOL includeFrozenChannel;
/// Whether the result channel includes metadata or not. Default is <code>false</code>
/// since:
/// 3.0.216
@property (nonatomic) BOOL includeMetaData;
/// Sets the channel URL filter.
@property (nonatomic, copy) NSString * _Nullable channelURLFilter;
/// Sets the channel name filter.
@property (nonatomic, copy) NSString * _Nullable channelNameFilter;
/// Sets the custom type filter.
@property (nonatomic, copy) NSString * _Nullable customTypeFilter;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use OpenChannel's `createOpenChannelListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDOpenChannel *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>OpenChannelListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDOpenChannelListQuery * _Nonnull)setupFor:(SBDOpenChannelListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains set of options to update open channel
/// since:
/// 4.0.0
SWIFT_CLASS_NAMED("OpenChannelUpdateParams")
@interface SBDOpenChannelUpdateParams : NSObject <NSCopying>
/// Channel name
@property (nonatomic, copy) NSString * _Nullable name;
/// Channel cover image URL
/// note:
/// This property does not cooperate with <code>coverImage</code>
@property (nonatomic, copy) NSString * _Nullable coverURL;
/// Channel cover image data
/// note:
/// This property does not cooperate with <code>coverURL</code>
@property (nonatomic, copy) NSData * _Nullable coverImage;
/// Channel cover image name
@property (nonatomic, copy) NSString * _Nullable coverImageName;
/// Channel data
@property (nonatomic, copy) NSString * _Nullable data;
/// Channel’s operator user ids
@property (nonatomic, copy) NSArray<NSString *> * _Nullable operatorUserIds;
/// Channel custom type
@property (nonatomic, copy) NSString * _Nullable customType;
/// Default constructor
- (nonnull instancetype)init;
/// Parameter constructor
- (nonnull instancetype)initWithName:(NSString * _Nullable)name coverURL:(NSString * _Nullable)coverURL coverImage:(NSData * _Nullable)coverImage coverImageName:(NSString * _Nullable)coverImageName data:(NSString * _Nullable)data operatorUserIds:(NSArray<NSString *> * _Nullable)operatorUserIds customType:(NSString * _Nullable)customType OBJC_DESIGNATED_INITIALIZER;
/// Set operators with list of user instance.
/// since:
/// 3.0.206
/// \param operators The list of operators.
///
- (void)setOperators:(NSArray<SBDUser *> * _Nonnull)operators;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>OpenChannelUpdateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>OperatorListQuery</code> class is a query class for getting the list of operators in channel.
/// The instance of this class is created by <code>createOperatorListQuery()</code> in <code>BaseChannel</code> class.
SWIFT_CLASS_NAMED("OperatorListQuery")
@interface SBDOperatorListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) enum SBDChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createOperatorListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>OperatorListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDOperatorListQuery * _Nonnull)setupFor:(SBDOperatorListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ParticipantListQuery</code> class is a query class for getting the list of participants in
/// an open channel.
/// This instance is created by <code>createParticipantListQuery()</code> of <code>OpenChannel</code>.
/// since:
/// 3.0.120
SWIFT_CLASS_NAMED("ParticipantListQuery")
@interface SBDParticipantListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use OpenChannel's `createParticipantListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>ParticipantListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDParticipantListQuery * _Nonnull)setupFor:(SBDParticipantListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// A object to represent a plugin
/// since:
/// 3.0.207
SWIFT_CLASS_NAMED("Plugin")
@interface SBDPlugin : NSObject
/// String indicates a plugin type
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// String indicates a vendor who provides this plugin
@property (nonatomic, readonly, copy) NSString * _Nullable vendor;
/// Dictionary contains details of this plugin
/// Key is string and value is any object
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable detail;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDPollDetails;
@class SBDPollCreateParams;
@class SBDPollRetrievalParams;
@class SBDPollUpdateParams;

/// Represents a poll that users can vote
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("Poll")
@interface SBDPoll : NSObject
/// Poll id
@property (nonatomic, readonly) int64_t pollId;
/// Title of this poll
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Detail information of this poll
/// note:
/// this property will be nil if <code>includePollDetails</code> option is NO when fetching message list
@property (nonatomic, strong) SBDPollDetails * _Nullable details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Creates a poll with given params.
/// \param params <code>PollCreateParams</code> instance.
///
/// \param completionHandler completion block.
///
+ (void)createWithParams:(SBDPollCreateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Gets a poll.
/// \param params <code>PollRetrievalParams</code> object.
///
/// \param completionHandler completion block.
///
+ (void)getWithParams:(SBDPollRetrievalParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Updates this poll with params.
/// \param params <code>PollUpdateParams</code> instance.
///
/// \param completionHandler Completion block.
///
- (void)updateWithParams:(SBDPollUpdateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Closes this poll.
/// \param completionHandler completion block.
///
- (void)closeWithCompletionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes this poll.
/// \param completionHandler completion block.
///
- (void)deleteWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Adds an option to this poll.
/// \param text option text.
///
/// \param channelURL channel url where this poll is included.
///
/// \param completionHandler completion block.
///
- (void)addOptionWithText:(NSString * _Nonnull)text channelURL:(NSString * _Nonnull)channelURL completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Votes on this poll.
/// \param optionIds number array that contains option ids.
///
/// \param channelURL channel url where this poll is included.
///
/// \param completionHandler completion block.
///
- (void)voteWithOptionIds:(NSArray<NSNumber *> * _Nonnull)optionIds channelURL:(NSString * _Nonnull)channelURL completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
@end


@interface SBDPoll (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDPoll (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a parameter object to create or update poll object
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollCreateParams")
@interface SBDPollCreateParams : NSObject
/// Title of this poll
@property (nonatomic, copy) NSString * _Nonnull title;
/// An additional text to accompany the poll.
/// Can be used to provide explanations for incorrect quiz answers
@property (nonatomic, copy) NSString * _Nullable text;
/// Possible options for which a user can vote
/// note:
/// this property is only valid when creating a poll, ignored when updating a poll
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull options;
/// Whether to make the votes anonymous. Default is false
@property (nonatomic) BOOL isAnonymous;
/// Whether to allow user-suggested options. Default is false
@property (nonatomic) BOOL allowUserSuggestion;
/// Whether to allow multiple vote casting. Default is false
@property (nonatomic) BOOL allowMutipleVotes;
/// Unix timestamp at which the poll has closed or will close (millisecond)
@property (nonatomic) int64_t closeAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Represents a poll data
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollData")
@interface SBDPollData : NSObject
/// Text representation
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@end

@class SBDPollOption;
enum SBDPollStatus : NSInteger;

/// Represents a poll details information
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollDetails")
@interface SBDPollDetails : NSObject
/// An additional text to accompany the poll.
/// Can be used to provide explanations for incorrect quiz answers
@property (nonatomic, readonly, strong) SBDPollData * _Nullable data;
/// Number of voters who casted a vote on the poll.
@property (nonatomic, readonly) NSInteger voterCount;
/// Possible options for which a user can vote.
@property (nonatomic, readonly, copy) NSArray<SBDPollOption *> * _Nonnull options;
/// Current user’s voted option list.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull votedOptionIds;
/// User ID who creates this poll.
@property (nonatomic, readonly, copy) NSString * _Nullable createdBy;
/// Whether to make the votes anonymous.
@property (nonatomic, readonly) BOOL isAnonymous;
/// Whether to allow user-suggested options.
@property (nonatomic, readonly) BOOL allowUserSuggestion;
/// Whether to allow multiple vote casting.
@property (nonatomic, readonly) BOOL allowMutipleVotes;
/// Unix timestamp at which the poll is created (millisecond).
@property (nonatomic, readonly) int64_t createdAt;
/// Unix timestamp at which the poll is updated (millisecond).
@property (nonatomic, readonly) int64_t updatedAt;
/// Unix timestamp at which the poll has closed or will close (second).
@property (nonatomic, readonly) int64_t closeAt;
/// Whether the poll is closed.
@property (nonatomic) enum SBDPollStatus status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDPollDetails (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// An object to retrieve list of <code>Poll</code>
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollListQuery")
@interface SBDPollListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createPollListQuery`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDPoll *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>PollListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDPollListQuery * _Nonnull)setupFor:(SBDPollListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDUpdatedVoteCount;

/// Represents an option for poll
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollOption")
@interface SBDPollOption : NSObject
/// Poll id
@property (nonatomic, readonly) int64_t pollId;
/// Option id
@property (nonatomic, readonly) int64_t optionId;
/// The text to represent the option
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// Number of votes casted on the option
@property (nonatomic, readonly) NSUInteger voteCount;
/// ID of the user who has created the option
@property (nonatomic, readonly, copy) NSString * _Nonnull createdBy;
/// Unix timestamp at which the option is created (millisecond)
@property (nonatomic, readonly) int64_t createdAt;
/// Unix timestamp at which the option is updated (millisecond)
@property (nonatomic, readonly) int64_t updatedAt;
/// Unix timestamp at which last vote occurs either cast or cancel (millisecond)
@property (nonatomic, readonly) int64_t lastVotedAt;
/// Users who casted the vote on this option, this field is only available when you fetch poll with <code>showPartialVoters</code> option
@property (nonatomic, readonly, copy) NSArray<SBDUser *> * _Nullable partialVoters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Gets an option with id
/// \param pollId poll id
///
/// \param optionId option id
///
/// \param channelURL channelURL that poll is belonged to
///
/// \param completionHandler completion block
///
+ (void)getWithPollId:(int64_t)pollId optionId:(int64_t)optionId channelURL:(NSString * _Nonnull)channelURL completionHandler:(void (^ _Nonnull)(SBDPollOption * _Nullable, SBError * _Nullable))completionHandler;
/// Update this option with text
/// \param text option text
///
/// \param completionHandler completion block
///
- (void)updateWithText:(NSString * _Nonnull)text completionHandler:(void (^ _Nonnull)(SBDPoll * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes this option
/// \param completionHandler completion block
///
- (void)deleteWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
- (void)updateWithCount:(SBDUpdatedVoteCount * _Nonnull)count timestamp:(int64_t)timestamp;
@end


@interface SBDPollOption (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains a voter result for an option
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollOptionVoterResult")
@interface SBDPollOptionVoterResult : NSObject
/// Number of voter
@property (nonatomic, readonly) NSUInteger voteCount;
/// First page Voters list - could be partial
@property (nonatomic, readonly, copy) NSArray<SBDUser *> * _Nonnull voters;
@end


/// An object contains set of options to retrieve <code>Poll</code> object
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollRetrievalParams")
@interface SBDPollRetrievalParams : NSObject
/// Channel url where the poll exists in
@property (nonatomic, copy) NSString * _Nonnull channelURL;
/// Poll id
@property (nonatomic) int64_t pollId;
/// Shows limited users on each option in this poll. Default is false
@property (nonatomic) BOOL showPartialVoters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Poll status
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPollStatus, "PollStatus", open) {
  SBDPollStatusOpen = 0,
  SBDPollStatusClosed = 1,
  SBDPollStatusRemoved = 2,
};


/// Represents an poll update event
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollUpdateEvent")
@interface SBDPollUpdateEvent : NSObject
/// Updated poll
@property (nonatomic, readonly, strong) SBDPoll * _Nonnull poll;
/// Poll status
@property (nonatomic, readonly) enum SBDPollStatus status;
/// Timestamps when this event occurs
@property (nonatomic, readonly) int64_t timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object contains set of options to update <code>Poll</code>
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollUpdateParams")
@interface SBDPollUpdateParams : NSObject
/// Title of this poll
@property (nonatomic, copy) NSString * _Nullable title;
/// An additional text to accompany the poll.
/// Can be used to provide explanations for incorrect quiz answers
@property (nonatomic, copy) NSString * _Nullable text;
/// Whether to make the votes anonymous. Default is false
@property (nonatomic) BOOL isAnonymous;
/// Whether to allow user-suggested options. Default is false
@property (nonatomic) BOOL allowUserSuggestion;
/// Whether to allow multiple vote casting. Default is false
@property (nonatomic) BOOL allowMutipleVotes;
/// Unix timestamp at which the poll has closed or will close (millisecond)
@property (nonatomic) int64_t closeAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Represents a vote event on a poll
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollVoteEvent")
@interface SBDPollVoteEvent : NSObject
/// Poll ID associated with this vote event
@property (nonatomic, readonly) int64_t pollId;
/// Updated poll options
@property (nonatomic, readonly, copy) NSArray<SBDUpdatedVoteCount *> * _Nonnull updatedVoteCounts;
/// Timestamp for this vote event
@property (nonatomic, readonly) int64_t timestamp;
@end


/// An object to retrieve list of voter
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("PollVoterListQuery")
@interface SBDPollVoterListQuery : NSObject
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// Boolean indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) int64_t pollId;
@property (nonatomic) int64_t optionId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createPollVoterListQuery:optionId:`");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDUser *> * _Nullable, NSInteger, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>PollVoterListQuery</code> instance
- (id _Nonnull)copyWith:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDPollVoterListQuery * _Nonnull)setupFor:(SBDPollVoterListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


/// An object which retrieves messages from the given channel.
/// The instance of this class is created by <code>createPreviousMessageListQuery()</code> in <code>BaseChannel</code> class.
SWIFT_CLASS_NAMED("PreviousMessageListQuery")
@interface SBDPreviousMessageListQuery : NSObject
/// Sets the order of messages. If <code>true</code>, the latest message is the index 0. The default value is <code>false</code>.
/// since:
/// 3.0.106
@property (nonatomic) BOOL reverse;
/// Sets the message type to filter messages. The default value is <code>.all</code>.
/// since:
/// 3.0.106
@property (nonatomic) enum SBDMessageTypeFilter messageTypeFilter;
/// Sets the custom type to filter messages.
/// since:
/// 3.0.106
@property (nonatomic, copy) NSString * _Nullable customTypeFilter;
/// Sets the custom types to filter messages.
/// since:
/// 3.0.213
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypesFilter;
/// Sets the senders’ user IDs filter.
/// since:
/// 3.0.106
@property (nonatomic, copy) NSArray<NSString *> * _Nullable senderUserIdsFilter;
/// Determines message object include meta array. Default is <code>false</code>
/// since:
/// 3.0.116
@property (nonatomic) BOOL includeMetaArray;
/// Determines message object include reactions. Default is <code>false</code>
/// since:
/// 3.0.168
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the messages in the results
/// when the results contain parent messages. Default is <code>false</code>
/// since:
/// 3.0.181
@property (nonatomic) BOOL includeThreadInfo;
/// Determines whether to include poll information of the message in the results. Default is <code>false</code>
/// since:
/// 3.0.232
@property (nonatomic) BOOL includePollDetails;
/// Determines whether to include parent message information of the messages in the results
/// when the results contain reply messages. Default is <code>false</code>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Sets the reply type to filter messages. The default value is <code>.none</code>.
@property (nonatomic) enum SBDReplyType replyType;
/// Determines whether to include only messages from the subChannel to which you belong
/// in the results. Default is <code>false</code>
/// note:
/// This value is only used in open channels.
/// since:
/// 3.0.204
@property (nonatomic) BOOL showSubChannelMessagesOnly;
@property (nonatomic) int64_t minimumTimestamp;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull channelURL;
@property (nonatomic) enum SBDChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use BaseChannel's `createPreviousMessageListQuery`");
/// Loads previous messages.
/// \param limit The number of messages per page.
///
/// \param reverse If <code>true</code>, the latest message is the index 0.
///
/// \param completionHandler The handler block to execute. The <code>messages</code> is the array of <code>BaseMessage</code> instances.
///
- (void)loadPreviousMessagesWithLimit:(NSUInteger)limit reverse:(BOOL)reverse completionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("Use `loadNextPage:` instead");
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDBaseMessage *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>PreviousMessageListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDPreviousMessageListQuery * _Nonnull)setupFor:(SBDPreviousMessageListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

/// The order type for <code>PublicGroupChannelListQuery</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPublicGroupChannelListOrder, "PublicGroupChannelListOrder", open) {
/// Chronological order for public group channel.
  SBDPublicGroupChannelListOrderChronological = 0,
/// Alphabetical name order for public group channel.
  SBDPublicGroupChannelListOrderChannelNameAlphabetical = 2,
/// Alphabetical value order of a selected key in meta data for public group channel.
  SBDPublicGroupChannelListOrderChannelMetaDataValueAlphabetical = 3,
};

enum SBDPublicGroupChannelMembershipFilter : NSInteger;

/// The <code>PublicGroupChannelListQuery</code> class is a query class for getting the list of public group channels.
/// The instance of this class is created by <code>createPublicGroupChannelListQuery()</code> in <code>GroupChannel</code> class.
SWIFT_CLASS_NAMED("PublicGroupChannelListQuery")
@interface SBDPublicGroupChannelListQuery : NSObject
/// Determines channel list includes empty channel. Deafult is <code>true</code>
@property (nonatomic) BOOL includeEmptyChannel;
/// Determines channel list includes frozen channel. Default is <code>true</code>
/// since:
/// 3.0.182
@property (nonatomic) BOOL includeFrozenChannel;
/// Determines channel list includes their members. Default is <code>true</code>
@property (nonatomic) BOOL includeMemberList;
/// Determines channel object of the list includes meta data property. Default is <code>true</code>
/// since:
/// 3.0.216
@property (nonatomic) BOOL includeMetaData;
/// Sets the order of the list. The order is defined in <code>PublicGroupChannelListOrder</code>.
/// Default is <code>.chronological</code>
@property (nonatomic) enum SBDPublicGroupChannelListOrder order;
/// Sets to filter super channel. Default is <code>.all</code>
@property (nonatomic) enum SBDGroupChannelSuperChannelFilter superChannelFilter;
/// Sets <code>GroupChannel</code> URLs filter.
/// <code>GroupChannel</code> list containing only and exactly the passed <code>GroupChannel</code> URLs will be returned.
/// note:
/// This does not cooperate with other filters.
@property (nonatomic) enum SBDPublicGroupChannelMembershipFilter publicMembershipFilter;
/// Sets the custom types filter.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypesFilter;
/// Sets to filter channels by custom type that starts with.
@property (nonatomic, copy) NSString * _Nullable customTypeStartsWithFilter;
/// Sets <code>GroupChannel</code> URLs filter.
/// <code>GroupChannel</code> list containing only and exactly the passed <code>GroupChannel</code> URLs will be returned.
/// note:
/// This does not cooperate with other filters.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable channelURLsFilter;
/// Sets <code>GroupChannel</code> names filter.
/// <code>GroupChannel</code> list containing only and exactly the passed <code>GroupChannel</code> name will be returned.
/// note:
/// This does not cooperate with other filters.
@property (nonatomic, copy) NSString * _Nullable channelNameContainsFilter;
/// Sets a key for ordering by value in the metadata.
/// This is valid when the <code>order</code> is <code>.channelMetaDataValueAlphabetical</code> only.
/// since:
/// 3.0.118
@property (nonatomic, copy) NSString * _Nullable metaDataOrderKeyFilter;
/// Searches for group channels with metadata containing an item with the specified value as its key
/// since:
/// 3.0.232
@property (nonatomic, copy) NSString * _Nullable metaDataKeyFilter;
/// Searches for group channels with metadata containing an item with the key specified by the metaDataKey
/// since:
/// 3.0.232
@property (nonatomic, copy) NSArray<NSString *> * _Nullable metaDataValuesFilter;
/// Searches for group channels with metadata containing an item with the key specified by the metaDataKey
/// and the values of that item start with the specified value
/// since:
/// 3.0.232
@property (nonatomic, copy) NSString * _Nullable metaDataValueStartsWithFilter;
/// fetch limit
@property (nonatomic) NSUInteger limit;
/// indicates there are more data to fetch
@property (nonatomic) BOOL hasNext;
/// Indicates the query is currently loading or not
@property (nonatomic) BOOL isLoading;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use GroupChannel's `createPublicGroupChannelListQuery`");
/// Sets meta data filter
/// note:
/// Using this method will reset <code>metaDataValueStartsWithFilter</code> property
/// \param key meta data key
///
/// \param values meta data values
///
- (void)setMetaDataFilterWithKey:(NSString * _Nonnull)key values:(NSArray<NSString *> * _Nonnull)values;
/// Sets meta data filter
/// note:
/// Using this method will reset <code>metaDataValuesFilter</code> property
/// \param key meta data key
///
/// \param value meta data values that starts with
///
- (void)setMetaDataFilterWithKey:(NSString * _Nonnull)key valueStartsWith:(NSString * _Nonnull)value;
/// Fetches next page
/// \param completionHandler completion handler
///
- (void)loadNextPageWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, SBError * _Nullable))completionHandler;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>PublicGroupChannelListQuery</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (SBDPublicGroupChannelListQuery * _Nonnull)setupFor:(SBDPublicGroupChannelListQuery * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

/// Filter my channels or all ones in public group channels.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPublicGroupChannelMembershipFilter, "PublicGroupChannelMembershipFilter", open) {
/// Without filter.
  SBDPublicGroupChannelMembershipFilterAll = 0,
/// Filter public group channel the current user joined in.
  SBDPublicGroupChannelMembershipFilterJoined = 1,
};

/// The push option that determines how to deliver the push notification when sending a user or a file message.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPushNotificationDeliveryOption, "PushNotificationDeliveryOption", open) {
/// The push notification will be delivered by the opposite user’s setting.
  SBDPushNotificationDeliveryOptionDefault = 0,
/// The push notification will never be delivered.
  SBDPushNotificationDeliveryOptionSuppress = 1,
};

/// Push token registration statuses
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPushTokenRegistrationStatus, "PushTokenRegistrationStatus", open) {
/// Registration succeeded.
  SBDPushTokenRegistrationStatusSuccess = 0,
/// Registration is pending.
  SBDPushTokenRegistrationStatusPending = 1,
/// Registartion is failed.
  SBDPushTokenRegistrationStatusError = 2,
};

/// Constants of type for device push token.
/// since:
/// 3.0.134
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPushTokenType, "PushTokenType", open) {
/// No type.
  SBDPushTokenTypeNone = 0,
/// Token from Android device.
  SBDPushTokenTypeGCM = 1,
/// Normal Token from iOS device.
  SBDPushTokenTypeAPNS = 2,
/// Token used for VoIP from iOS device.
  SBDPushTokenTypeAPNSVoIP = 3,
};

/// The options to choose which push notification for the current user to receive.
/// since:
/// 3.0.128
typedef SWIFT_ENUM_NAMED(NSInteger, SBDPushTriggerOption, "PushTriggerOption", open) {
/// Receive all of remote push notification.
  SBDPushTriggerOptionAll = 0,
/// Do NOT receive any remote push notification.
  SBDPushTriggerOptionOff = 1,
/// Receive only mentioned messages’s notification.
  SBDPushTriggerOptionMentionOnly = 2,
};


/// A object represents the reaction info.
/// The <code>BaseMessage</code> object can have the <code>Reaction</code> object in <code>reactions</code> property.
/// since:
/// 3.0.169
SWIFT_CLASS_NAMED("Reaction")
@interface SBDReaction : NSObject
/// The reaction key.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// List of user who has been reacted.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull userIds;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull userIdsSet;
/// The users who add the reaction.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull getUserIds;
/// The timestamp when the reaction is updated.
@property (nonatomic) int64_t updatedAt;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull updatedAtMap;
- (nonnull instancetype)initWithReactionEvent:(SBDReactionEvent * _Nonnull)reactionEvent OBJC_DESIGNATED_INITIALIZER;
- (BOOL)mergeWith:(SBDReactionEvent * _Nonnull)reactionEvent SWIFT_WARN_UNUSED_RESULT;
/// Compares this object with given other object..
/// \param object <code>Any</code> instance.
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// hash
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDReaction (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end

enum SBDReactionEventAction : NSInteger;

/// An object represents reaction event info.
/// The object is returned by not only the completion handler of <code>addReaction(message:key:completionHandler:)</code>
/// and <code>deleteReaction(message:key:completionHandler:)</code> in <code>BaseChannel</code> class but also
/// <code>channel(_:updatedReaction:)</code> delegate of <code>BaseChannelDelegate</code> protocol. The object has
/// to be applied to the message that has the identical message ID with the <code>apply(_:)</code> method in <code>BaseMessage</code> class.
/// since:
/// 3.0.169
SWIFT_CLASS_NAMED("ReactionEvent")
@interface SBDReactionEvent : NSObject
/// Message ID that indentifies the message that has the reaction event.
@property (nonatomic) int64_t messageId;
/// The reaction key.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// The user ID that identifies the user who adds or deletes the reaction key.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The operation that the user did. It will be adding a reaction or deleting a reaction.
@property (nonatomic, readonly) enum SBDReactionEventAction operation;
/// The timestamp that represents when the reaction event occurs.
@property (nonatomic, readonly) int64_t updatedAt;
- (nonnull instancetype)initWithMessageId:(int64_t)messageId key:(NSString * _Nonnull)key userId:(NSString * _Nonnull)userId operation:(enum SBDReactionEventAction)operation updatedAt:(int64_t)updatedAt OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDReactionEvent (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end

/// The ReactionEvent action state.
/// since:
/// 3.0.169
typedef SWIFT_ENUM_NAMED(NSInteger, SBDReactionEventAction, "ReactionEventAction", open) {
  SBDReactionEventActionAdd = 0,
  SBDReactionEventActionDelete = 1,
};


/// An object represents read status of a user
SWIFT_CLASS_NAMED("ReadStatus")
@interface SBDReadStatus : NSObject
/// User
@property (nonatomic, strong) SBDUser * _Nullable reader;
/// Read timestamp
@property (nonatomic) int64_t timestamp;
/// Channel URL
@property (nonatomic, copy) NSString * _Nullable channelURL;
/// Channel type
@property (nonatomic, copy) NSString * _Nullable channelType;
@end

/// Reply type filter
typedef SWIFT_ENUM_NAMED(NSInteger, SBDReplyType, "ReplyType", open) {
  SBDReplyTypeNone = 0,
  SBDReplyTypeAll = 1,
  SBDReplyTypeOnlyReplyToChannel = 2,
};

/// Categories of reporting reasons
/// since:
/// 3.0.154
typedef SWIFT_ENUM_NAMED(NSInteger, SBDReportCategory, "ReportCategory", open) {
/// Report suspicious content
  SBDReportCategorySuspicious = 0,
/// Report harassing content.
  SBDReportCategoryHarassing = 1,
/// Report spam content
  SBDReportCategorySpam = 2,
/// Report inappropriate content
  SBDReportCategoryInappropriate = 3,
};


/// Represents a user who has been restricted in a channel
SWIFT_CLASS_NAMED("RestrictedUser")
@interface SBDRestrictedUser : SBDUser
/// Restriction info for this user
@property (nonatomic, strong) SBDRestrictionInfo * _Nullable restrictionInfo;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth SWIFT_UNAVAILABLE;
@end

enum SBDRestrictionType : NSInteger;

/// An object contains information about restriction
SWIFT_CLASS_NAMED("RestrictionInfo")
@interface SBDRestrictionInfo : NSObject
/// Description for restricted reason
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
/// epoch time when the restriction ends
@property (nonatomic, readonly) int64_t endAt;
/// Restriction type
@property (nonatomic) enum SBDRestrictionType restrictionType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Restriction type for restrictedUser
/// since:
/// 3.0.236
typedef SWIFT_ENUM_NAMED(NSInteger, SBDRestrictionType, "RestrictionType", open) {
  SBDRestrictionTypeMuted = 0,
  SBDRestrictionTypeBanned = 1,
};

/// The users’s role which gives different behaviors, permisions to user.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDRole, "Role", open) {
/// The default role that means nothing.
  SBDRoleNone = 0,
/// The role of operator.
  SBDRoleOperator = 1,
};


@class NSCoder;

/// Sendbird error class.
SWIFT_CLASS("_TtC12SendbirdChat7SBError")
@interface SBError : NSError
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
/// Create error object with Dictionary.
/// \param dict Error Data
///
///
/// returns:
/// <code>SBError</code> object.
+ (SBError * _Nullable)errorWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
/// Create error object with NSError object.
/// \param error NSError Object.
///
///
/// returns:
/// <code>SBError</code> object.
+ (SBError * _Nullable)errorWithNSError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// Create error object
/// \param domin domain.
///
/// \param code error code.
///
/// \param dict additional info in dictionary
///
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
+ (SBError * _Nonnull)errorFrom:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end



@interface SBError (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly) BOOL shouldRetryWithAPI;
@end


@interface SBError (SWIFT_EXTENSION(SendbirdChat))
@property (nonatomic, readonly, copy) NSString * _Nullable symbol;
@property (nonatomic, readonly, copy) NSString * _Nullable wrappedSymbol;
@property (nonatomic, readonly, copy) NSString * _Nonnull symbolKey;
@end


SWIFT_PROTOCOL("_TtP12SendbirdChat13SBLogReceiver_")
@protocol SBLogReceiver
- (void)logMessage:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC12SendbirdChat15SBRunloopThread")
@interface SBRunloopThread : NSThread
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)main;
@end


SWIFT_CLASS("_TtC12SendbirdChat7SBTimer")
@interface SBTimer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SBDScheduledUserMessageStatus : NSInteger;

/// Represents a scheduled user message.
/// since:
/// 3.0.119
SWIFT_CLASS_NAMED("ScheduledUserMessage")
@interface SBDScheduledUserMessage : NSObject
/// The scheduled message ID.
@property (nonatomic, readonly) int64_t scheduledId;
/// The scheduled message date time. (format: “YYYY-MM-DD HH:mm”)
@property (nonatomic, readonly, copy) NSString * _Nonnull scheduledDateTimeString;
/// The scheduled message timezone. (e.g. UTC, America/Los_Angeles, etc)
@property (nonatomic, readonly, copy) NSString * _Nonnull scheduledTimezone;
/// The scheduled message status.
@property (nonatomic, readonly) enum SBDScheduledUserMessageStatus status;
/// Error code. If there isn’t error, it’s zero.
@property (nonatomic, readonly) NSInteger errorCode;
/// Error message.
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
/// The push notification delivery option that determines how to deliver the push notification
/// when sending a user or a file message. The default value is <code>.default</code>.
@property (nonatomic, readonly) enum SBDPushNotificationDeliveryOption pushOption;
/// Message created time in millisecond(UTC).
@property (nonatomic, readonly) int64_t createdAt;
/// Message updated time in millisecond(UTC).
@property (nonatomic, readonly) int64_t updatedAt;
/// Target type of mention.
@property (nonatomic, readonly) enum SBDMentionType mentionType;
/// The list of users who will be mentioned together with the message.
@property (nonatomic, readonly, copy) NSArray<SBDUser *> * _Nonnull mentionedUsers;
/// Channel URL which will have this message.
@property (nonatomic, readonly, copy) NSString * _Nonnull channelURL;
@property (nonatomic, readonly) enum SBDChannelType channelType;
/// Sender of the <em>message</em>. This is represented by <code>Sender</code> class.
@property (nonatomic, readonly, strong) SBDSender * _Nullable sender;
/// message text
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// The custom data for message.
@property (nonatomic, readonly, copy) NSString * _Nonnull data;
/// Custom message type.
@property (nonatomic, readonly, copy) NSString * _Nonnull customType;
/// The target languages that the message will be translated into.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull targetLanguages;
/// Gets an array of meta arrays sorted by chronological order.
/// since:
/// 3.0.148
@property (nonatomic, readonly, copy) NSArray<SBDMessageMetaArray *> * _Nonnull metaArrays;
/// Checks the channel type is open channel or not.
///
/// returns:
/// <code>true</code> if when this is an open channel message
- (BOOL)isOpenChannel SWIFT_WARN_UNUSED_RESULT;
/// Checks the channel type is group channel or not.
///
/// returns:
/// <code>true</code> if when this is a group channel message
- (BOOL)isGroupChannel SWIFT_WARN_UNUSED_RESULT;
/// Gets metaArrays with given list of keys
/// since:
/// 3.0.148
/// \param keys Keys of the meta array.
///
///
/// returns:
/// An Array of meta array with keys.
- (NSArray<SBDMessageMetaArray *> * _Nonnull)metaArraysWithKeys:(NSArray<NSString *> * _Nonnull)keys SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDScheduledUserMessage (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


/// An object contains a set of options to create <code>UserMessage</code>.
/// since:
/// 3.0.90
SWIFT_CLASS_NAMED("UserMessageCreateParams")
@interface SBDUserMessageCreateParams : SBDBaseMessageCreateParams
/// Message text.
@property (nonatomic, copy) NSString * _Nonnull message;
/// The target languages that the message will be translated into.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable targetLanguages;
/// Links a poll with message, to unlink set it -1
/// since:
/// 3.0.232
@property (nonatomic) int64_t pollId;
/// Default construrctor
/// \param message The message to text.
///
///
/// returns:
/// An initialized user message params
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>UserMessageCreateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(NSString * _Nullable)data customType:(NSString * _Nullable)customType pushNotificationDeliveryOption:(enum SBDPushNotificationDeliveryOption)pushNotificationDeliveryOption metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays mentionType:(enum SBDMentionType)mentionType mentionedUserIds:(NSArray<NSString *> * _Nullable)mentionedUserIds parentMessageId:(int64_t)parentMessageId isReplyToChannel:(BOOL)isReplyToChannel appleCriticalAlertOptions:(SBDAppleCriticalAlertOptions * _Nullable)appleCriticalAlertOptions SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWith:(SBDBaseMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end


/// An object contains set of options to send <code>ScheduleUserMessage</code>
/// since:
/// 3.0.119
SWIFT_CLASS_NAMED("ScheduledUserMessageCreateParams")
@interface SBDScheduledUserMessageCreateParams : SBDUserMessageCreateParams
/// The scheduled date to send a message. (YYYY-MM-DD hh:mm)
@property (nonatomic, readonly, copy) NSString * _Nullable scheduledDateTimeString;
/// The timezone for the scheduled date to send a message.
@property (nonatomic, readonly, copy) NSString * _Nullable scheduledTimezone;
/// Parameter constructor
/// \param message The text message to be sent.
///
/// \param year Year (YYYY), e.g. 2018.
///
/// \param month Month (1~12).
///
/// \param day Day (1~31).
///
/// \param hour Hour (0~23).
///
/// \param min Minute (0~59).
///
/// \param timezone The timezone.
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message year:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hour:(NSInteger)hour min:(NSInteger)min timezone:(NSString * _Nonnull)timezone OBJC_DESIGNATED_INITIALIZER;
/// Sets the specific time to send a message.
/// \param year Year (YYYY), e.g. 2018.
///
/// \param month Month (1~12).
///
/// \param day Day (1~31).
///
/// \param hour Hour (0~23).
///
/// \param min Minute (0~59).
///
/// \param timezone The timezone.
///
///
/// returns:
/// <code>true</code> if the values are valid.
- (BOOL)setScheduleWithYear:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hour:(NSInteger)hour min:(NSInteger)min timezone:(NSString * _Nonnull)timezone;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithMessage:(SBDUserMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end

/// Scheduled user message status
typedef SWIFT_ENUM_NAMED(NSInteger, SBDScheduledUserMessageStatus, "ScheduledUserMessageStatus", open) {
  SBDScheduledUserMessageStatusScheduled = 0,
  SBDScheduledUserMessageStatusSent = 1,
  SBDScheduledUserMessageStatusCanceled = 2,
  SBDScheduledUserMessageStatusFailed = 3,
};

enum SBDWebSocketConnectionState : NSInteger;
@protocol SBDUserEventDelegate;
@protocol SBDSessionDelegate;
@class SBDUnreadItemKey;
@class SBDUnreadItemCount;
@class SBDUserUpdateParams;

/// The <code>SendbirdChat</code> is the core class for Sendbird. This class is singletone instance which is initialized by Application ID.
/// This class provides the methods for overall operations. The methods include <code>BaseChannelDelegate</code> registration for receiving events
/// that are related to channels, <code>ConnectionDelegate</code> for managing the connection status, updating the current user’s information,
/// registration for APNS push notification and blocking other users.
SWIFT_CLASS("_TtC12SendbirdChat12SendbirdChat")
@interface SendbirdChat : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isActive;)
+ (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the SDK version.
///
/// returns:
/// The SDK version.
+ (NSString * _Nonnull)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Gets the Application ID which was used for initialization.
///
/// returns:
/// The Application ID.
+ (NSString * _Nullable)getApplicationId SWIFT_WARN_UNUSED_RESULT;
/// Sets the version of the app that uses the Sendbird SDK. The version will be used when the debugging is needed.
/// since:
/// 3.1.3
/// \param appVersion The version of the app.
///
+ (void)setAppVersionWithVersion:(NSString * _Nullable)version;
/// Gets initializing state.
///
/// returns:
/// If <code>true</code>, <code>SendbirdChat</code> instance is initialized.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isInitialized;)
+ (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
/// Initializes <code>SendbirdChat</code> singleton instance with Sendbird Application ID.
/// The Application ID is on Sendbird dashboard. This method has to be run first in order to user Sendbird.
/// since:
/// 3.0.227
/// \param params <code>InitParams</code> object
///
/// \param migrationStartHandler handler that notifies when local cache migration has started
///
/// \param completionHandler handler that notifies when local cache is ready to use
///
///
/// returns:
/// <code>true</code> if the applicationId is set.
+ (BOOL)initializeWithParams:(SBDInitParams * _Nonnull)params migrationStartHandler:(void (^ _Nullable)(void))migrationStartHandler completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Performs a connection to Sendbird with the user ID.
/// \param userId The user ID.
///
/// \param completionHandler The handler block to execute. <code>user</code> is the object to represent the current user.
///
+ (void)connectWithUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Performs a connection to Sendbird with the user ID and the access token.
/// \param userId The user ID.
///
/// \param authToken The auth token. If the user doesn’t have auth token, set nil.
///
/// \param completionHandler The handler block to execute. <code>user</code> is the object to represent the current user.
///
+ (void)connectWithUserId:(NSString * _Nonnull)userId authToken:(NSString * _Nullable)authToken completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Performs a connection to Sendbird with the user ID and the access token.
/// seealso:
/// <code>connect(userId:authToken:completionHandler:)</code>
/// warning:
/// <em>Important</em>: DON’T use this method. This method will be unavailable.
/// \param userId userId
///
/// \param authToken authToken
///
/// \param apiHost apiHost
///
/// \param wsHost wsHost
///
/// \param completionHandler completionHandler
///
+ (void)connectWithUserId:(NSString * _Nonnull)userId authToken:(NSString * _Nullable)authToken apiHost:(NSString * _Nullable)apiHost wsHost:(NSString * _Nullable)wsHost completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Disconnects from Sendbird. If this method is invoked, the current user will be invalidated.
/// \param completionHandler The handler block to execute.
///
+ (void)disconnectWithCompletionHandler:(void (^ _Nullable)(void))completionHandler;
/// Starts reconnection explictly. The <code>ConnectionDelegate</code> delegates will be invoked by the reconnection process.
///
/// returns:
/// <code>true</code> if there is the data to be used for reconnection.
+ (BOOL)reconnect;
/// The completion handler of background session.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable backgroundSessionCompletionHandler)(void);)
+ (void (^ _Nullable)(void))backgroundSessionCompletionHandler SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackgroundSessionCompletionHandler:(void (^ _Nullable)(void))newValue;
/// Gets information set in the Application.
/// since:
/// 3.0.180
+ (SBDAppInfo * _Nullable)getAppInfo SWIFT_WARN_UNUSED_RESULT;
/// Gets the WebSocket server connection state.
///
/// returns:
/// <code>WebSocketConnectionState</code> indicating socket connection state
+ (enum SBDWebSocketConnectionState)getConnectState SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>ApplicationUserListQuery</code> instance for getting a list of all users of this application.
/// since:
/// 3.0.120
///
/// returns:
/// <code>ApplicationUserListQuery</code> instance
+ (SBDApplicationUserListQuery * _Nonnull)createApplicationUserListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>BlockedUserListQuery</code> instance for getting a list of blocked users by the current user.
///
/// returns:
/// <code>BlockedUserListQuery</code> instance.
+ (SBDBlockedUserListQuery * _Nonnull)createBlockedUserListQuery SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>MessageSearchQuery</code> instance for message search
/// since:
/// 4.0.0
/// \param builder <code>MessageSearchQueryBuilder</code> builder
///
///
/// returns:
/// <code>MessageSearchQuery</code> instance
+ (SBDMessageSearchQuery * _Nonnull)createMessageSearchQueryWithBuilder:(SBDMessageSearchQueryBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
/// Adds the <code>ConnectionDelegate</code>.
/// \param delegate <code>ConnectionDelegate</code> delegate.
///
/// \param identifier The identifier for the delegate.
///
+ (void)addConnectionDelegate:(id <SBDConnectionDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes the <code>ConnectionDelegate</code> by identifier.
/// \param identifier The identifier for the delegate to be removed.
///
+ (void)removeConnectionDelegateForIdentifier:(NSString * _Nonnull)identifier;
/// Gets the delegate for connection by indentifer.
/// \param identifier The identifier for delegate.
///
///
/// returns:
/// <code>ConnectionDelegate</code> delegate.
+ (id <SBDConnectionDelegate> _Nullable)connectionDelegateForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Removes all connection delegates;
+ (void)removeAllConnectionDelegates;
/// Adds the <code>BaseChannelDelegate</code>.
/// \param delegate <code>BaseChannelDelegate</code> delegate.
///
/// \param identifier The identifier for delegate.
///
+ (void)addChannelDelegate:(id <SBDBaseChannelDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes the <code>BaseChannelDelegate</code> by identifier.
/// \param identifier The identifier for the delegate to be removed.
///
+ (void)removeChannelDelegateForIdentifier:(NSString * _Nonnull)identifier;
/// Gets the delegate for channel by indentifer.
/// \param identifier The identifier for delegate.
///
///
/// returns:
/// <code>BaseChannelDelegate</code> delegate.
+ (id <SBDBaseChannelDelegate> _Nullable)channelDelegateForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Removes all channel delegates
+ (void)removeAllChannelDelegates;
/// Gets a <code>UserEventDelegate</code>
/// \param identifier Identifier for delegate
///
///
/// returns:
/// <code>UserEventDelgate</code> if exists
+ (id <SBDUserEventDelegate> _Nullable)userEventDelegateForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Adds a <code>UserEventDelegate</code>
/// \param delegate <code>UserEventDelegate</code> instance
///
/// \param identifier String identifier for the delegate
///
+ (void)addUserEventDelegate:(id <SBDUserEventDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes a <code>UserEventDelegate</code>
/// \param identifier String identifier for the delegate
///
+ (void)removeUserEventDelegateForIdentifier:(NSString * _Nonnull)identifier;
/// Removes all registered user event delegates
+ (void)removeAllUserEventDelegates;
/// Adds a <code>SessionDelegate</code>
/// \param delegate <code>SessionDelegate</code> instance
///
+ (void)setSessionDelegate:(id <SBDSessionDelegate> _Nonnull)delegate;
/// Removes the <code>SessionDelegate</code>
+ (void)removeSessionDelegate;
/// Gets the pending push token.
///
/// returns:
/// Returns the pending push token.
+ (NSData * _Nullable)getPendingPushToken SWIFT_WARN_UNUSED_RESULT;
/// Registers the current device token to Sendbird.
/// \param devToken Device token for APNS.
///
/// \param unique If <code>true</code>, register device token after removing exsiting all device tokens of the current user.
/// If <code>false</code>, just add the device token.
///
/// \param completionHandler The handler block to execute. <code>status</code> is the status for push token registration.
/// It is defined in <code>PushTokenRegistrationStatus</code>. <code>.success</code> represents the <code>devToken</code> is registered.
/// <code>.pending</code> represents the <code>devToken</code> is not registered because the connection is not established,
/// so this method has to be invoked with <code>getPendingPushToken</code> method after the connection.
/// The <code>devToken</code> is retrived by <code>getPendingPushToken</code>. <code>.error</code> represents the push token registration is failed.
///
+ (void)registerDevicePushToken:(NSData * _Nonnull)devToken unique:(BOOL)unique completionHandler:(void (^ _Nullable)(enum SBDPushTokenRegistrationStatus, SBError * _Nullable))completionHandler;
/// Unregisters the current device token from Sendbird.
/// \param devToken Device token for APNS.
///
/// \param completionHandler The handler block to execute.
///
+ (void)unregisterPushToken:(NSData * _Nonnull)devToken completionHandler:(void (^ _Nullable)(NSDictionary * _Nullable, SBError * _Nullable))completionHandler;
/// Unregisters all device tokens for the current user from Sendbird.
/// \param completionHandler The handler block to execute.
///
+ (void)unregisterAllPushTokenWithCompletionHandler:(void (^ _Nullable)(NSDictionary * _Nullable, SBError * _Nullable))completionHandler;
/// Requests device push tokens list of current user after the token.
/// since:
/// 3.0.134
/// \param token The token used to get next pagination of deive push tokens.
///
/// \param pushTokenType The enum type to represent the type of push token.
///
/// \param completionHandler The handler block to be executed after requests. This block has no
/// return value and takes 5 arguments that are device push token list, push token type you are
/// requesting, boolean that indicates having next pagination, token to be used next pagination and error.
///
+ (void)getMyPushTokensWithToken:(NSString * _Nullable)token pushTokenType:(enum SBDPushTokenType)pushTokenType completionHandler:(void (^ _Nonnull)(NSArray<NSString *> * _Nonnull, enum SBDPushTokenType, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Sets Do-not-disturb.
/// This method make snooze(or stop snooze) repeatedly.
/// If you want to snooze specific period, use <code>setSnoozePeriodEnable(:startTimestamp:endTimestamp:completionHandler:)</code>.
/// \param enable Enables or not.
///
/// \param startHour Start hour.
///
/// \param startMin Start minute.
///
/// \param endHour End hour.
///
/// \param endMin End minute.
///
/// \param timezone Sets timezone.
///
/// \param completionHandler The handler block to execute.
///
+ (void)setDoNotDisturbWithEnable:(BOOL)enable startHour:(int32_t)startHour startMin:(int32_t)startMin endHour:(int32_t)endHour endMin:(int32_t)endMin timezone:(NSString * _Nonnull)timezone completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets Do-not-disturb.
/// \param completionHandler The handler block to execute.
///
+ (void)getDoNotDisturbWithCompletionHandler:(void (^ _Nullable)(BOOL, NSInteger, NSInteger, NSInteger, NSInteger, NSString * _Nonnull, SBError * _Nullable))completionHandler;
/// Makes a current user snooze/receive remote push notification in specific duration.
/// If you use <code>SendbirdChat setDoNotDisturb(enable:startHour:startMin:endHour:endMin:timezone:completionHandler:)</code> method as well, both methods are applied together.
/// Keep in mind snoozing(or stop snoozing) is applied from this method <em>only once</em>, not repeatedly.
/// If you want to snooze(do not disturb) repeatedly, use <code>SendbirdChat setDoNotDisturb(enable:startHour:startMin:endHour:endMin:timezone:completionHandler:)</code>.
/// since:
/// 3.0.128
/// \param enabled Enabled means snooze remote push notification in duration. If set to disabled, current user can ///receive remote push notification.
///
/// \param startTimestamp Unix timestamp to start snooze.
///
/// \param endTimestamp Unix timestamp to end snooze.
///
/// \param completionHandler The handler block to execute when setting notification snoozed is complete.
///
+ (void)setSnoozePeriodWithEnabled:(BOOL)enabled startTimestamp:(int64_t)startTimestamp endTimestamp:(int64_t)endTimestamp completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Requests whether the current user snooze remote push notification.
/// since:
/// 3.0.128
/// \param completionHandler The handler block to execute when setting notification snoozed is complete.
///
+ (void)getSnoozePeriod:(void (^ _Nonnull)(BOOL, int64_t, int64_t, SBError * _Nullable))completionHandler;
/// Changes a setting that decides which push notification for the current user to receive in all of the group channel.
/// since:
/// 3.0.128
/// \param pushTriggerOption The options to choose which push notification for the current user to receive.
///
/// \param completionHandler The handler block to execute when setting a push trigger option of the current ///user is completed.
///
+ (void)setPushTriggerOption:(enum SBDPushTriggerOption)pushTriggerOption completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Requests a setting that decides which push notification for the current user to receive in all of the group channel.
/// since:
/// 3.0.128
/// \param completionHandler The handler block to execute when getting a push trigger of the current user is ///completed.
///
+ (void)getPushTriggerOptionWithCompletionHandler:(void (^ _Nonnull)(enum SBDPushTriggerOption, SBError * _Nullable))completionHandler;
/// Sets push sound
/// \param sound Push sound
///
/// \param completionHandler The handler block to be executed after set push sound.
///
+ (void)setPushSound:(NSString * _Nonnull)sound completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets push shound
/// \param completionHandler The handler block to execute.
///
+ (void)getPushSoundWithCompletionHandler:(void (^ _Nullable)(NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Sets a push template of the current user.
/// \param name The name of push template. Uses <code>SendbirdChat.PushTemplate</code> constants
///
/// \param completionHandler The handler block to execute.
///
+ (void)setPushTemplateWithName:(NSString * _Nonnull)name completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets a push template of the current user.
/// \param completionHandler The handler block to execute. The <code>name</code> is the current user’s push template.
///
+ (void)getPushTemplateWithCompletionHandler:(void (^ _Nullable)(NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Sets group channel invitation preference for auto acceptance.
/// \param autoAccept If <code>true</code>, the current user will accept the group channel invitation automatically.
///
/// \param completionHandler The handler block to execute.
///
+ (void)setChannelInvitationPreferenceWithAutoAccept:(BOOL)autoAccept completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets group channel inviation preference for auto acceptance.
/// \param completionHandler The handler block to execute.
///
+ (void)getChannelInvitationPreferenceAutoAcceptWithCompletionHandler:(void (^ _Nullable)(BOOL, SBError * _Nullable))completionHandler;
/// Creates <code>FriendListQuery</code> instance for friend list
/// since:
/// 4.0.0
///
/// returns:
/// <code>FriendListQuery</code> instance
+ (SBDFriendListQuery * _Nonnull)createFriendListQuery SWIFT_WARN_UNUSED_RESULT;
/// Sets current user to be discoverable by others
/// since:
/// 3.0.205
/// \param allow if <code>true</code>, current user will be set to discoverable by others
///
+ (void)setAllowFriendDiscovery:(BOOL)allow completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Gets a flag whether current user is discoverable or not by others
/// since:
/// 3.0.205
+ (void)getAllowFriendDiscoveryWithCompletionHandler:(void (^ _Nullable)(BOOL, SBError * _Nullable))completionHandler;
/// Adds users as friend
/// \param userIds user ID list
///
/// \param completionHandler completion handler
///
+ (void)addFriendsWithUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(NSArray<SBDUser *> * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes a given user ID from friend list
/// \param userId user id
///
/// \param completionHandler completion handler
///
+ (void)deleteFriendWithUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes a given list of user from friend list
/// \param userIds user ID list
///
/// \param completionHandler completion handler
///
+ (void)deleteFriendsWithUserIds:(NSArray<NSString *> * _Nonnull)userIds completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes a friend with given discovery key
/// \param discoveryKey discovery key that associates with friend
///
/// \param completionHandler completion handler
///
+ (void)deleteFriendWithDiscoveryKey:(NSString * _Nonnull)discoveryKey completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes list of friends with given discovery keys
/// \param discoveryKeys list of discovery key that associates with friends
///
/// \param completionHandler completion handler
///
+ (void)deleteFriendsWithDiscoveryKeys:(NSArray<NSString *> * _Nonnull)discoveryKeys completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Uploads discovery key and corresponding name
/// \param discoveryKeyAndNames a dictionary contains discovery key as key and name as value
///
/// \param completionHandler completion handler
///
+ (void)uploadFriendDiscoveries:(NSDictionary<NSString *, NSString *> * _Nonnull)discoveryKeyAndNames completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Fetches friends’ change log
/// \param token a string to pagniate next page
///
/// \param completionHandler completion handler
///
+ (void)getFriendChangeLogsWithToken:(NSString * _Nullable)token completionHandler:(void (^ _Nullable)(NSArray<SBDUser *> * _Nullable, NSArray<NSString *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the number of group channel with the filter.
/// since:
/// 3.0.116
/// \param memberStateFilter The member state of the current user in the channels that are counted.
///
/// \param completionHandler The handler block to execute.
///
+ (void)getGroupChannelCountWithMemberStateFilter:(enum SBDMemberStateFilter)memberStateFilter completionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Gets the total unread channel count of all group channels.
/// since:
/// 3.0.116
/// \param completionHandler The handler block to execute. The <code>unreadCount</code> is the total count
/// of unread channels in all of group channel which the current is a member.
///
+ (void)getTotalUnreadChannelCountWithCompletionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Gets the total unread channel count of all group channels with filters of params.
/// <ul>
///   <li>
///     Since 3.1.7
///   </li>
/// </ul>
/// \param params The instance of parameters to filter. 
///
/// \param completionHandler The handler block to execute. The <code>unreadCount</code> is the total
/// count of unread group channels of which the current user is a member, filtered by <code>params</code>.
///
+ (void)getTotalUnreadChannelCountWithParams:(SBDGroupChannelTotalUnreadChannelCountParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Gets the number of unread messages in group channels.
/// since:
/// 3.0.116
/// \param completionHandler The handler block to execute. The <code>unreadCount</code> is the
/// total count of unread messages in all of group channel which the current is a member.
///
+ (void)getTotalUnreadMessageCountWithCompletionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Gets the total unread message count of the channels with filters of params.
/// since:
/// 3.0.116
/// \param params The instance of parameters to filter.
///
/// \param completionHandler The handler block to be executed after getting total unread message
/// count. This block has no return value and takes two argument, the one is the number of unread message
/// and the other is error.
///
+ (void)getTotalUnreadMessageCountWithParams:(SBDGroupChannelTotalUnreadMessageCountParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(NSUInteger, SBError * _Nullable))completionHandler;
/// Get unread counts of message and invitation counts in super and non_super channels.
/// since:
/// 3.0.116
/// \param key <code>UnreadItemKey</code> optionSets to contain count flags
///
/// \param completionHandler The handler block to be executed after getting unread item count.
/// This block has no return value and takes two argument. the one is type of UnreadItemCount that
/// contains unsinged interger for count you requested. the other is an error made when there is something
/// wrong to response.
///
+ (void)getUnreadItemCountWithKey:(SBDUnreadItemKey * _Nonnull)key completionHandler:(void (^ _Nonnull)(SBDUnreadItemCount * _Nullable, SBError * _Nullable))completionHandler;
/// Gets total unread message count for current user
+ (NSInteger)getSubscribedTotalUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// Gets total unread message count that is subscribed with custom types for current user
+ (NSInteger)getSubscribedCustomTypeTotalUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// Gets unread message count on channels with given custom type for current user
+ (NSInteger)getSubscribedCustomTypeUnreadMessageCountWithCustomType:(NSString * _Nonnull)customType SWIFT_WARN_UNUSED_RESULT;
/// Marks as read all group channels of the current user.
/// \param completionHandler The handler block to execute.
///
+ (void)markAsReadAllWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Marks as read some group channels of the current user.
/// \param channelURLs The array list with channel urls to be marked as read.
///
/// \param completionHandler The handler block to execute.
///
+ (void)markAsReadWithChannelURLs:(NSArray<NSString *> * _Nonnull)channelURLs completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Marks as delivered with the payload of the remote notification.
/// since:
/// 3.0.183
/// \param remoteNotificationPayload The remote notification payload
///
/// \param completionHandler The handler block to execute
///
+ (void)markAsDeliveredWithRemoteNotificationPayload:(NSDictionary * _Nonnull)remoteNotificationPayload completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Requests updated channels and deleted channel URLs since a certain time. A certain time is decided by a token.
/// since:
/// 3.0.182
/// \param token The token used to get next pagination of changelogs.
///
/// \param params the parameter object that filters a result. See <code>GroupChannelChangeLogsParams</code> for more detail
///
/// \param completionHandler The handler type of <code>ChannelChangeLogsHandler</code> block to
/// execute. The <code>updatedChannels</code> is the channels that were updated. The <code>deletedChannelURLs</code>
/// is the list of the deleted channel URLs. If there are more changelogs that are not returned yet, the
/// <code>hasMore</code> is <code>true</code>. The <code>token</code> can be used to get more changedlogs.
///
+ (void)getMyGroupChannelChangeLogsWithToken:(NSString * _Nullable)token params:(SBDGroupChannelChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, NSArray<NSString *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Requests updated channels and deleted channel URLs since the timestamp.
/// since:
/// 3.0.182
/// \param timestamp The number of milli-seconds(msec). Requests changelogs from that time. This value must not be ///negative.
///
/// \param params the parameter object that filters a result. See <code>GroupChannelChangeLogsParams</code> for more detail
///
/// \param completionHandler The handler type of <code>ChannelChangeLogsHandler</code> block to
/// execute. The <code>updatedChannels</code> is the channels that were updated. The <code>deletedChannelURLs</code>
/// is the list of the deleted channel URLs. If there are more changelogs that are not returned yet, the
/// <code>hasMore</code> is <code>true</code>. The <code>token</code> can be used to get more changedlogs.
///
+ (void)getMyGroupChannelChangeLogsWithTimestamp:(int64_t)timestamp params:(SBDGroupChannelChangeLogsParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(NSArray<SBDGroupChannel *> * _Nullable, NSArray<NSString *> * _Nullable, BOOL, NSString * _Nullable, SBError * _Nullable))completionHandler;
/// Retrieves the log level.
///
/// returns:
/// Log level.
+ (SBDLogLevel * _Nonnull)getLogLevel SWIFT_WARN_UNUSED_RESULT;
/// Sets the log level. The log level is defined by <code>LogLevel</code>.
/// \param logLevel Log level.
///
+ (void)setLogLevel:(SBDLogLevel * _Nonnull)logLevel;
/// Gets mime type of file.
/// \param file File to get mime type.
///
///
/// returns:
/// Returns mime type of the file.
+ (NSString * _Nullable)getMimeType:(NSData * _Nullable)file SWIFT_WARN_UNUSED_RESULT;
/// Turns on or off the reconnection by network awareness.
/// \param isOn If <code>true</code>, the reconnection by network Awareness is turned.
///
+ (void)setNetworkAwarenessReconnection:(BOOL)isOn;
/// Sendbird user agent information getter.
+ (NSString * _Nonnull)getSBUserAgent SWIFT_WARN_UNUSED_RESULT;
/// Used to set the version information of the Sendbird SDK extension.
/// \param key Extension sdk’s hidden key
///
/// \param version Extension sdk’s version string
///
+ (void)addExtension:(NSString * _Nonnull)key version:(NSString * _Nonnull)version;
/// Initialize <code>sharedContainerIdentifier</code> of NSURLSessionConfiguration to use background
/// session.
/// important:
/// If you use <code>App Extension</code> and use upload file message in extension,
/// you <em>MUST</em> set thie field.
/// \param identifier The identifier to set background session configuraion.
///
+ (void)setSharedContainerIdentifier:(NSString * _Nonnull)identifier;
/// Sets dispatch queue for every completion handler and delegate. Default queue is the main queue.
/// \param queue Dispatch queue for every completion handler and delegate.
///
+ (void)setCompletionHandlerDelegateQueue:(dispatch_queue_t _Nonnull)queue;
/// Runs block in the dispatch queue that was set by <code>setCompletionHandlerDelegateQueue(_:)</code>.
/// \param block Block to run.
///
+ (void)performCompletionHandlerDelegateQueue:(void (^ _Nullable)(void))block;
/// Sets the app group.
/// since:
/// 3.0.183
/// \param appGroup The app group.
///
+ (void)setAppGroup:(NSString * _Nonnull)appGroup;
/// Gets the key to authenticate the file URL.
/// This has to be put into the HTTP header when the client needs to access it.
/// since:
/// 3.0.194
///
/// returns:
/// The key to authenticate the file URL
+ (NSString * _Nullable)ekey SWIFT_WARN_UNUSED_RESULT;
/// Requests a emoji container which contains hash and list of emoji category.
/// since:
/// 3.0.180
/// \param completionHandler The handler block to execute after request is completed
///
+ (void)getAllEmojis:(void (^ _Nullable)(SBDEmojiContainer * _Nullable, SBError * _Nullable))completionHandler;
/// Requests updated channels and deleted channel URLs since the timestamp.
/// since:
/// 3.0.180
/// \param emojiKey The emoji key
///
/// \param completionHandler The handler block to execute after request is completed
///
+ (void)getEmoji:(NSString * _Nonnull)emojiKey completionHandler:(void (^ _Nullable)(SBDEmoji * _Nullable, SBError * _Nullable))completionHandler;
/// Requests updated channels and deleted channel URLs since the timestamp.
/// since:
/// 3.0.180
/// \param categoryId The category id
///
/// \param completionHandler The handler block to execute after request is completed
///
+ (void)getEmojiCategory:(int64_t)categoryId completionHandler:(void (^ _Nullable)(SBDEmojiCategory * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the current user object.
/// The object is valid when the connection succeeded.
///
/// returns:
/// The current user object.
+ (SBDUser * _Nullable)getCurrentUser SWIFT_WARN_UNUSED_RESULT;
/// Gets the current user’s latest connection millisecond time(UTC).
/// If the connection state is not public, Returns 0.
/// since:
/// 3.0.117
///
/// returns:
/// latest connected millisecond time stamp.
+ (int64_t)getLastConnectedAt SWIFT_WARN_UNUSED_RESULT;
/// Updates the current user’s information
/// since:
/// 4.0.0
/// \param params <code>UserUpdateParams</code> instance
///
/// \param progressHandler The handler block to monitor progression. 
/// <code>bytesSent</code> is the number of bytes sent ///since the last time this method was called. <code>totalBytesSent</code>
/// is the total number of bytes sent so far. ///<code>totalBytesExpectedToSend</code> is the expected length of the body data.
///
+ (void)updateCurrentUserInfoWithParams:(SBDUserUpdateParams * _Nonnull)params progressHandler:(void (^ _Nullable)(int64_t, int64_t, int64_t))progressHandler completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Updates the current user’s preferred languages
/// \param preferredLanguages New array of preferred languages
///
/// \param completionHandler The handler block to execute.
///
+ (void)updateCurrentUserInfoWithPreferredLanguages:(NSArray<NSString *> * _Nonnull)preferredLanguages completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Blocks the specified user.
/// \param userId The user ID to be blocked.
///
/// \param completionHandler The handler block to execute. <code>blockedUser</code> is the blocked user by the current user.
///
+ (void)blockUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Blocks the specified user.
/// \param user The user to be blocked.
///
/// \param completionHandler The handler block to execute. <code>blockedUser</code> is the blocked user by the current user.
///
+ (void)blockUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBDUser * _Nullable, SBError * _Nullable))completionHandler;
/// Unblocks the specified user.
/// \param userId The user ID which was blocked.
///
/// \param completionHandler The handler block to execute.
///
+ (void)unblockUserId:(NSString * _Nonnull)userId completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Unblocks the specified user.
/// \param user The user who was blocked.
///
/// \param completionHandler The handler block to execute.
///
+ (void)unblockUser:(SBDUser * _Nonnull)user completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable sessionKey;)
+ (NSString * _Nullable)sessionKey SWIFT_WARN_UNUSED_RESULT;
/// Creates a group channel collection
/// \param query <code>GroupChannelListQuery</code> instance
///
///
/// returns:
/// <code>GroupChannelCollection</code> instance
+ (SBDGroupChannelCollection * _Nullable)createGroupChannelCollectionWithQuery:(SBDGroupChannelListQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Creates a message collection
/// \param channel <code>GroupChannel</code> instance
///
/// \param startingPoint Epoch timestamp that will be used as pivot point to fetch messages
///
/// \param params <code>MessageListParams</code> instance
///
+ (SBDMessageCollection * _Nullable)createMessageCollectionWithChannel:(SBDGroupChannel * _Nonnull)channel startingPoint:(int64_t)startingPoint params:(SBDMessageListParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Clears local cached data
/// \param completionHandler completion 
///
+ (void)clearCachedDataWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Returns local cached data size in byte
///
/// returns:
/// cached data size
+ (NSInteger)getCachedDataSize SWIFT_WARN_UNUSED_RESULT;
/// Checks if local caching is enabled.
/// since:
/// 3.1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLocalCachingEnabled;)
+ (BOOL)isLocalCachingEnabled SWIFT_WARN_UNUSED_RESULT;
@end


@interface SendbirdChat (SWIFT_EXTENSION(SendbirdChat))
@end


SWIFT_CLASS_NAMED("PushTemplate")
@interface SBDPushTemplate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents SendbirdChat options.
SWIFT_CLASS("_TtC12SendbirdChat19SendbirdChatOptions")
@interface SendbirdChatOptions : NSObject
/// Gets the value whether the sender information of <code>sender</code> of <code>UserMessage</code> or
/// <code>FileMessage</code> such as nickname and profile url will be returned as the latest user’s or not.
///
/// returns:
/// <code>true</code> if the sender is the latest information.
+ (BOOL)useMemberAsMessageSender SWIFT_WARN_UNUSED_RESULT;
/// Sets <code>useMemberAsMessageSender</code>
/// If set <code>true</code>, the sender information of <code>sender</code> of <code>UserMessage</code> or <code>FileMessage</code>
/// such as nickname and profile url will be returned as the latest user’s. Otherwise, the information will be
/// the value of the message creation time.
/// \param value <code>Bool</code> value
///
+ (void)setUseMemberAsMessageSender:(BOOL)value;
/// Gets connection timeout
+ (NSTimeInterval)getConnectionTimeout SWIFT_WARN_UNUSED_RESULT;
/// Sets the timeout for connection.
/// If there is a timeout error frequently, set the longer timeout than default value. The default is 10 seconds.
/// \param timeout timeout for connection.
///
+ (void)setConnectionTimeout:(NSInteger)timeout;
/// Gets typing indicator throttle
+ (NSTimeInterval)getTypingIndicatorThrottle SWIFT_WARN_UNUSED_RESULT;
/// Sets a term of typing indicator throttling in group channel.
/// After this throttling interval from typing indicator started (or ended), You can re-start (or re-end) typing indicator.
/// If you call start (or end) again in this interval, the call will be ignored.
/// since:
/// 3.0.100
/// \param interval A time interval that can renew typing indicator. can be RANGE from 1.0 to 9.0.
///
+ (void)setTypingIndicatorThrottle:(NSTimeInterval)interval;
/// Gets file trnasfer timeout
+ (NSTimeInterval)getFileTransferTimeout SWIFT_WARN_UNUSED_RESULT;
/// Sets the timeout for file transfer.
/// This value affects the methods that send a binary data including sending
/// file messages, creating and updating channels.
/// since:
/// 3.0.130
/// \param timeout Timeout in seconds. It must be greater than 0. Otherwise, the default value (60 seconds) will be set.
///
+ (void)setFileTransferTimeout:(NSInteger)timeout;
/// Gets websocket response timeout
+ (NSTimeInterval)getWebSocketResponseTimeout SWIFT_WARN_UNUSED_RESULT;
/// Sets the websocket response timeout used in sending/receiving commmands by websocket.
/// The value should be between 5 seconds and 300 seconds (5 minutes).
/// The default value is 10 seconds.
/// since:
/// 3.0.199
/// \param timeout Timeout in seconds.
///
+ (void)setWebSocketResponseTimeout:(NSInteger)timeout;
/// Gets include poll detail
/// if <code>true</code>, <code>Poll</code> contains its full representation including <code>PollDetails</code>, otherwise <code>PollDetails</code> will be <code>nil</code>
+ (BOOL)includePollDetails SWIFT_WARN_UNUSED_RESULT;
/// Sets the websocket response to include full poll representation if it exists in a message
/// since:
/// 3.0.232
/// \param value whether poll to be included in a message or not
///
+ (void)setIncludePollDetails:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents a user that typically binds with message
SWIFT_CLASS_NAMED("Sender")
@interface SBDSender : SBDUser
/// If <code>true</code>, the current user blocked the sender.
@property (nonatomic) BOOL isBlockedByMe;
/// The role of the sender in the channel.
/// since:
/// 3.0.198
@property (nonatomic) enum SBDRole role;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth isBlockedByMe:(BOOL)isBlockedByMe role:(enum SBDRole)role OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nonnull)nickname profileURL:(NSString * _Nullable)profileURL connectionStatus:(enum SBDUserConnectionStatus)connectionStatus lastSeenAt:(int64_t)lastSeenAt metaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData isActive:(BOOL)isActive discoveryKey:(NSString * _Nullable)discoveryKey friendName:(NSString * _Nonnull)friendName prefLangauges:(NSArray<NSString *> * _Nonnull)prefLangauges requireAuth:(BOOL)requireAuth SWIFT_UNAVAILABLE;
@end


@interface SBDSender (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>Sender</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// Represents a delegate to receive session relates events
SWIFT_PROTOCOL_NAMED("SessionDelegate")
@protocol SBDSessionDelegate
/// App needs to fetch a new token.
/// Pass on the new (retrieved) token to SDK via <code>success(NEW_TOKEN)</code> or <code>fail()</code> if fetch failed.
/// In case when app decides not to refresh the session for this user, they should call <code>success(nil)</code>.
/// since:
/// 3.0.205
/// \param success Call this block method after retrieving a new token. In case when
/// app decides not to refresh the session for this user, they should call this with <code>nil</code>.
///
/// \param fail Call this block method when failed to retrieve a new token.
///
- (void)sessionTokenDidRequireWithSuccessCompletion:(void (^ _Nonnull)(NSString * _Nullable))success failCompletion:(void (^ _Nonnull)(void))fail;
/// Called when the SDK can’t refresh the session.
/// App should force a user to a login page to connect again.
/// since:
/// 3.0.205
- (void)sessionWasClosed;
@optional
/// Called when session key is expired.
/// since:
/// 3.0.205
/// note:
/// unavailable since 3.0.236
- (void)sessionWasExpired SWIFT_UNAVAILABLE;
/// Called when SDK refreshed the session key.
/// since:
/// 3.0.205
- (void)sessionWasRefreshed;
/// Called when the SDK run into an error while refreshing the session key.
/// since:
/// 3.0.205
/// \param error Error object
///
- (void)sessionDidHaveError:(SBError * _Nonnull)error;
@end


SWIFT_CLASS("_TtC12SendbirdChat22SessionWebSocketEngine") SWIFT_AVAILABILITY(ios,introduced=13)
@interface SessionWebSocketEngine : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionWebSocketTask;

SWIFT_AVAILABILITY(ios,introduced=13)
@interface SessionWebSocketEngine (SWIFT_EXTENSION(SendbirdChat)) <NSURLSessionDataDelegate, NSURLSessionWebSocketDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didOpenWithProtocol:(NSString * _Nullable)protocol;
- (void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didCloseWithCode:(NSURLSessionWebSocketCloseCode)closeCode reason:(NSData * _Nullable)reason;
@end



SWIFT_CLASS("_TtC12SendbirdChat16StarscreamEngine")
@interface StarscreamEngine : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// An object that represents the information about threaded messages, whose properties show how many
/// replies the thread has received, who left the replies, and when the last reply was added.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("ThreadInfo")
@interface SBDThreadInfo : NSObject
/// The total number of replies in a specific thread. A value of 0 indicates there is no reply in the thread.
@property (nonatomic, readonly) NSInteger replyCount;
/// Users who left most replies in the thread. The order of users is based on the number of replies they
/// made in the thread and the maximum size of the array can be adjusted per request.
@property (nonatomic, readonly, copy) NSArray<SBDUser *> * _Nonnull mostRepliedUsers;
/// The time that the last reply was created, in Unix milliseconds format. A value of 0 indicates there is no reply in the thread.
@property (nonatomic, readonly) int64_t lastRepliedAt;
@property (nonatomic, readonly) int64_t updatedAt;
- (nonnull instancetype)initWithReplyCount:(NSInteger)replyCount mostRepliedUsers:(NSArray<SBDUser *> * _Nonnull)mostRepliedUsers lastRepliedAt:(int64_t)lastRepliedAt updatedAt:(int64_t)updatedAt OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that is returned through the event handler when a threaded reply is added or deleted.
/// This object should be applied to the parent message.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("ThreadInfoUpdateEvent")
@interface SBDThreadInfoUpdateEvent : NSObject
/// An object that has the information about threaded messages.
@property (nonatomic, readonly, strong) SBDThreadInfo * _Nonnull threadInfo;
/// The unique ID of the message that contains thread information.
@property (nonatomic, readonly) int64_t targetMessageId;
/// The unique URL of the channel where threaded messages belong.
@property (nonatomic, readonly, copy) NSString * _Nonnull channelURL;
/// The type of the channel where threaded messages belong.
@property (nonatomic, readonly) enum SBDChannelType channelType;
- (nonnull instancetype)initWithThreadInfo:(SBDThreadInfo * _Nonnull)threadInfo targetMessageId:(int64_t)targetMessageId channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object contains set of options to retrieve threaded messages.
/// since:
/// 3.0.181
SWIFT_CLASS_NAMED("ThreadedMessageListParams")
@interface SBDThreadedMessageListParams : NSObject <NSCopying>
/// The number of messages to retrieve that were sent before the specified timestamp or message ID. Default is 0
@property (nonatomic) NSInteger previousResultSize;
/// The number of messages to retrieve that were sent after the specified timestamp or message ID. Default is 0
@property (nonatomic) NSInteger nextResultSize;
/// Determines whether to include the messages with the matching timestamp or message ID in the results. Default is <code>false</code>
@property (nonatomic) BOOL isInclusive;
/// Determines whether to sort the retrieved messages in reverse order. If <code>false</code>, the results are in ascending order. Default is <code>false</code>
@property (nonatomic) BOOL reverse;
/// Restricts the search scope only to retrieve the messages with the specified message type. Default is <code>.all</code>
@property (nonatomic) enum SBDMessageTypeFilter messageType;
/// Restricts the search scope only to retrieve the messages with the specified custom message type.
/// When the custom type filtering is not needed, the value should be set to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable customType;
/// Restricts the search scope only to retrieve the messages sent by the users with the specified user
/// IDs. When the user ID filtering is not needed, the value should be set to <code>nil</code>.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable senderUserIds;
/// Determines whether to include the metaarray information of the messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeMetaArray;
/// Determines whether to include the reactions to the messages in the results. Default is <code>false</code>
@property (nonatomic) BOOL includeReactions;
/// Determines whether to include the thread information of the message when it is a parent message. Default is <code>false</code>
/// <ul>
///   <li>
///     Since 3.0.236
///   </li>
/// </ul>
@property (nonatomic) BOOL includeParentMessageInfo;
/// Restricts the search scope only to retrieve the messages with the multiple specified custom
/// message types. When the custom type filtering is not needed, the value should be set to <code>nil</code>.
/// note:
/// The default value is <code>nil</code>.
/// since:
/// 3.0.213
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customTypes;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Parameter constructor
- (nonnull instancetype)initWithPreviousResultSize:(NSInteger)previousResultSize nextResultSize:(NSInteger)nextResultSize isInclusive:(BOOL)isInclusive reverse:(BOOL)reverse messageType:(enum SBDMessageTypeFilter)messageType customType:(NSString * _Nullable)customType senderUserIds:(NSArray<NSString *> * _Nullable)senderUserIds includeMetaArray:(BOOL)includeMetaArray includeReactions:(BOOL)includeReactions includeParentMessageInfo:(BOOL)includeParentMessageInfo customTypes:(NSArray<NSString *> * _Nullable)customTypes OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>ThreadedMessageListParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a thumbnail information
SWIFT_CLASS_NAMED("Thumbnail")
@interface SBDThumbnail : NSObject
/// The url of the thumbnail.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The maximum size of the thumbnail.
@property (nonatomic, readonly) CGSize maxSize;
/// The real size of the thumbnail.
@property (nonatomic, readonly) CGSize realSize;
/// The file URL without the ekey.
/// since:
/// 3.0.194
@property (nonatomic, readonly, copy) NSString * _Nullable plainURL;
@property (nonatomic) BOOL requireAuth;
@property (nonatomic, copy) NSString * _Nullable ekey;
/// Parameter constructor
- (nonnull instancetype)initWithMaxSize:(CGSize)maxSize realSize:(CGSize)realSize plainURL:(NSString * _Nullable)plainURL requireAuth:(BOOL)requireAuth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBDThumbnail (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDThumbnail (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>Thumbnail</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ThumbnailSize</code> class represents the thumbnail size of thumbnail.
SWIFT_CLASS_NAMED("ThumbnailSize")
@interface SBDThumbnailSize : NSObject
/// The max size of the thumbnail.
@property (nonatomic, readonly) CGSize maxSize;
/// Creates <code>ThumbnailSize</code> object with <code>CGSize</code>.
/// \param maxSize The max size of the thumbnail.
///
///
/// returns:
/// <code>ThumbnailSize</code> object.
+ (SBDThumbnailSize * _Nonnull)makeWithMaxCGSize:(CGSize)maxSize SWIFT_WARN_UNUSED_RESULT;
/// Makes <code>ThumbnailSize</code> object with width and height.
/// \param maxWidth The max width of the thumbnail.
///
/// \param maxHeight The max height of the thumbnail.
///
///
/// returns:
/// <code>ThumbnailSize</code> object.
+ (SBDThumbnailSize * _Nonnull)makeWithMaxWidth:(CGFloat)maxWidth maxHeight:(CGFloat)maxHeight SWIFT_WARN_UNUSED_RESULT;
/// Makes <code>ThumbnailSize</code> object with thumbnail
/// \param thumbnail <code>Thumbnail</code> object
///
///
/// returns:
/// <code>ThumbnailSize</code> object.
+ (SBDThumbnailSize * _Nonnull)makeWithThumbnail:(SBDThumbnail * _Nonnull)thumbnail SWIFT_WARN_UNUSED_RESULT;
/// Default constructor.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The enum type to filter my group channels.
/// since:
/// 3.0.113
typedef SWIFT_ENUM_NAMED(NSInteger, SBDUnreadChannelFilter, "UnreadChannelFilter", open) {
/// Shows all my group channels.
  SBDUnreadChannelFilterAll = 0,
/// Shows my group channels that have unread messages.
  SBDUnreadChannelFilterUnreadMessage = 1,
};


/// The <code>UnreadItemCount</code> class represents counts of messages. The instance of this class is returned
/// from completion handler in <code>getUnreadItemCountWithKey:completionHandler:]</code>.
SWIFT_CLASS_NAMED("UnreadItemCount")
@interface SBDUnreadItemCount : NSObject
/// The count of unread message in all of group channels.
/// When you requested with <code>UnreadItemKey.groupChannelUnreadMessageCount</code>, then you
/// can get unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.groupChannelUnreadMessageCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger groupChannelUnreadMessageCount;
/// The count of unread message in all of non super group channel.
/// When you requested with <code>UnreadItemKey.nonSuperUnreadMessageCount</code>, then you can
/// get unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.nonSuperUnreadMessageCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.101
@property (nonatomic) NSUInteger nonSuperUnreadMessageCount;
/// The count of unread message in all of non super group channel.
/// When you requested with <code>UnreadItemKey.superUnreadMessageCount</code>, then you can get
/// unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.superUnreadMessageCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.101
@property (nonatomic) NSUInteger superUnreadMessageCount;
/// The count of unread mention in all of group channels.
/// When you requested with <code>UnreadItemKey.groupChannelUnreadMentionCount</code>, then you
/// can get unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.groupChannelUnreadMentionCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger groupChannelUnreadMentionCount;
/// The count of unread mention in all of non super group channel.
/// When you requested with <code>UnreadItemKey.nonSuperUnreadMentionCount</code>, then you can
/// get unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.nonSuperUnreadMentionCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger nonSuperUnreadMentionCount;
/// The count of unread mention in all of non super group channel.
/// When you requested with <code>UnreadItemKey.superUnreadMentionCount</code>, then you can get
/// unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.superUnreadMentionCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger superUnreadMentionCount;
/// The count of unread message in all of group channels.
/// When you requested with <code>UnreadItemKey.superInvitationCount</code>, then you can get unsigned
/// integer count. If you DID NOT REQUEST <code>UnreadItemKey.superInvitationCount</code>, this
/// property will be <code>NSNotFound</code>.
/// since:
/// 3.0.103
@property (nonatomic) NSUInteger groupChannelInvitationCount;
/// The count of unread message in all of non super group channel.
/// When you requested with <code>UnreadItemKey.nonSuperInvitationCount</code>, then you can get
/// unsigned integer count. If you DID NOT REQUEST <code>UnreadItemKey.nonSuperInvitationCount</code>,
/// this property will be <code>NSNotFound</code>.
/// since:
/// 3.0.101
@property (nonatomic) NSUInteger nonSuperInvitationCount;
/// The count of unread message in all of non super group channel.
/// When you requested with <code>UnreadItemKey.superInvitationCount</code>, then you can get unsigned
/// integer count. If you DID NOT REQUEST <code>UnreadItemKey.superInvitationCount</code>, this
/// property will be <code>NSNotFound</code>.
/// since:
/// 3.0.101
@property (nonatomic) NSUInteger superInvitationCount;
/// Returns a Boolean value that indicates whether a count of a given key is present, not NSNotFound.
/// since:
/// 3.0.101
/// \param key An key to look for a count in the instance.
///
///
/// returns:
/// <code>true</code> if counts for key is present in the instance, otherwise <code>false</code>.
- (BOOL)has:(SBDUnreadItemKey * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns count for a given key.
/// since:
/// 3.0.101
/// \param key An key to get a count in the instance.
///
///
/// returns:
/// Unsinged integer of the count for a given key. If key is composed of
/// multiple UnreadItemKey, the return value is combined.
- (NSUInteger)unsignedIntegerForKey:(SBDUnreadItemKey * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBDUnreadItemCount (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


/// The bitmask keys of count about unread messages or invitation.
SWIFT_CLASS_NAMED("UnreadItemKey")
@interface SBDUnreadItemKey : NSObject
@property (nonatomic) NSInteger rawValue;
/// Default constructor.
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
/// The bitmask key for unread message count of non super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull nonSuperUnreadMessageCount;)
+ (SBDUnreadItemKey * _Nonnull)nonSuperUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread message count of super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull superUnreadMessageCount;)
+ (SBDUnreadItemKey * _Nonnull)superUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for invitation count of non super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull nonSuperInvitationCount;)
+ (SBDUnreadItemKey * _Nonnull)nonSuperInvitationCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for invitation count of super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull superInvitationCount;)
+ (SBDUnreadItemKey * _Nonnull)superInvitationCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread mention count of non super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull nonSuperUnreadMentionCount;)
+ (SBDUnreadItemKey * _Nonnull)nonSuperUnreadMentionCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread mention count of non super channel.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull superUnreadMentionCount;)
+ (SBDUnreadItemKey * _Nonnull)superUnreadMentionCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread message count of group channel(super and non-super).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull groupChannelUnreadMessageCount;)
+ (SBDUnreadItemKey * _Nonnull)groupChannelUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for unread mention count of group channel(super and non-super).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull groupChannelUnreadMentionCount;)
+ (SBDUnreadItemKey * _Nonnull)groupChannelUnreadMentionCount SWIFT_WARN_UNUSED_RESULT;
/// The bitmask key for invitation count of group channel(super and non-super).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBDUnreadItemKey * _Nonnull groupChannelInvitationCount;)
+ (SBDUnreadItemKey * _Nonnull)groupChannelInvitationCount SWIFT_WARN_UNUSED_RESULT;
/// Parameter constructor
/// \param keys array of <code>UnreadItemKey</code>
///
- (nonnull instancetype)initWithKeys:(NSArray<SBDUnreadItemKey *> * _Nonnull)keys;
/// hash
@property (nonatomic, readonly) NSUInteger hash;
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Union other into this key
- (void)formUnion:(SBDUnreadItemKey * _Nonnull)other;
/// Intersects other into this key
- (void)formIntersection:(SBDUnreadItemKey * _Nonnull)other;
/// Symmetric difference from other
- (void)formSymmetricDifference:(SBDUnreadItemKey * _Nonnull)other;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object contains information about updated vote count
/// since:
/// 3.0.232
SWIFT_CLASS_NAMED("UpdatedVoteCount")
@interface SBDUpdatedVoteCount : NSObject
/// option id
@property (nonatomic, readonly) int64_t optionId;
/// updated vote count for this option id
@property (nonatomic, readonly) NSUInteger voteCount;
@end



@interface SBDUser (SWIFT_EXTENSION(SendbirdChat)) <NSCopying>
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>User</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUser (SWIFT_EXTENSION(SendbirdChat)) <Mappable>
/// Initialize with json dictionary
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Converts the object into dictionary
- (NSDictionary<NSString *, id> * _Nonnull)_toDictionary SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUser (SWIFT_EXTENSION(SendbirdChat)) <Serializable>
/// Serializes this object into data
///
/// returns:
/// optioanal <code>Data</code> instance
- (NSData * _Nullable)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>User</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUser (SWIFT_EXTENSION(SendbirdChat))
/// Creates the meta data for the current user.
/// \param metaData The meta data to be set.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the
/// meta data which are set on Sendbird server.
///
- (void)createMetaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Updates the meta data for the current user.
/// \param metaData The meta data to be updated.
///
/// \param completionHandler The handler block to execute. <code>metaData</code> is the
/// meta counters which are updated on Sendbird server.
///
- (void)updateMetaData:(NSDictionary<NSString *, NSString *> * _Nonnull)metaData completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, NSString *> * _Nullable, SBError * _Nullable))completionHandler;
/// Deletes meta data with key for the current user.
/// \param key The key to be deleted.
///
/// \param completionHandler The handler block to execute.
///
- (void)deleteMetaDataWithKey:(NSString * _Nonnull)key completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Deletes all meta data for the current user.
/// \param completionHandler The handler block to execute.
///
- (void)deleteAllMetaDataWithCompletionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end

/// User connection statuses for <code>User</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SBDUserConnectionStatus, "UserConnectionStatus", open) {
/// For unavailable user.
  SBDUserConnectionStatusNonAvailable = 0,
/// For on-line user.
  SBDUserConnectionStatusOnline = 1,
/// For off-line user.
  SBDUserConnectionStatusOffline = 2,
};


/// Represents a delegate to receive user relates events
SWIFT_PROTOCOL_NAMED("UserEventDelegate")
@protocol SBDUserEventDelegate <NSObject>
@optional
/// Invoked when list of users has been discovered
/// \param friends list of user
///
- (void)didDiscoverFriends:(NSArray<SBDUser *> * _Nullable)friends;
/// Invoked when total unread message count has been updated
/// since:
/// 3.0.154
/// \param totalCount New total unread count
///
/// \param totalCountByCustomType Dictionary with key of custom tyeps and value of unread count
///
- (void)didUpdateTotalUnreadMessageCount:(int32_t)totalCount totalCountByCustomType:(NSDictionary<NSString *, NSNumber *> * _Nullable)totalCountByCustomType;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBDUserListQueryType, "UserListQueryType", open) {
  SBDUserListQueryTypeAllUsers = 1,
  SBDUserListQueryTypeBlockedUsers = 2,
  SBDUserListQueryTypeOpenChannelParticipants = 3,
  SBDUserListQueryTypeOpenChannelMutedUsers = 4,
  SBDUserListQueryTypeOpenChannelBannedUsers = 5,
  SBDUserListQueryTypeFilteredUsers = 6,
};


/// Represents a mesage object that contains a text message. Derived from <code>BaseMessage</code>.
SWIFT_CLASS_NAMED("UserMessage")
@interface SBDUserMessage : SBDBaseMessage
/// Poll that is linked to this message
/// since:
/// 3.0.232
@property (nonatomic, strong) SBDPoll * _Nullable poll;
/// Translated message text.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable translations;
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage poll:(SBDPoll * _Nullable)poll translations:(NSDictionary<NSString *, NSString *> * _Nullable)translations OBJC_DESIGNATED_INITIALIZER;
+ (SBDUserMessage * _Nullable)pendingMessageWithParams:(SBDUserMessageCreateParams * _Nonnull)params requestId:(NSString * _Nullable)requestId channel:(SBDBaseChannel * _Nonnull)channel sender:(SBDUser * _Nullable)sender isOperatorMessage:(BOOL)isOperatorMessage SWIFT_WARN_UNUSED_RESULT;
/// Applies updated poll data to this message object.
/// This method is designed to be called when <code>didUpdatePoll(:_)</code> event passes the poll object
/// since:
/// 3.0.232
/// \param pollUpdateEvent <code>PollUpdateEvent</code> instance
///
///
/// returns:
/// <code>true</code> if event is successfuly applied
- (BOOL)applyPollUpdateEvent:(SBDPollUpdateEvent * _Nonnull)pollUpdateEvent SWIFT_WARN_UNUSED_RESULT;
/// Applies updated poll data to this message object.
/// This method is designed to be called when <code>didVotePoll(_:)</code> event passes the vote event object
/// since:
/// 3.0.232
/// \param pollVoteEvent <code>PollVoteEvent</code> instance
///
///
/// returns:
/// <code>true</code> if event is successfuly applied all
- (BOOL)applyPollVoteEvent:(SBDPollVoteEvent * _Nonnull)pollVoteEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithReqId:(NSString * _Nullable)reqId requestId:(NSString * _Nullable)requestId messageId:(int64_t)messageId message:(NSString * _Nonnull)message sendingStatus:(enum SBDMessageSendingStatus)sendingStatus sender:(SBDSender * _Nullable)sender channelURL:(NSString * _Nonnull)channelURL channelType:(enum SBDChannelType)channelType mentionedUsers:(NSArray<SBDUser *> * _Nonnull)mentionedUsers mentionType:(enum SBDMentionType)mentionType requestedMentionUserIds:(NSArray<NSString *> * _Nonnull)requestedMentionUserIds createdAt:(int64_t)createdAt updatedAt:(int64_t)updatedAt parentMessageId:(int64_t)parentMessageId parentMessage:(SBDBaseMessage * _Nullable)parentMessage isReplyToChannel:(BOOL)isReplyToChannel threadInfo:(SBDThreadInfo * _Nonnull)threadInfo metaArrays:(NSArray<SBDMessageMetaArray *> * _Nullable)metaArrays data:(NSString * _Nonnull)data customType:(NSString * _Nullable)customType reactions:(NSArray<SBDReaction *> * _Nonnull)reactions messageSurvivalSeconds:(NSInteger)messageSurvivalSeconds silent:(BOOL)silent errorCode:(NSUInteger)errorCode ogMetaData:(SBDOGMetaData * _Nullable)ogMetaData plugins:(NSArray<SBDPlugin *> * _Nullable)plugins isOperatorMessage:(BOOL)isOperatorMessage forceUpdateLastMessage:(BOOL)forceUpdateLastMessage SWIFT_UNAVAILABLE;
@end


@interface SBDUserMessage (SWIFT_EXTENSION(SendbirdChat))
/// Deserializes and reconstructs the object
/// \param data <code>Data</code> instance
///
///
/// returns:
/// <code>UserMessage</code> if parameter is valid, otherwise <code>nil</code>
+ (nullable instancetype)buildFromSerializedData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUserMessage (SWIFT_EXTENSION(SendbirdChat))
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>UserMessage</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBDUserMessage (SWIFT_EXTENSION(SendbirdChat))
/// Compares this object with given other object.
/// \param object <code>Any</code> instance
///
///
/// returns:
/// <code>true</code> if same otherwise <code>false</code>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end



/// The <code>UserMessageUpdateParams</code> class is used to send a user message in <code>BaseChannel</code>. This is a child class of <code>BaseMessageUpdateParams</code>.
/// since:
/// 4.0.0
SWIFT_CLASS_NAMED("UserMessageUpdateParams")
@interface SBDUserMessageUpdateParams : SBDBaseMessageUpdateParams
/// Message text.
@property (nonatomic, copy) NSString * _Nullable message;
/// Links a poll with message, to unlink set it -1
@property (nonatomic) int64_t pollId;
/// Initializes an user message params for update
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of a user message params with message.
/// \param message The message to text.
///
- (nonnull instancetype)initWithMessage:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER;
/// Copies this object
/// \param zone optional <code>NSZone</code>
///
///
/// returns:
/// <code>UserMessageUpdateParams</code> instance
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithData:(NSString * _Nullable)data customType:(NSString * _Nullable)customType mentionType:(enum SBDMentionType)mentionType mentionedUserIds:(NSArray<NSString *> * _Nullable)mentionedUserIds SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWith:(SBDBaseMessage * _Nonnull)message copyMessage:(BOOL)copyMessage SWIFT_UNAVAILABLE;
@end


/// An object to update user information
/// since:
/// 4.0.0
SWIFT_CLASS_NAMED("UserUpdateParams")
@interface SBDUserUpdateParams : NSObject
/// User’s nickname
@property (nonatomic, copy) NSString * _Nullable nickname;
/// User’s profile image url
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
/// User’s profile image data
@property (nonatomic, copy) NSData * _Nullable profileImageData;
/// Preferred langauges for this user
@property (nonatomic, copy) NSArray<NSString *> * _Nullable preferredLanguages;
/// User’s discovery keys for friends
@property (nonatomic, copy) NSArray<NSString *> * _Nullable discoveryKeys;
/// Default constructor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12SendbirdChat9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Connection state
typedef SWIFT_ENUM_NAMED(NSInteger, SBDWebSocketConnectionState, "WebSocketConnectionState", open) {
/// Connecting
  SBDWebSocketConnectionStateConnecting = 0,
/// Open
  SBDWebSocketConnectionStateOpen = 1,
/// Closed
  SBDWebSocketConnectionStateClosed = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
